@model IEnumerable<HCF.BDO.DocumentType>

@{
                /**/

                ViewBag.Title = "Document Types";
                Layout = "~/Views/Shared/_Layout.cshtml";
}

    @section pageHeader{
    <section class="content-header">
        <h1>
            Documents
        </h1>
    </section>
        }
    <div class="container-fluid">
        <div class="row">
            <div class="settingnewBox">

                @await Html.PartialAsync("_MoreConfig")

                <div class="rightcol-setting">
                    <div class="box box-primary">
                        <div class="col-md-4">
                            <doccategorydropdown firsttext="Select"
                                                 required="required"
                                                 class="form-control"
                                                 selectedvalue="0"
                                                 name="DocCategory">
                            </doccategorydropdown>

                            @*@Html.DocCategoryDropdown("DocCategory", 0, "Select", new { controllerName = Model, @class = "form-control" })*@
                        </div>
                        <div class="add_button_comman">
                            <a href='@(Url.RouteUrl("createdocumenttype"))' class="pull-right">
                                <img src="@Url.Content("~/dist/Images/Icons/3d_add_button.png")" title="Add Floor" alt="3d_add_button" />
                            </a>
                        </div>
                       
                            <table id="documenttypeTable" class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th>
                                            @Html.DisplayNameFor(model => model.Name)
                                        </th>
                                        <th>
                                            Doc Category
                                        </th>
                                        <th>
                                            Sample Path
                                        </th>
                                        <th>
                                            Status
                                        </th>

                                        <th>
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.Name)
                                            </td>
                                            <td>
                                                @if (item.DocCategoryID != 0)
                                                {
                                                    @item.DocCategoryID.GetDescription()
                                                }
                                                else
                                                {

                                                }
                                            </td>
                                            <td>
                                               
                                                <a href="@Url.Action("ImagePreview", "Common", new { imgSrc = item.Path, title = "Preview" })" class="modal-link allowclick">
                                                    <img src="@Url.Content("~/dist/Images/Icons/document_blue-icon.png")" title="@item.Path" />
                                                </a>

                                            </td>
                                            <td class="comman_checkbox1">
                                                @Html.DisplayFor(modelItem => item.IsActive)<span></span>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("AddDocumentTypeMaster", "Documents",new { docTypeId = item.DocTypeId})" class="pull-right">
                                                    <img src="@Url.Content(HCF.Web.Models.ImagePathModel.EditIcon)" title="Edit" alt="3d_add_button" />
                                                </a>

                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                       
                    </div>
                </div>
            </div>
        </div>
    </div>


<script>
    var table = $('#documenttypeTable').DataTable({
            "lengthChange": false,
            "pageLength": 20,
            "aaSorting": [],
            "bPaginate": $('#documenttypeTable tbody tr').length > 20,
            "bInfo": false,
            "searching": true,
            "language": {
                "emptyTable": "No data available in table"
            },
            aoColumnDefs: [
                {
                    orderSequence: ["desc", "asc"],
                    aTargets: ['_all']
                }
            ],
           
              dom: "Blftip",
      buttons: [
                {
                    extend: 'pdfHtml5',
                    orientation: 'portrait',
                    title: 'Document Type Report',
                    exportOptions: {
                        columns: [0]
                    },
                    messageBottom: function () {
                        return $("#dvgeneratedby").text();
                    },
                    customize: function (doc) {
                        doc.content.splice(0);
                        var now = new Date();
                        var jsDate = setDateFormat(now);
                        var logo = localStorage.getItem("logoimgbase64");
                        doc.pageMargins = [20, 60, 20, 30];
                        doc.defaultStyle.fontSize = 8;
                        doc.styles.tableHeader.fontSize = 7;
                        doc['header'] = (function () {
                            return {
                                columns: [
                                    { image: logo, width: 40 },
                                    {
                                        alignment: 'left',
                                        italics: true,
                                        text: getOrgName('@HCF.Web.Base.UserSession.CurrentOrg.Name'), @*text: '@HCF.Web.Base.UserSession.CurrentOrg.Name',*@
                                        fontSize: 14,
                                        margin: [0, 6, 0, 0],
                                        width: 200,
                                    },
                                    {
                                        alignment: 'middle',
                                        fontSize: 14,
                                        text: 'Document Type Report',
                                        margin: [0, 6, 0, 0]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        doc['footer'] = (function (page, pages) {
                            return {
                                columns: [
                                    {
                                        alignment: 'left',
                                        text: ['Created on: ', { text: jsDate.toString() }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated from: ', { text:  'CRx' }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated by: ', { text: '@HCF.Web.Base.UserSession.CurrentUser.Name'} ]
                                    },
                                    {
                                        alignment: 'right',
                                        text: [{ text: page.toString()},' of ',{ text: pages.toString()}]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return .5; };
                        objLayout['vLineWidth'] = function (i) { return .5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[0].layout = objLayout;
                    }
                },
                {
                    extend: 'excel',
                    title: ' Document Type Report',
                    messageBottom: function () {
                        return $("#dvgeneratedby").text();
                    },
                    exportOptions: {
                        columns: [0],
                        orthogonal: 'export'
                    }
                }
            ]

        });
        

    $('#DocCategory').on('change', function () {
        debugger
        var id = $(this).val();
        var text ="";
        if (id == "107") {
            text = "Report"
        } else if (id == "106") {
            text = "Policy"
        }
        if (text!="") {
            table.column(1).search("^" + text + "$", true, true, false).draw();
        } else {
            table.columns(1).search("").draw();
        }
    });
</script>
