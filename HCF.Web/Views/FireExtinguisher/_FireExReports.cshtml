@model List<HCF.BDO.TFloorAssets>
@using System.Text;
@{     
    string reportType = "";
    if (ViewBag.reportType != null)
    {
        reportType = ViewBag.reportType;
    }

    var rec = Model.Where(x => x.AssetSubCategory.AscName != null).GroupBy(y => y.AssetSubCategory.AscName, (key, g) => new { AscId = key, Count = g.Count(), Name = g.FirstOrDefault().AssetSubCategory.AscName });
    StringBuilder sb = new StringBuilder();
    sb.Append(string.Format("{0}: {1} {2}", "Total", Model.Count, string.Empty));
    sb.Append("".PadLeft(5, ' ').Replace(" ", "&nbsp;"));
    foreach (var item in rec.Where(x => x.Name != "").OrderBy(x => x.Name))
    {
        sb.Append(string.Format("{0}: {1} {2}", item.Name, item.Count, string.Empty));
        sb.Append("".PadLeft(5, ' ').Replace(" ", "&nbsp;"));
    }
    <table class="table" id="totalResult">
        <tr style="display:none">
            <td>Report Year: @ViewBag.Year &nbsp;&nbsp; Route : @ViewBag.RouteName</td>
           
        </tr>
        <tr>
            <td>@Html.Raw(sb.ToString())</td>
           
        </tr>
    </table>}
<table id="docsTable" class="table table-bordered table-striped" role="grid">
    <thead>
        <tr>
            <th>#</th>
            <th>Tag/BarCode</th>
            <th>Location</th>
            <th>Stop Code</th>
            <th>Route</th>
            <th>Type</th>
            @if (!string.IsNullOrEmpty(reportType)) 
            {
                @await Html.PartialAsync("_routeReportHeader", reportType)
            }

            <th style="display:none">Comment</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var tfloorAsset in Model.Select((value, index) => new { value, index }))
        {

        <tr>
            <td>@string.Format("{0}", tfloorAsset.index + 1)</td>
            <td>@tfloorAsset.value.SerialNo</td>
            <td>@tfloorAsset.value.Stop.StopName</td>
            <td>@tfloorAsset.value.Stop.StopCode</td>
            <td>
                @if (tfloorAsset.value.Routes.Count > 0)
                {
                    <span>@tfloorAsset.value.Routes.FirstOrDefault().RouteNo</span>
                }
            </td>
            <td>
                @if (tfloorAsset.value.AssetSubCategory.AscId > 0)
                {
                    <span>@tfloorAsset.value.AssetSubCategory.CustomAscName(tfloorAsset.value.FireExtinguisherType.FeType)</span>
                }
            </td>
            @*@await Html.PartialAsync("_routeReportData",
           tfloorAsset.value.TInspectionActivity,
           new ViewDataDictionary { { "Mode", reportType }, { "year", ViewBag.Year }, { "MonthNo", ViewBag.MonthNo } })*@

            @await Html.PartialAsync("_routeReportData", tfloorAsset.value.TInspectionActivity,
                           new ViewDataDictionary(
                           new Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider(),
                           new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary())
                           {{ "Mode", reportType }, { "year", ViewBag.Year }, { "MonthNo", ViewBag.MonthNo }}
                          )

            <td style="display:none">&nbsp;</td>
        </tr>
        }
    </tbody>
</table>
<div style="display:none">
    <span id="dvgeneratedby">
        @string.Format("{0} : {1} \n\n\n {2} : {3}", Localizer["PrintGeneratedFromTitle"], Localizer["PrintGeneratedFromText"], Localizer["PrintGeneratedByTitle"], HCF.Web.Base.UserSession.CurrentUser.Name)


    </span>
</div>
<script>


    var setDateFormat = function (date) {
        var newDate = date.toLocaleDateString("en-US", { month: 'short' })
            + " " + date.toLocaleDateString("en-US", { day: 'numeric' })
            + ", " + date.toLocaleDateString("en-US", { year: 'numeric' });
        return newDate;
    };

    var docsTable = $('#docsTable').dataTable({
        "searching": false,
        "ordering": false,
        "pageLength": 20,
        "lengthChange": false,
        "bPaginate": $('#docsTable tbody tr').length > 20,
        "bInfo": false,
        "aaSorting": [],
        "language": {
            "emptyTable": "No data available in table"
        },
        //dom: "<'row'<'col-sm-3'l><'col-sm-3'f><'col-sm-6'p>>" +
        //         "<'row'<'col-sm-12'<'table-responsive'tr>>>" +
        //        "<'row'<'col-sm-5 text-right'i>>" //+ "Blfrtip"

        dom: "<'row'<'col-sm-2'><'col-sm-2'><'col-sm-8 tableactions'flp <'toolbar'>>>" + "<'row'<'col-md-12'<'table-responsive'tr> > >" + "<'row'<'col-sm-12 text-right'p>>",
        @*buttons: [
                {
                    extend: 'pdfHtml5',
                    orientation: 'landscape',
                    //pageSize:'LEGAL',
                    messageTop: function () {
                        return $("#totalResult").text();
                    },
                    title: 'Route Based Inspection Reports',
                    exportOptions: {
                        //columns: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
                    },
                    messageBottom: function () {
                       // return $("#dvgeneratedby").text();
                    },
                    customize: function (doc) {
                        //genereateRpeort(doc)
                         //Remove the title created by datatTables
                        doc.content.splice(0, 1);
                        //Create a date string that we use in the footer. Format is dd-mm-yyyy
                        var now = new Date();
                        var jsDate = setDateFormat(now); //now.getDate() + '-' + (now.getMonth() + 1) + '-' + now.getFullYear();
                        // Logo converted to base64
                        //var logo = $("#logoimgbase64").val();
                        //debugger;
                        var logo = localStorage.getItem("logoimgbase64");//getBase64FromImageUrl();
                        doc.pageMargins = [20, 60, 20, 30];
                        doc.defaultStyle.fontSize = 8;
                        doc.styles.tableHeader.fontSize = 7;
                        doc['header'] = (function () {
                            return {
                                columns: [
                                    { image: logo, width: 40 },
                                    {
                                        alignment: 'left',
                                        italics: true,
                                        text: '@HCF.Web.Base.UserSession.CurrentOrg.Name',
                                        fontSize: 14,
                                        margin: [0, 6, 0, 0],
                                        width: 200
                                    },
                                    {
                                        alignment: 'middle',
                                        fontSize: 14,
                                        text: 'Reports',
                                        margin: [0, 6, 0, 0]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        // Create a footer object with 2 columns
                        // Left side: report creation date
                        // Right side: current page and total pages
                        doc['footer'] = (function (page, pages) {
                            return {
                                columns: [
                                    {
                                        alignment: 'left',
                                        text: ['Created on: ', { text: jsDate.toString() }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated from: ', { text:  'CRx' }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated by: ', { text: '@HCF.Web.Base.UserSession.CurrentUser.Name'} ]
                                    },
                                    {
                                        alignment: 'right',
                                        text: [{ text: page.toString()},' of ',{ text: pages.toString()}]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        // Change dataTable layout (Table styling)
                        // To use predefined layouts uncomment the line below and comment the custom lines below
                        // doc.content[0].layout = 'lightHorizontalLines'; // noBorders , headerLineOnly
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return .5; };
                        objLayout['vLineWidth'] = function (i) { return .5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[0].layout = objLayout;
                    }
                },
                {
                    extend: 'excel',
                    title: 'Reports',
                    messageTop: function () {
                        return $("#totalResult").text();
                    },
                    messageBottom: function () {
                        return $("#dvgeneratedby").text();
                    },
                    exportOptions: {
                        //columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,17,18],
                        orthogonal: 'export'
                    }
                }
            ]*@
    });

    $('.dt-button.buttons-pdf.buttons-html5').attr('title', 'Download PDF');
    $('.dt-button.buttons-excel.buttons-html5').attr('title', 'Download Excel');
</script>