@model string

<div class="row tablelist-topform">
    <div class="col-md-12">
        <div class="row">
            <div class="form-group col-md-2 col-sm-4">
                <label>Round Type</label>
                <input type="hidden" id="selectedid" name="selectedid" />
                @Html.DropDownList("RoundType", new SelectList(""), "All Types", new { @class = "form-control ddlbox", @multiple = "multiple", data_live_search = "true", data_selected_text_format = "count > 1" })
            </div>
            <div class="form-group col-md-2 col-sm-4">
                <label>Campus</label>
                <sitedropdownlist name="SiteCode" firsttext="All Campus" class="form-control"></sitedropdownlist>
            </div>
            <div class="form-group col-md-2 col-sm-4">
                <label>Building(s)</label>
                @Html.DropDownList("BuildingId", new SelectList(""), "All Building", new { @class = "form-control ddlbox", @multiple = "multiple", data_live_search = "true", data_selected_text_format = "count > 1" })
            </div>
            <div class="form-group col-md-4 col-left  col-sm-8">
                <div class="row">
                    <div class="col-md-6 col-sm-6 form-group">
                        <label>From</label>
                        <input type="text" id="from" class="form-control datepicker" readonly="readonly" />
                    </div>
                    <div class="col-md-6 col-sm-6 form-group">
                        <label>To</label>
                        <input type="text" id="todate" class="form-control datepicker" readonly="readonly" />
                    </div>
                </div>
            </div>
            <div class="form-group col-md-2 col-sm-4 float-right">
                <button class="comm-button" id="btnSearch" style="margin-top: 24px;">Search</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="trackingAssets-lenged">
            <ul class="legand" style="justify-content:flex-end;">
                <li><span class="processType-Sprite due-btn"></span>Due</li>
                <li><span class="processType-Sprite inProgress-btn"></span>In Progress</li>
                <li><span class="processType-Sprite notdone-btn"></span>Not Done</li>
                <li><span class="processType-Sprite deficiency-btn"></span>Deficiency</li>
                <li><span class="processType-Sprite completed-btn"></span> Completed</li>
            </ul>
        </div>
    </div>
    <div class="col-md-12">
        <div id="partialContents">
        </div>
    </div>
</div>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/buttons.html5.min.js"></script>

<style>

    select#roundType {
        cursor: pointer;
    }
    .roundtypeicon {
        display: flex;
        align-items: center;
        width: 100%;
    }
    .roundtypeicon img {
        width: 28px;
        margin-right: 10px;
    }
    .binder-tabBox .trackingAssets-lenged.float-right {
        margin: 35px -15px -90px 0;
    }
    .binder-tabBox div#roundTable_filter.dataTables_filter {
        margin: 0px 0 20px 0px;
    }
</style>
<script>
    $(document).ready(function () {
        getBuildings();
        SetDefaultDate();
        getRoundType();
        getRoundReportBinder(1);
    });
    $("#btnSearch").click(function () {
        $(".loadingModal").show();
        getRoundReportBinder(0);
    });
    function getRoundReportBinder(isatpageloaded) {


        var fromdt = $('#from').val();
            var todate = $('#todate').val();
            // var lstBuildingDetails = $("#lstBuildingDetails").val();
            var lstBuildingDetails = $("#BuildingId").val() != null ? $("#BuildingId").val() : 0;
            var roundType = $("#RoundType").val() != null ? $("#RoundType").val() : 0;
            if (isatpageloaded == 1) {
                //fromdt = '';
                //todate = '';
                roundType = 0;
                lstBuildingDetails = '';
                $(".loadingModal").show();
            }
            $.get(CRxUrls.Round_PartialRoundActivityReport + "?start=" + fromdt + "&enddate=" + todate + "&lstBuildingDetails=" + lstBuildingDetails + "&roundType=" + roundType, function (data) {
                //$(".loadingModal").show();
                $('#partialContents').empty();
                $('#partialContents').append(data);
                $('#partialContents').fadeIn('fast');
                $(".loadingModal").hide();
            });


        //if ('@Model' == "binder")
        //{
        //    var fromdt = $('#from').val();
        //    var todate = $('#todate').val();
        //    // var lstBuildingDetails = $("#lstBuildingDetails").val();
        //    var lstBuildingDetails = $("#BuildingId").val() != null ? $("#BuildingId").val() : 0;
        //    var roundType = $("#RoundType").val() != null ? $("#RoundType").val() : 0;
        //    if (isatpageloaded == 1) {
        //        fromdt = '';
        //        todate = '';
        //        roundType = 0;
        //        lstBuildingDetails = ''; 
        //    }
        //    $.get(CRxUrls.Round_PartialRoundReportBinder + "?start=" + fromdt + "&enddate=" + todate + "&lstBuildingDetails=" + lstBuildingDetails + "&roundType=" + roundType, function (data) {
        //        $('#partialContents').empty();
        //        $('#partialContents').append(data);
        //        $('#partialContents').fadeIn('fast');
        //        $(".loadingModal").hide();
        //    }); }
        //if ('@Model' == "activity")
        //{
        //    var fromdt = $('#from').val();
        //    var todate = $('#todate').val();
        //    // var lstBuildingDetails = $("#lstBuildingDetails").val();
        //    var lstBuildingDetails = $("#BuildingId").val() != null ? $("#BuildingId").val() : 0;
        //    var roundType = $("#RoundType").val() != null ? $("#RoundType").val() : 0;
        //    if (isatpageloaded == 1) {
        //        //fromdt = '';
        //        //todate = '';
        //        roundType = 0;
        //        lstBuildingDetails = '';
        //        $(".loadingModal").show();
        //    }
        //    $.get(CRxUrls.Round_PartialRoundActivityReport + "?start=" + fromdt + "&enddate=" + todate + "&lstBuildingDetails=" + lstBuildingDetails + "&roundType=" + roundType, function (data) {
        //        //$(".loadingModal").show();
        //        $('#partialContents').empty();
        //        $('#partialContents').append(data);
        //        $('#partialContents').fadeIn('fast');
        //        $(".loadingModal").hide();
        //    });
        //}
    }
    var buildingIndex = 0;
    $(document).on("change", "#BuildingId", function () {
        debugger
        var thisObj = $(this);
        var isAllSelected = thisObj.find('option[value="-1"]').prop('selected');
        if (buildingIndex == 0) {
            var lastAllSelected = false;
            buildingIndex++;
        }
        else {
            var lastAllSelected = $(this).data('all');
        }
        var selectedOptions = (thisObj.val()) ? thisObj.val() : [];
        var allOptionsLength = thisObj.find('option[value!="-1"]').length;
        var selectedOptionsLength = selectedOptions.length;

        if (isAllSelected == lastAllSelected) {

            if ($.inArray("-1", selectedOptions) >= 0) {
                selectedOptionsLength -= 1;
            }
            if (allOptionsLength <= selectedOptionsLength) {

                thisObj.find('option[value="-1"]').prop('selected', true).parent().selectpicker('refresh');
                isAllSelected = true;
            } else {
                thisObj.find('option[value="-1"]').prop('selected', false).parent().selectpicker('refresh');
                isAllSelected = false;
            }
        } else {
            thisObj.find('option').prop('selected', isAllSelected).parent().selectpicker('refresh');
        }
        $(this).data('all', isAllSelected);
    });

    $(document).on("change", "#RoundType", function () {
        //debugger
        var thisObj = $(this);
        var isAllSelected = thisObj.find('option[value="-1"]').prop('selected');
        if (buildingIndex == 0) {
            var lastAllSelected = false;
            buildingIndex++;
        }
        else {
            var lastAllSelected = $(this).data('all');
        }
        var selectedOptions = (thisObj.val()) ? thisObj.val() : [];
        var allOptionsLength = thisObj.find('option[value!="-1"]').length;
        var selectedOptionsLength = selectedOptions.length;
        if (isAllSelected == lastAllSelected) {

            if ($.inArray("-1", selectedOptions) >= 0) {
                selectedOptionsLength -= 1;
            }
            if (allOptionsLength <= selectedOptionsLength) {
                thisObj.find('option[value="-1"]').prop('selected', true).parent().selectpicker('refresh');
                isAllSelected = true;
            } else {
                thisObj.find('option[value="-1"]').prop('selected', false).parent().selectpicker('refresh');
                isAllSelected = false;
            }
        } else {
            thisObj.find('option').prop('selected', isAllSelected).parent().selectpicker('refresh');
        }
        $(this).data('all', isAllSelected);
    });
    function SetDefaultDate() {
        if ('@Model' == "binder")
        {
            var currentTime = new Date();
            //var startDate = new Date(currentTime.getFullYear() - 1, 0, 1);
            var startDate = new Date();
            startDate.setMonth(startDate.getMonth() - 3);
            var dateFormat = $.CRx_DateFormat,
                from = $("#from")
                    .datepicker({
                        //defaultDate: "+1w",
                        beforeShow: changeYearButtons,
                        onChangeMonthYear: changeYearButtons,
                        buttonImage: ImgUrls.datepicker_calendar,
                        dateFormat: dateFormat,
                        buttonImageOnly: true
                    }).datepicker('setDate', startDate)
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#todate").datepicker({
                    //defaultDate: "+1w",
                    beforeShow: changeYearButtons,
                    onChangeMonthYear: changeYearButtons,
                    buttonImage: ImgUrls.datepicker_calendar,
                    dateFormat: dateFormat,
                    buttonImageOnly: true
                }).datepicker('setDate', 'today')
                    .on("change", function ()
                    {
                        from.datepicker("option", "maxDate", getDate(this));
                    });
        }
        if ('@Model' == "activity")
        {
            var currentTime = new Date();
            //var startDate = new Date(currentTime.getFullYear() - 1, 0, 1);
            var startDate = new Date();
            var endDate = new Date();
            startDate.setMonth(startDate.getMonth() - 2);
            endDate.setMonth(endDate.getMonth() +1);
            var dateFormat = $.CRx_DateFormat,
                from = $("#from")
                    .datepicker({
                        //defaultDate: "+1w",
                        beforeShow: changeYearButtons,
                        onChangeMonthYear: changeYearButtons,
                        buttonImage: ImgUrls.datepicker_calendar,
                        dateFormat: dateFormat,
                        buttonImageOnly: true
                    }).datepicker('setDate', startDate)
                    .on("change", function () {
                        to.datepicker("option", "minDate", getDate(this));
                    }),
                to = $("#todate").datepicker({
                    //defaultDate: "+1w",
                    beforeShow: changeYearButtons,
                    onChangeMonthYear: changeYearButtons,
                    buttonImage: ImgUrls.datepicker_calendar,
                    dateFormat: dateFormat,
                    buttonImageOnly: true
                }).datepicker('setDate', endDate)
                    .on("change", function ()
                    {
                        from.datepicker("option", "maxDate", getDate(this));
                    });
        }
    }
    function getDate(element) {
        var date;
        try {
            date = $.datepicker.parseDate(dateFormat, element.value);
        } catch (error) {
            date = null;
        }
        return date;

    }
    $("#SiteCode").change(function () {
        getBuildings();
    });
    function getRoundType() {
        var typeid = 0;
        $("#RoundType").empty();
        $("#RoundType").append(
            $('<option typeid =' + typeid + '></option>').val("-1").html("All"));
        var floorOptions = {};
        floorOptions.url = '@Url.Action("GetRoundType", "Round", new { area = "" })';//"/Organization/GetFloorByBuilding";
        floorOptions.type = "POST";
        floorOptions.datatype = "json";
        floorOptions.success = function (roundlst) {
            console.log(roundlst);
            // debugger;
            for (var i = 0; i < roundlst.length; i++) {
                $("#RoundType").append(
                    $('<option></option>').val(roundlst[i].RoundCatId).html(roundlst[i].CategoryName).attr("typeId", roundlst[i].RoundCatId));
            }
            $('#RoundType').selectpicker('refresh');
            //$('#BuildingId option[buildtypeid!="' + buildtypeId + '"]').remove();
            $("#RoundType").trigger("change");
        };

        floorOptions.error = function () { AlertWarningMsg("Error in Getting Round Type!!", ""); };
        $.ajax(floorOptions);
    }
    function getBuildings() {
        var buildtypeId = 0;
        $("#BuildingId").empty();
        $("#BuildingId").append(
            $('<option buildtypeid =' + buildtypeId + '></option>').val("-1").html("All"));
        var floorOptions = {};
        floorOptions.url = '@Url.Action("GetBuildingBySite", "Organization", new { area = "" })';//"/Organization/GetFloorByBuilding";
        floorOptions.type = "POST";
        floorOptions.data = { sitecode: $("#SiteCode").val() };
        floorOptions.datatype = "json";
        /* floorOptions.contentType = "application/json";*/
        floorOptions.success = function (buildlst) {
            console.log(buildlst);
            //debugger;
            for (var i = 0; i < buildlst.length; i++) {
                $("#BuildingId").append(
                    $('<option></option>').val(buildlst[i].BuildingId).html(buildlst[i].BuildingName).attr("buildtypeId", buildlst[i].BuildingTypeId));
            }
            $('#BuildingId').selectpicker('refresh');
            //$('#BuildingId option[buildtypeid!="' + buildtypeId + '"]').remove();
            $("#BuildingId").trigger("change");
        };

        floorOptions.error = function () { AlertWarningMsg("Error in Getting Buildings!!", ""); };
        $.ajax(floorOptions);
    }
</script>