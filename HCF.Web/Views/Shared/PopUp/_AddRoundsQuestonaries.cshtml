@model HCF.BDO.RoundsQuestionnaires

@using (Html.BeginForm("AddRoundsQuestonaries", "Round", FormMethod.Post, new { id = "addroundquestonariesform" }))
{
    <div class="modal-header">
        <h4 class="modal-title">
            @((Model.RouQuesId > 0) ? "Update " : "Add ") Round Questionnaire
            <button type="button" class="close" data-dismiss="modal">&times;</button>
        </h4>
    </div>
    <div class="modal-body" style="overflow: auto;">
        <div class="col-md-5">
            <div class="row">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <input type="hidden" name="IsCommonRoundQues" id="IsCommonRoundQues" />
                @Html.HiddenFor(x=>x.IsOneTimeStep)

                <div class="col-md-12 form-group">
                    <label>Round Category <em class="required-field"> *</em></label>
                    @Html.DropDownListFor(m => m.RoundCatId, new SelectList(ViewBag.RoundCategories, "RoundCatId", "CategoryName", Model.RoundCatId),
                "Select Category", new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.RoundCatId)
                </div>

                <div class="col-md-12 form-group">
                    <label>Risk Type <em class="required-field"> *</em></label>
                    <riskrypedropdown name="RiskType"
                                  selectedvalue="@Model.RiskType"
                                  class="form-control ddlbox"
                                  required="required">
                    </riskrypedropdown>
                </div>
                <div class="col-md-12 form-group">
                    <label>Short Description <em class="required-field"> </em></label>
                    @Html.TextBoxFor(model => model.ShortDescription, new { @class = "form-control", @maxlength = "25" })
                </div>
                <div class="col-md-12 form-group">
                    <label>Round Questionnaire</label>
                    @Html.HiddenFor(model => model.RouQuesId)<em class="required-field">* </em>
                    @Html.TextBoxFor(model => model.RoundStep, null, new { @class = "form-control", required = "required", oninput = "validate(this)" })

                </div>
                <div class="col-md-12 form-group">
                    <label>Risk Step Code <em class="required-field"> </em></label>
                    @Html.TextBoxFor(model => model.RiskStepCode, new { @class = "form-control", @maxlength = "6" })
                </div>
                <div class="col-md-12 form-group">
                    <label>Additional Round Type <em class="required-field"> *</em></label>
                    <select id="AdditionalRoundType" name="AdditionalRoundType" class="form-control">
                        <option>All</option>
                        <option value="1">Individual</option>
                        <option value="2">Management </option>
                    </select>
                </div>

                <div class="col-md-12 form-group comman_checkbox">
                    @Html.CheckBoxFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive)
                    <label>Active</label>
                </div>

                <div class="col-md-12 text-right button_Div">
                    <button type="submit" class="comm-button" title="Save" id="btn_submit">
                        Save
                    </button>
                    <button type="button" class="comm-Cancelbutton" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="row">
                <div class="col-md-12">
                    <div class="matrix-col21 saferMatrixbox">
                        <div class="table-responsive">
                            <table border="0" cellspacing="0" cellpadding="0" id="saferMatrixRounds">
                                @await Component.InvokeAsync("RoundSaferMatrixRounds")
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    var roundCatId = '@Model.RoundCatId';
    var rouQuesId = '@Model.RouQuesId';

    var roundCat = '@ViewBag.RoundCatId'
    $(document).ready(function () {
        $("#AdditionalRoundType").val(@Model.AdditionalRoundType);
        if (roundCat != '') {
            $("#RoundCatId").val(roundCat);
        }
    });


    if (roundCatId > 0) {
        $("#RoundCatId").val(roundCatId);
    }
    $("#RiskStepCode").keydown(function (event) {
        if (event.keyCode == 32) {
            event.preventDefault();
        }
    });

    @if (Model.RouQuesId > 0)
    {
        @:$("#RoundCatId").addClass("disabled");
    }

        function validate(input) {
            if (/^\s/.test(input.value))
            input.value = '';
    }
</script>
