@model HCF.BDO.EPDetails
@{
    var epdocument = Model.EPsDocument; //InspectionRepository.GetEpsDocument(Model.EPDetailId);
    var epdocuments = Model.InspectionEPDocs; //Transaction.GetInspectionDocs(Model.Inspection.InspectionId).ToList();
}
@if (Model.EPDetailId > 0)
{
    <div class="ep_heading">
        @Model.Standard.TJCStandard,@Model.EPNumber

        @if (Model.TInspectionActivity.Any(y => y.ActivityType == 2))
        {
            @*<img src="@Url.Content("~/dist/Images/Icons/attach_button.png")"
                onclick="location.href ='@Url.Action("DocumentAssets", "Assets", new { epId = Model.EPDetailId, inspectionId = 0 })'"
                class="assetAttachIcon float-right" title="Attach Document" alt="" />*@
        }
    </div>
    if (Model.DocumentType != null && Model.DocumentType.Count > 0)
    {
        <div class="ep_heading">
            <ul class="eplistBox">
                @foreach (var documentType in Model.DocumentType)
                {
                    <li class="nosearch">
                        <span class="eplistMenu">@documentType.Name</span>
                        <span class="ep-headingSearch">
                            <input type="text" class="form-control docsearch" id="searchTextDoc" placeholder="Search by Document" autocomplete="off">
                            <i class="fa fa-search" id="epsearchbtndoc" aria-hidden="true"></i>
                        </span>

                    </li>
                }
            </ul>
        </div>
    }

    <div class="document-sublist">
        <ul class="ulassets" id="tree3">
            @if (ViewBag.IshowDoc == 1 && (Model.Inspection.Status == 2 || Model.Inspection.SubStatus == "IN"))
            {
                <div class="crx-scrollBar inspection-reportsBox">
                    <ul class="ulassets" id="tree3">
                        @foreach (var files in epdocuments.Where(x => x.IsDeleted == false))
                        {
                            <li style="overflow:hidden;padding-bottom: 15px;" activityId="@files.ActivityId" class="docsearch">
                                <a href='@(files.UploadDocTypeId != 109? Url.Action("DocActivityHistory", "assets", new { activityId = files.ActivityId }) : commonModelFactory.FilePath(files.Path))'>
                                    <img src="@commonModelFactory.UploadDocTypeImagePath(files.UploadDocTypeId,files.DocTypeId)" alt="" />
                                    <div class="divleft">
                                        <h5>
                                            <span class="doc-fileurl" title="@files.DocumentName">@files.DocumentName</span>
                                            <span class="doc-fileName">@(files.DocumentType.Name ?? "NA")</span>
                                            @if (files.IsRequiredDoc)
                                            {
                                                <span>
                                                    <strong>Review Date: </strong> @(files.DtEffectiveDate != null ? files.DtEffectiveDate.Value.ToFormatDate() : files.CreatedDate.ToFormatDate())
                                                </span>
                                            }
                                            else
                                            {
                                                <span>
                                                    <strong>@(!string.IsNullOrEmpty(files.UserProfile.FullName.Trim()) ? "Uploaded" : "Generated") Date : </strong> @files.CreatedDate.ToFormatDate()
                                                </span>
                                            }
                                        </h5>
                                        <h4 class="file-uploadby">
                                            @if (!string.IsNullOrEmpty(files.UserProfile.FullName.Trim()))
                                            {
                                                <span>Uploaded By: </span>@files.UserProfile.FullName
                                            }
                                            else
                                            {
                                                <span>Generated By: CRx </span>
                                            }
                                        </h4>

                                    </div>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }
            @if (ViewBag.IshowDoc == 0)
            {
                <div class="crx-scrollBar inspection-reportsBox">
                    <ul class="ulassets" id="tree3">
                        @foreach (var files in epdocument.Where(x => x.IsDeleted == false))
                        {
                            <li style="overflow:hidden;padding-bottom: 15px;" activityId="@files.ActivityId" class="docsearch">
                                <a href='@(files.UploadDocTypeId != 109? Url.Action("DocActivityHistory", "assets", new { activityId = files.ActivityId }) : commonModelFactory.FilePath(files.Path))'>
                                    <img src="@commonModelFactory.UploadDocTypeImagePath(files.UploadDocTypeId,files.DocTypeId)" alt="" />
                                    <div class="divleft">
                                        <h5>
                                            <span class="doc-fileurl" title="@files.FileName">@files.FileName</span>
                                            <span class="doc-fileName">@(files.Name ?? "NA")</span>
                                            @if (files.IsRequiredDoc)
                                            {
                                                <span>
                                                    <strong>Review Date: </strong> @(files.DtEffectiveDate != null ? files.DtEffectiveDate.Value.ToFormatDate() : files.CreatedDate.ToFormatDate())
                                                </span>
                                            }
                                            else
                                            {
                                                <span>
                                                    <strong>@(!string.IsNullOrEmpty(files.FullName.Trim()) ? "Uploaded" : "Generated") Date : </strong> @files.CreatedDate.ToFormatDate()
                                                </span>
                                            }
                                        </h5>
                                        <h4 class="file-uploadby">
                                            @if (!string.IsNullOrEmpty(files.FullName.Trim()))
                                            {
                                                <span>Uploaded By: </span>@files.FullName
                                            }
                                            else
                                            {
                                                <span>Generated By: CRx </span>
                                            }
                                        </h4>

                                    </div>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }


            @if (Model.Assets != null && Model.Assets.Count > 0)
            {
                <div class="ep_heading">
                    <ul>
                        @foreach (var assets in Model.Assets)
                        {
                            <li class="nosearch assetsearch">
                                <span class="eplistMenu">@assets.Name</span>
                                <input type="text" hidden id="AssetId" value="@assets.AssetId" />
                                <span class="ep-headingSearch">
                                    <input type="text" class="form-control assetsearch" id="searchText" placeholder="Search by Asset #" autocomplete="off">
                                    <i class="fa fa-search" id="epsearchbtn" aria-hidden="true"></i>
                                </span>
                            </li>
                        }
                    </ul>
                </div>
            }

            @if (Model.TInspectionActivity != null && Model.TInspectionActivity.Count > 0)
            {

                var floors = (from p in Model.TInspectionActivity.Where(x => x.ActivityType == 2)
                              select new
                              {
                                  floorId = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.FloorId : 0,
                                  floorName = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.FloorName : "",
                                  buildingName = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.Building.BuildingName : "",
                                  buildingId = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.Building.BuildingId : 0,
                                  floorAssetId = p.TFloorAssets.FloorAssetsId,
                                  inspectionGroupId = p.TFloorAssets.InspectionGroupId,
                                  deviceNo = p.TFloorAssets.DeviceNo,
                                  serailno = p.TFloorAssets.SerialNo,
                                  isrouteinsp = p.TFloorAssets.IsRouteInsp,
                                  status = p.Status,
                                  assetNo = p.TFloorAssets.AssetNo,
                                  date = p.DueDate,
                                  name = p.TFloorAssets.Name,
                                  subStatus = p.SubStatus,
                                  ActivityId = p.ActivityId,
                                  siteName = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.Building.SiteName : "",
                                  siteCode = (p.TFloorAssets.FloorId.HasValue) ? p.TFloorAssets.Floor.Building.SiteCode : ""
                              }).ToList().OrderBy(x => x.buildingName);

                var campus = from c in floors
                             group c by new
                             {
                                 c.siteCode,
                                 c.siteName
                             }
                                           into gcs
                             select new
                             {
                                 siteCode = gcs.Key.siteCode,
                                 siteName = gcs.Key.siteName,
                                 floor = gcs.ToList(),
                             };


                var consolidatedChildren = from c in floors
                                           group c by new
                                           {
                                               c.buildingId,
                                               c.buildingName,
                                               c.siteCode
                                           }
                                       into gcs
                                           select new
                                           {
                                               buildingId = gcs.Key.buildingId,
                                               buildingName = gcs.Key.buildingName,
                                               sitecode = gcs.Key.siteCode,
                                               floor = gcs.ToList(),
                                           };


                foreach (var sites in campus.OrderBy(x => x.siteName))
                {
                    <h4 class="assets-sitename" id="@($"sites{sites.siteCode.Replace("@","_")}")">@sites.siteName</h4>
                    foreach (var buildings in consolidatedChildren.Where(x => x.sitecode == sites.siteCode).OrderBy(x => x.buildingName))
                    {
                        <li id="@($"buildingId{buildings.buildingId}")" class="buiildingLi" sitecode="@buildings.sitecode.Replace("@","_")">

                            @if (buildings.buildingId > 0)
                            {
                                <h4 class="titleBuilding">
                                    @buildings.buildingName
                                </h4>
                            }
                            else
                            {
                                <h4 class="titleBuilding">
                                    Assets Without Floor
                                </h4>
                            }

                            <ul class="inner-level-sidebar">
                                @foreach (var floor in buildings.floor.Select(m => new { m.floorId, m.floorName }).Distinct())
                                {
                                    <li id="@($"floor{floor.floorId}")" class="floorLi">
                                        <h4 class="titleFloor">@($"{(!string.IsNullOrEmpty(floor.floorName) ? floor.floorName : "Assets")}")</h4>

                                        <ul class="list-boxul">
                                            <div class="crx-scrollBar">
                                                @foreach (var floorAssets in floors.Where(m => m.floorId == floor.floorId && m.buildingId == buildings.buildingId).Distinct())
                                                {
                                                <li class="assetLi" status="@commonModelFactory.GetInspectionStatus(floorAssets.subStatus)">
                                                    <div ondragstart="dragStart(event,2);"
                                                         draggable="true"
                                                         class="status-cont-box asset_list @(ViewBag.FloorAssetId == floorAssets.floorAssetId && Convert.ToInt32(floorAssets.inspectionGroupId) > 0 ? " active" : Convert.ToInt32(floorAssets.inspectionGroupId) > 0 ? "" : "asset_list_disable")"
                                                         id="@floorAssets.floorAssetId"
                                                         inspectiongroupid="@floorAssets.inspectionGroupId">
                                                        <div class="left-statub">
                                                            @if (floorAssets.date.HasValue && DateTime.Now > floorAssets.date)
                                                            {
                                                                <div class="processType-Sprite @commonModelFactory.GetInspectionStatus("PD")"></div>
                                                            }
                                                            else
                                                            {
                                                                <div class="processType-Sprite @commonModelFactory.GetInspectionStatus(floorAssets.subStatus)"></div>
                                                            }

                                                        </div>
                                                        <div class="left-cont-list">
                                                            <div class="asset-list-head"
                                                                 title="@Localizer["AssetNo"]"
                                                                 substatus="@floorAssets.subStatus">
                                                                @(!string.IsNullOrEmpty(floorAssets.name) ? Html.Encode(floorAssets.name) + " ," : "")
                                                                @*@Html.Encode(floorAssets.name)&nbsp;,*@
                                                                @if (ViewBag.PageMode == "assetEps")
                                                                {
                                                                    var ismulipleEp = ViewBag.ismultipleEP;
                                                                    //var epDetailId = Model.EPDetailId;

                                                                    <a draggable="false" href='@Url.RouteUrl("asseteps", new { floorassetId = floorAssets.floorAssetId, epId = Model.EPDetailId, ismultipleEP = ismulipleEp })'>
                                                                        <span draggable="false">@(floorAssets.isrouteinsp ? Html.Encode(floorAssets.serailno) : Html.Encode(floorAssets.assetNo)) </span>
                                                                    </a>
                                                                }
                                                                else if (ViewBag.PageMode == "history")
                                                                {
                                                                    <a href='@Url.Action("ActivityHistory", "Assets", new { activityId = floorAssets.ActivityId })'>
                                                                        <span>@(floorAssets.isrouteinsp ? Html.Encode(floorAssets.serailno) : Html.Encode(floorAssets.assetNo)) </span>
                                                                        @*<span>@Html.Encode(floorAssets.assetNo)</span>*@
                                                                    </a>
                                                                }
                                                                else if (ViewBag.PageMode == "assetshistory")
                                                                {
                                                                    <a href='@Url.Action("history", "Assets", new { floorassetId = floorAssets.floorAssetId, epId = Model.EPDetailId })'>
                                                                        <span>@(floorAssets.isrouteinsp ? Html.Encode(floorAssets.serailno) : Html.Encode(floorAssets.assetNo)) </span>
                                                                        @*<span>@Html.Encode(floorAssets.assetNo)</span>*@
                                                                    </a>

                                                                }
                                                            </div>
                                                            <div class="dateDiv" title="Next Due Date">
                                                                @if (floorAssets.date.HasValue && floorAssets.status == 1)
                                                                {
                                                                    @floorAssets.date.Value.ToClientTime().ToFormatDate()
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                        </div>
                        </ul>

                        </li>
                    }
                                </ul>
                                </li>
                            }
                        }
                    }
            </ul>
            </div>
            @*<div class="assetLegends hide" id="assetLegends">
                <div class="assets-btnicons">
                    <div class="legdev">
                        <label class="status_pastdue" title="Non-Compliant"></label>
                        <span>Non-Compliant</span>
                    </div>
                    <div class="legdev">
                        <label class="status_pass" title="Compliant"></label>
                        <span>Compliant</span>
                    </div>
                    <div class="legdev">
                        <label class="status_grace_period" title="Due"></label>
                        <span>Due</span>
                    </div>
                    <div class="legdev">
                        <label class="status_inprogress" title="In-progress"></label>
                        <span> @Localizer["InProgress"] </span>
                    </div>
                </div>
            </div>*@
            <div class="assetLegends hide" id="assetLegends">
                <div class="assets-btnicons trackingAssets-lenged">
                    <ul class="legand">
                        <li class="legdev">
                            <strong class="processType-Sprite status_pastdue" title="Non-Compliant"></strong>
                            <span>Non-Compliant</span>
                        </li>
                        <li class="legdev">
                            <strong class="processType-Sprite status_pass" title="Compliant"></strong>
                            <span>Compliant</span>
                        </li>
                        <li class="legdev">
                            <strong class="processType-Sprite status_grace_period" title="Due"></strong>
                            <span>Past Due</span>
                        </li>
                        <li class="legdev">
                            <strong class="processType-Sprite status_inprogress" title="In-progress"></strong>
                            <span>@Localizer["InProgress"]</span>
                        </li>
                    </ul>
                </div>

            </div>
        }

<style>
    .crx-scrollBar {
        overflow: auto;
    }

    /*.status_grace_in_days_sysadmin {
        background: yellow;
        width: 14px;
        height: 14px !important;
        margin-bottom: -4px;
        margin-left: 5px;
        border-radius: 50%;
    }*/

    .document-sublist i.indicator {
        color: #333;
        padding: 11px 0 13px 4px;
    }

    .document-sublist .inner-level-sidebar i.indicator {
        color: #6b6b6b;
        padding: 8px 0 8px 4px;
        font-size: 12px;
    }


    .file-uploadby {
        font-size: 12px !important;
        color: #333;
        font-weight: bold !important;
        background-color: #f1f1f1;
        display: block;
        padding: 4px 4px 2px 2px;
        border-top: 1px solid #ccc;
        margin-top: 6px !important;
    }

    .document-sublist .list-boxul {
        padding-bottom: 12px;
    }

    .document-sublist {
        overflow: hidden;
    }

        .document-sublist .titleBuilding {
            background: #e1e1e1;
            text-transform: capitalize;
            font-weight: 700;
            font-size: 14px;
            color: #333;
            padding: 10px 8px;
            border: 1px solid #ccc;
            margin: 4px 0;
        }

    .asset-list-head {
        font-size: 13px;
        color: #333;
        font-weight: 500;
        text-transform: capitalize;
    }

        .asset-list-head a {
            color: #3c8dbc;
            text-decoration: none;
            font-size: 13px;
            font-weight: 500;
            border-bottom: 1px solid #ececec;
        }


   

    .assetLegends {
        display: block;
        overflow: hidden;
        clear: both;
        padding: 6px 0;
    }

        .assetLegends label {
            height: 15px;
        }

  

   

    ul.ulassets h4 {
        cursor: pointer;
    }


    .ulassets li {
        clear: both;
        width: 100%;
    }

    .indicator {
        float: left;
    }

    .tree, .tree ul {
        margin: 0;
        padding: 0;
        list-style: none
    }

        .tree ul {
            /*margin-left: 1em;*/
            position: relative
        }

            .tree ul:before {
                /*content: "";*/
                display: block;
                width: 0;
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                border-left: 1px solid
            }

        .tree li {
            margin: 0;
            /*padding: 0 1em;*/
            line-height: 2em;
            font-weight: 700;
            position: relative
        }

        .tree ul li:before {
            /*content: "";*/
            display: block;
            width: 10px;
            height: 0;
            border-top: 1px solid;
            margin-top: -1px;
            position: absolute;
            top: 1em;
            left: 0
        }

        .tree ul li:last-child:before {
            background: #fff;
            height: auto;
            top: 1em;
            bottom: 0
        }

    .indicator {
        margin-right: 5px;
    }

    .tree li a {
        text-decoration: none;
        color: #369;
    }

    .tree li button, .tree li button:active, .tree li button:focus {
        text-decoration: none;
        color: #369;
        border: none;
        background: transparent;
        margin: 0px 0px 0px 0px;
        padding: 0px 0px 0px 0px;
        outline: 0;
    }

    ul.inner-level-sidebar {
        padding-left: 18px;
    }
</style>
<script>
    $(document).ready(function () {
        var flip = 0;
        // debugger
        $("#epsearchbtn").click(function () {
            $(".ep-headingSearch .assetsearch").toggle(flip++ % 2 === 0);
        });

        $("#epsearchbtndoc").click(function () {
            $(".ep-headingSearch  .docsearch").toggle(flip++ % 2 === 0);
        });
    });




    $(".legdev").click(function () {
        debugger;
        if ($(this).hasClass("activelegend")) {
            $(this).removeClass("activelegend");
            $(this).find("span").hide();
            $("li.buiildingLi").removeClass("hide")
            $("li.floorLi").removeClass("hide");
            $("li.assetLi").removeClass("hide");
            $(".assets-sitename").removeClass("hide");
        } else {
            $(".legdev span").hide();
            $(this).find("span").show();
            $(".legdev").removeClass("activelegend");
            $(this).addClass("activelegend");
            var status = $(this).find("label").attr("class");

            $("li.buiildingLi").addClass("hide");
            $("li.floorLi").addClass("hide");
            $("li.assetLi").addClass("hide");
            $(".assets-sitename").addClass("hide");
            $("li.buiildingLi").each(function (index) {
                // debugger;
                var currentBuilding = $(this);
                currentBuilding.find("li.floorLi").each(function () {
                    var currentFloor = $(this);
                    var count = $(this).find("li.assetLi[status=" + status + "]").length;
                    if (count > 0) {
                        currentFloor.removeClass("hide");
                    }
                    currentFloor.find("li.assetLi[status=" + status + "]").removeClass("hide");
                });
                var countFloor = $(this).find("li.floorLi").length;
                var countFloorHide = $(this).find("li.floorLi.hide").length;
                if (countFloor != countFloorHide) {
                    debugger;
                    currentBuilding.removeClass("hide");
                    var sitecode = currentBuilding.attr('sitecode');
                    $("#sites" + sitecode).removeClass("hide");
                }
            });

            if ($("li.buiildingLi.hide").length == $("li.buiildingLi").length) {
                swalalert("No assets found");
            }
        }

    });


    var activeFloorId = '@ViewBag.FloorId';
    var activebuildingId = '@ViewBag.BuildingID';

    $.fn.extend({
        treed: function (o) {

            var openedClass = 'fa-minus';
            var closedClass = 'fa-plus';

            if (typeof o != 'undefined') {
                if (typeof o.openedClass != 'undefined') {
                    openedClass = o.openedClass;
                }
                if (typeof o.closedClass != 'undefined') {
                    closedClass = o.closedClass;
                }
            };

            var tree = $(this);
            tree.addClass("tree");
            tree.find('li').has("ul").each(function () {
                var branch = $(this);
                if ("floor" + activeFloorId == $(this).attr("id")) {
                    $(this).addClass("activetree");                 }
                if ("buildingId" + activebuildingId == $(this).attr("id")) {
                    $(this).addClass("activetree");
                }
                branch.prepend("<i class='indicator fa " + closedClass + "'></i>");
                branch.addClass('branch');
                branch.on('click', function (e) {
                    if (this == e.target) {
                        var icon = $(this).children('i:first');
                        icon.toggleClass(openedClass + " " + closedClass);
                        $(this).children().children().toggle();
                    }
                })
                branch.children().children().toggle();
            });

            //$(".activetree").children("ul").children("li").toggle();
            $(".activetree").children('i:first').toggleClass(openedClass + " " + closedClass);;


            $(".activetree").each(function () {
                $(this).children('i:first').toggleClass(openedClass + " " + closedClass);;
            });

            tree.find('.branch .indicator').each(function () {
                $(this).on('click', function () {
                    $(this).closest('li').click();
                });
            });

            tree.find('.branch>h4').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });

            tree.find('.branch>button').each(function () {
                $(this).on('click', function (e) {
                    $(this).closest('li').click();
                    e.preventDefault();
                });
            });
        }
    });
    $('#tree3').treed({
            openedClass: 'fa-chevron-down',
            closedClass: 'fa-chevron-right'
    });

    $('#searchText').bind('keyup', function () {
        var searchString = $(this).val();
        $("ul.ulassets li").not(".docsearch").each(function (index, value) {
            currentName = $(value).text()
            if (currentName.toUpperCase().indexOf(searchString.toUpperCase()) > -1) {
                $(value).show();
                if (searchString.length > 0) {
                    $(this).closest('li').click();
                }
            } else {
                $(value).hide();
            }
        });
        $(".nosearch").show();
    });


    $('#searchTextDoc').bind('keyup', function () {
        var searchString = $(this).val();
        $("div.inspection-reportsBox ul.ulassets li.docsearch").each(function (index, value) {
            currentName = $(value).text()
            if (currentName.toUpperCase().indexOf(searchString.toUpperCase()) > -1) {
                $(value).show();
                if (searchString.length > 0) {
                    $(this).closest('li').click();
                }
            } else {
                $(value).hide();
            }
        });
        $(".nosearch").show();
    });


    $(document).ready(function () {
        @if (Model.TInspectionActivity != null && Model.TInspectionActivity.Any(x => x.ActivityType==(int)HCF.BDO.Enums.Mode.ASSET)) {
            @:$("#assetLegends").removeClass('hide');
        }
        else
        {
            @:$("#assetLegends").remove();
        }
    });
</script>