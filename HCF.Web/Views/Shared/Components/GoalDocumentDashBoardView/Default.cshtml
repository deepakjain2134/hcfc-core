@model IEnumerable<HCF.BDO.DocumentType>
<table id="documentep" class="table table-bordered table-striped no-footer">
    <thead>
        <tr>
            <th style="display:none"></th>
            <th style="display:none"></th>
            <th>Document</th>
            <th>Standard,EP</th>
            <th>Last Review</th>
            <th>Next Review</th>
            <th>Responsible Party</th>
            <th>Action</th>
            <th>History</th>
            <th style="display:none">Update </th>
            <th style="display:none;">Users</th>
            <th style="display:none;">StandardEP</th>
            <th style="display:none">Search Text</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Where(x => x.EPDocument.Any()).OrderBy(x => x.Name))
        {
            var users = commonModelFactory.RemoveCRxUsers(item.DocUserProfiles.Distinct().ToList());
            var tinspectionEPdocs = new HCF.BDO.InspectionEPDocs();
            var epDocLists = item.TInspectionActivity.OrderByDescending(x => x.ActivityInspectionDate).FirstOrDefault();
            if (epDocLists != null)
            {
                tinspectionEPdocs = epDocLists.InspectionEPDocs;
            }
            <tr id="@item.DocTypeId" epid="@string.Join(",", item.EPDocument.Where(x => x.EPDetailId > 0).Select(x => x.EPDetailId))">
                <td style="display:none">@item.Status</td>
                <td style="display:none">
                    @item.DocTypeId
                </td>
                <td>
                    <span class="processType-Sprite @commonModelFactory.GetTranStatus(item.DocStatus)"></span>
                    <span>@item.Name </span>
                </td>
                <td>
                    <ul>
                        @foreach (var epDocs in item.EPDocument.Where(x => x.EPDetailId > 0).OrderBy(x => x.StandardEPs.StandardEP))
                        {
                            <li>
                                <a href="@Url.Action("EpInspections", "Goal", new { epId = epDocs.EPDetailId })">
                                    @epDocs.StandardEPs.StandardEP
                                </a>
                            </li>
                        }
                    </ul>
                </td>
                <td data-sort="@item.LastUploadedDate.DateSort()">
                    @if (item.LastUploadedDate.HasValue)
                    {
                        <span>
                            @item.LastUploadedDate.CastLocaleDate()
                        </span>
                    }

                </td>
                <td data-sort="@item.NextDueDateDate.DateSort()">
                    @if (item.NextDueDateDate.HasValue)
                    {
                        <span>
                            @item.NextDueDateDate.CastDate()
                        </span>
                    }
                </td>
                <td>
                    <a href="@Url.Action("EPUserView", "Common", new { epDetailId = 0, standardEP = item.Name, docTypeId = item.DocTypeId })"
                       class="modal-link">
                        @{
                            if (item.DocUserProfiles.Any())
                            {
                                //var users = item.DocUserProfiles.Where(x => x.IsCRxUser == false).Distinct().ToList();
                                var showCounts = 3;
                                var totalCount = users.Count;
                                var usersText = string.Join(",", users.Take(showCounts).Select(x => x.FullName));
                                if (totalCount > showCounts)
                                {
                                    <span>@($"{usersText} +  {totalCount - showCounts}")</span>
                                }
                                else
                                {
                                    <span>
                                        @usersText
                                    </span>
                                }
                            }
                        }
                    </a>

                </td>

                <td align="center">
                    <a class="button1" id="btnAddDoc" onclick="docupload(this)" _epid="@string.Join(",", item.EPDocument.Where(x => x.EPDetailId > 0).Select(x => x.EPDetailId))">Add Document</a>
                </td>
                <td>
                    @if (item.DocTypeId > 0)
                    {
                        <img class="hover_sign" onclick="location.href ='@Url.Action("PolicyBinderHistory", "Repository", new { docTypeId = item.DocTypeId })'"
                             src="@Url.Content(HCF.Web.Models.ImagePathModel.HistoryIcon)" />
                    }
                    else
                    {
                        <img class="hover_sign" onclick="location.href ='@Url.Action("EpHistory", "Assets", new { epId = item.EPDocument.Where(x => x.EPDetailId > 0).Select(x => x.EPDetailId).FirstOrDefault() })'"
                             src="@Url.Content(HCF.Web.Models.ImagePathModel.HistoryIcon)" />
                    }
                </td>
                <td width="100px" style="display:none"></td>
                <td style="display:none">
                    @{
                        <text>  @string.Join(", ", users.Select(x => x.FullName))</text>
                    }
                </td>
                <td style="display:none">
                    @{
                        <text>  @string.Join(",  ", item.EPDocument.Where(x => x.EPDetailId > 0).OrderBy(x => x.StandardEPs.StandardEP).Select(x => x.StandardEPs.StandardEP))</text>
                    }
                </td>
                <td style="display:none">
                    @{
                        <text>  @string.Join(",  ", item.EPDocument.Where(x => x.EPDetailId > 0).OrderBy(x => x.StandardEPs.StandardEP).Select(x => x.StandardEPs.EPSearchText))</text>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
@*<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.3.1/js/buttons.html5.min.js"></script>*@
<script>

    $(document).ready(function () {

        var totalnoofdocs = $('#documentep tr').length;
        var totalnogreensdocs = $("#documentep tr td span.status_pass").length;
        var percentage = Math.round((totalnogreensdocs / totalnoofdocs) * 100);
        debugger;


        var progressBar = $(".progress-bar");
        const show_percent = true;
        progressBar.attr('aria-valuenow', percentage);
        $("#lblprogress").html(percentage);
        var progress = progressBar.attr("aria-valuenow");
        progressBar.width(progress + "%");
        if (show_percent) {
            progressBar.text(progress + "%");
        }
        if (progress >= "99") {
            progressBar.addClass("progressGreen");
        }  else if (progress >= "67" && progress <= "98") {
            progressBar.addClass("progressyellow");
        } else if (progress >= "51" && progress <= "66") {
            progressBar.addClass("progressorange");
        }else if (progress > 0 && progress <= "50") {
            progressBar.addClass("progressRed");
        } else {
            progressBar.addClass("progressgey");
        }



        //if (percentage > 50) {
        //    $(".progress-bar").addClass('');
        //} else if (percentage > 50 && percentage <= 66) {
        //    $(".progress-bar").addClass('');
        //} else if (percentage >= 67 && percentage <= 99) {
        //    $(".progress-bar").addClass('');
        //} else {
        //    $(".progress-bar").addClass('progress-bar-success');
        //}


        function getExporteDExcelTitle() {
            var selectedUserId = $('#userList').val()
            var selectedUserText = $('#userList option:selected').text()
            var date = ('' + new Date()).split(' ')
            var datestring = date[1] + date[2] + "_" + date[4]
            //(''+new Date()).split(' ')[1]+(''+new Date()).split(' ')[2]+"_"+(''+new Date()).split(' ')[4]
            var title = "Missing Documents Report";

            return title;
        }
        var table = $('#documentep').DataTable({
            lengthChange: false,
            searching: true,
            bPaginate: $('#documentep tbody tr').length > 10,
            bInfo: false,
            aaSorting: [[2, 'asc']],
            aoColumnDefs: [{
                bSortable: false,
                aTargets: [-1, -2, -3, -4, -5, -6] /* 1st one, start by the right */
            }],
            language: {
                "emptyTable": "No data available in table"
            },

            /*  dom: 'Bfrtip',*/

            dom: "<'row'<'col-sm-2'B><'col-sm-10 tableactions'flp <'toolbar'>>>" + "<'row'<'col-md-12'<'table-responsive'tr> > >" + "<'row'<'col-sm-12 text-right'p>>",


            buttons: [
                {
                    extend: 'pdfHtml5',
                    messageTop: function () {
                        return $("#tabletext").text();
                    },
                    orientation: 'portrait',
                    filename: function () { return getExporteDExcelTitle(); },
                    title: function () { return getExporteDExcelTitle(); },
                    exportOptions: {
                        columns: [2, 11, 4, 5, 10]
                    },
                    customize: function (doc) {
                        doc.content.splice(0, 1);
                        var now = new Date();
                        var jsDate = setDateFormat(now);
                        var logo = localStorage.getItem("logoimgbase64");//getBase64FromImageUrl();
                        doc.pageMargins = [20, 60, 20, 30];
                        doc.defaultStyle.fontSize = 8;
                        doc.content[1].table.widths = ['25%', '31%', '9%', '9%', '26%'];
                        doc.styles.tableHeader.fontSize = 7;
                        doc['header'] = (function () {
                            return {
                                columns: [
                                    { image: logo, width: 40 },
                                    {
                                        alignment: 'left',
                                        italics: true,
                                        text: '',
                                        fontSize: 14,
                                        margin: [0, 6, 0, 0],
                                        width: 200,
                                    },
                                    {
                                        alignment: 'middle',
                                        fontSize: 14,
                                        text: getOrgName('@HCF.Web.Base.UserSession.CurrentOrg.Name') + " , "+ ' @HCF.Web.Base.UserSession.CurrentOrg.Address' + '\n Missing Documents Report',
                                        margin: [0, 6, 0, 0]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        doc['footer'] = (function (page, pages) {
                            return {
                                columns: [
                                    {
                                        alignment: 'left',
                                        text: ['Created on: ', { text: jsDate.toString() }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated from: ', { text: getOrgName('@HCF.Web.Base.UserSession.CurrentOrg.Name') }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated by: ', { text: '@HCF.Web.Base.UserSession.CurrentUser.Name' }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: [{ text: page.toString() }, ' of ', { text: pages.toString() }]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return .5; };
                        objLayout['vLineWidth'] = function (i) { return .5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[0].layout = objLayout;
                    }
                },
                {
                    extend: 'excel',
                    text: 'Export as excel',
                    filename: function () { return getExporteDExcelTitle(); },
                    title: function () { return getExporteDExcelTitle(); },
                    customize: function (xlsx) {
                        var sheet = xlsx.xl.worksheets['sheet1.xml'];
                        var col = $('col', sheet);
                        //set the column width otherwise it will be the length of the line without the newlines
                        $(col[3]).attr('width', 50);
                        $('row c[r^="B"]', sheet).each(function () {

                            $(this).attr('s', '55');

                        })
                    },
                    exportOptions: {
                        modifer: {
                            page: 'all',
                            search: 'none'
                        },
                        columns: [2, 11, 4, 5, 10],
                    }
                }
            ],

            drawCallback: function () {
                var hasRows = this.api().rows({ filter: 'applied' }).data().length > 0;
                //$('.buttons-excel')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                //$('.buttons-pdf')[0].style.visibility = hasRows ? 'visible' : 'hidden'
                $('[rel="popover"]').popover({ trigger: "hover" });
            }
        });

        $('.dt-button.buttons-excel.buttons-html5').attr('title', 'Download Excel');
        $('.dt-button.buttons-pdf.buttons-html5').attr('title', 'Download Pdf');
    });

    var docUploadUrl = "";
    var docupload = function (e) {
        debugger
        var epid = e.getAttribute('_epid')
        //alert(epid);
        LoadRecentFiles();
        docUploadUrl = '@Url.Action("EPDocs", "Goal")?epId=' + 0 + '&epIds=' + epid
    };


    function fileUploadSuccess(tFiles, selectedFiles) {
        debugger
        console.log(tFiles, selectedFiles);
        localStorage.setItem('epDocUploadFiles', JSON.stringify(selectedFiles));
        window.location.href = docUploadUrl;
    }
</script>
