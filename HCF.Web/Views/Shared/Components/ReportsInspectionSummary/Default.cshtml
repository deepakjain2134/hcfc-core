@model IEnumerable<HCF.BDO.InspectionReport>

<div id="catfilter" class="dashboard_filter text-right">
    <input type='text' class="compliane-search form-control" id='txt_searchall' placeholder='Enter search text'>
    @await Html.PartialAsync("_epChapters")

</div>

<div class="compliancePadding"></div>
<div class="row">
    <div class="col-md-12 col-sm-12">
        <div class="table-responsive compliance-responsive">
            <table id="inspectionTable" class="table table-bordered table-hover">
                <thead>
                    <tr class="red">
                        <th style="display:none">
                        </th>
                        <th width="140px" onclick="SetInspectionSortingOrder('StandardEP')" class="sorting1" id="IStandardEP">Standard</th>
                        <th width="260px">Description</th>
                        <th width="100px">Frequency</th>
                        <th width="120px">Responsible</th>
                        <th width="52px" title="January">Jan</th>
                        <th width="52px" title="February">Feb</th>
                        <th width="52px" title="March">Mar</th>
                        <th width="52px" title="April">Apr</th>
                        <th width="52px" title="May">May</th>
                        <th width="52px" title="June">Jun</th>
                        <th width="52px" title="July">Jul</th>
                        <th width="52px" title="August">Aug</th>
                        <th width="52px" title="September">Sep</th>
                        <th width="52px" title="October">Oct</th>
                        <th width="52px" title="November"> Nov</th>
                        <th width="52px" title="December">Dec</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        var count = 0;
                        foreach (var yr in item.Years.OrderBy(x => x.YearId))
                        {
                            <tr class="dataRow">
                                @if (count == 0)
                                {
                                    <td class="catId" style="display:none">
                                        @item.Standard.CategoryId
                                    </td>

                                    <td>

                                        <a href="@Url.Action("EpInspections", "Goal", new { epId = item.EPDetailId })">
                                            @item.StandardEp
                                        </a>

                                        <br />
                                        @foreach (var asset in item.Assets)
                                        {
                                            @asset.Name
                                        }
                                    </td>
                                    <td>

                                        @await Html.PartialAsync("_EpDescription", item.StandardEps.Description,
                                   new ViewDataDictionary(
                                   new Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider(),
                                   new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary())
                                   {{ "minLength", "100" }, { "standardEp", @item.StandardEp }}
                                  )

                                        @*@await Html.PartialAsync("_EpDescription", item.StandardEps.Description, new ViewDataDictionary { { "minLength", "100" }, { "standardEp", @item.StandardEp } })*@
                                    </td>
                                }

                                @foreach (var fre in item.EPFrequency)
                                {
                                    if (item.EPFrequency.Count > 1)
                                    {
                                        <td align="center" class="@string.Format("frequency_{0}",fre.Frequency.FrequencyId)">

                                            <span>@($"{fre.Frequency.DisplayName},")</span>
                                        </td>
                                    }
                                    else
                                    {
                                        <td align="center" class="@string.Format("frequency_{0}",fre.Frequency.FrequencyId)">
                                            <span>@fre.Frequency.DisplayName</span>
                                        </td>
                                    }
                                }
                                <td>
                                    <a href="@Url.Action("EpUserView", "Common", new { epDetailId = item.EPDetailId, standardEP = item.StandardEp })"
                                       class="modal-link">
                                        @{
                                            var users = item.EPUsers.Where(x => x.IsCRxUser == false).ToList();

                                            var showCounts = 3;
                                            var totalCount = users.Count;
                                            var usersText = string.Join(",", users.Take(showCounts).Select(x => x.FullName));
                                            if (totalCount > showCounts)
                                            {
                                                <span>@($"{usersText} +  {totalCount - showCounts}")</span>
                                            }
                                            else
                                            {
                                                <span>
                                                    @usersText
                                                </span>
                                            }

                                        }
                                    </a>

                                </td>

                                @{

                                    var startDate = new DateTime(Convert.ToInt32(yr.Name), 1, 1);
                                    // var endDate = new DateTime();
                                    var numberNames = GetColumnColumnCount(item.EPFrequency.FirstOrDefault().Frequency.FrequencyId);
                                    int columCOunt = numberNames["columCount"];
                                    int colSpanCount = numberNames["colspan"];
                                    for (int i = 0; i < columCOunt; i++)
                                    {
                                        var endDate = startDate.AddMonths(colSpanCount).AddDays(-1).AddHours(23).AddMinutes(59).AddSeconds(59);
                                        <td colspan="@colSpanCount" startdate="@startDate.ToFormatDate()" enddate="@endDate" style="text-align:center" class="@string.Format("frequency_{0}",item.EPFrequency.FirstOrDefault().Frequency.FrequencyId)">
                                            <span>
                                                <span>
                                                    @{

                                                        var inspections = yr.Months.SelectMany(x => x.Inspections);
                                                        var data = inspections.Where(x => x.StartDate >= startDate && x.StartDate <= endDate).OrderBy(x => x.StartDate).ToList();
                                                        if (colSpanCount > 1)
                                                        {

                                                            foreach (var inspection in data.GroupBy(x => x.StartDate.Date))
                                                            {
                                                              
                                                                    <a href="@Url.Action("EPActivityHistory", "Assets", new { InspectionId = inspection.FirstOrDefault().InspectionId, epId = inspection.FirstOrDefault().EPDetailId })">
                                                                        <span class="redborder-insp" style="background-color:yellow;padding:2px">@string.Format("{0}/{1}", inspection.Key.Month, inspection.Key.Day)</span>
                                                                    </a>
                                                                
                                                            }
                                                        }
                                                        else
                                                        {
                                                            foreach (var inspection in data.GroupBy(x => x.StartDate.Date))
                                                            {
                                                               
                                                                    <a href="@Url.Action("EPActivityHistory", "Assets", new { InspectionId = inspection.FirstOrDefault().InspectionId, epId = inspection.FirstOrDefault().EPDetailId })">
                                                                        <span style="background-color:yellow;padding:2px">@string.Format("{0}", inspection.Key.Day)</span>
                                                                    </a>                                                               
                                                            }

                                                        }
                                                    }


                                                </span>
                                                @{startDate = startDate.AddMonths(colSpanCount);}
                                            </span>
                                        </td>

                                    }
                                }
                            </tr>
                        }
                    }

                    <tr class='notfound'>
                        <td colspan='15' style="text-align:center">No record found</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@functions{

    public static IDictionary<string, int> GetColumnColumnCount(int frquencyId)
    {
        IDictionary<string, int> numberNames = new Dictionary<string, int>();

        var frequency = (HCF.BDO.Enums.Frequency)frquencyId;
        switch (frequency)
        {
            case HCF.BDO.Enums.Frequency.Annually:
                numberNames.Add("columCount", 1);
                numberNames.Add("colspan", 12);
                break;
            case HCF.BDO.Enums.Frequency.Quarterly:
                numberNames.Add("columCount", 4);
                numberNames.Add("colspan", 3);
                break;
            case HCF.BDO.Enums.Frequency.SemiAnnually:
                numberNames.Add("columCount", 2);
                numberNames.Add("colspan", 6);
                break;
            default:
                numberNames.Add("columCount", 12);
                numberNames.Add("colspan", 1);
                break;
        }
        return numberNames;
    }

    public static string GetClass(DateTime boxDateTime, DateTime dueDate, DateTime inspectionDate)
    {
        if (boxDateTime.Month == inspectionDate.Month && boxDateTime.Year == inspectionDate.Year)
        {
            return "active";
        }

        if (boxDateTime.Month == dueDate.Month && boxDateTime.Year == dueDate.Year)
        {
            return "duemonth";
        }

        if (boxDateTime > dueDate && boxDateTime < DateTime.UtcNow)
        {
            return "dueDatePass";
        }
        //boxDateTime = dueDate  retrun textboxclass
        //boxtime >   dueDate but less than current date
        //boxdatetime = inspectionDate
        return "";
    }

}
@*<script src="//cdn.datatables.net/plug-ins/1.10.7/pagination/select.js"></script>
    <script src="@Url.Content("~/dist/js/numericInput.min.js")"></script>*@

<script>

    $(document).ready(function () {


        $('#lastpage').on('click', function () {
            var pagenUmber = $("#pagNumber").val();
            inspectionTable.page(pagenUmber).draw(true);
        });


        $('.dt-button.buttons-pdf.buttons-html5').attr('title', 'Download PDF');
        $('.dt-button.buttons-excel.buttons-html5').attr('title', 'Download Excel');



        var filter = $("input[name=EPCat]:checked").val();
        if (filter > 0) {
            //var filter = this.value;
            if (filter == "0") {
                $("tr.dataRow").css("visibility", "visible");
                return false;
            }
            else {
                $("tr.dataRow").css("visibility", "collapse")
            };

            $("tr.dataRow").find("td.catId").each(function () {
                $this = $(this);
                if ($this.html().trim() == filter) {
                    matchFound = true;
                    $this.parent().css("visibility", "visible");
                }
            });
        }

        $("#txtEpEcCount").text('@Model.Count(x => x.Standard.CategoryId==1)');
        $("#txtEpLsCount").text('@Model.Count(x => x.Standard.CategoryId==2)');
        $("#txtEpEmCount").text('@Model.Count(x => x.Standard.CategoryId==3)');
        $("#txtEpAllCount").text('@Model.Count()');

    });

    function getTheDays(year, month) {
        month = month - 1;
        var firstDay = 1;
        var lastDay = 0;
        var FirstDay = new Date(year, month, 1);
        var LastDay = new Date(year, month + 1, 0);
        lastDay = LastDay.getDate();
        firstDay = FirstDay.getDay();
        return lastDay;
    }


    $('#txt_searchall').keyup(function () {
        // Search Text
        var search = $(this).val();

        // Hide all table tbody rows
        $('table tbody tr').hide();

        // Count total search result
        var len = $('table tbody tr:not(.notfound) td:containsIN("' + search + '")').length;

        if (len > 0) {
            // Searching text in columns and show match row
            $('table tbody tr:not(.notfound) td:containsIN("' + search + '")').each(function () {
                $(this).closest('tr').show();
            });
        } else {
            $('.notfound').show();
        }

    });

    $.extend($.expr[":"], {
        "containsIN": function(elem, i, match, array) {
            return (elem.textContent || elem.innerText || "").toLowerCase().indexOf((match[3] || "").toLowerCase()) >= 0;
        }
    });

    $('.redborder-insp').on('click', function () {
        $(this).addClass('current');
    });



    $(function () {
        $("[rel=popover]").popover({ placement: 'bottom' });
    });

    $(function () {
        $('.descriptions').popover();
    });

</script>
<style>
    .popover-content.popover-scrollBar {
        max-height: 120px;
        overflow: auto;
        margin-bottom: 10px;
    }

    .notfound {
        display: none;
    }

    .frequency_1 {
        background: #b7dee8;
    }

    .frequency_25 {
        background: #f2dcdb;
    }

    .frequency_6 {
        background: #c5be97;
    }

    .frequency_7 {
        background: #c0c0c0;
    }

    select#year {
        max-width: 240px;
        float: left;
    }

    .compliane-search.form-control {
        max-width: 240px;
        float: right;
    }

    .button-complianceyear .table-bordered > tbody > tr > td,
    .table-bordered > thead > tr > th {
        vertical-align: middle !important;
        border-color: #7d7b7b;
    }

    .compliance-responsive table {
        text-align: left;
        position: relative;
        border-collapse: collapse;
    }

    .compliance-responsive th {
        background: white;
        position: sticky;
        top: -1px;
        box-shadow: -2px 0px 0px -1px #ccc;
        z-index: 9;
    }

    .year_0 {
        background: yellow;
    }

    .year_1 {
        background: #9ae422;
    }

    .year_2 {
        background: #ffd400;
    }

    .False {
        cursor: not-allowed;
    }

    .duePassed {
        background: red !important;
    }
</style>