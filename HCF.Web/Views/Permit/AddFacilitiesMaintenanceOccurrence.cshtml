@model HCF.BDO.TFacilitiesMaintenanceOccurrencePermit
@{

    ViewBag.Title = "Add Facilities Maintenance Occurrence";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

    @section pageHeader{
    <section class="content-header">
        <h1>
            Add Facilities Maintenance Occurrence
        </h1>
    </section>
        }
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="">
                        @using (Html.BeginForm("AddFacilitiesMaintenanceOccurrence", "Permit", FormMethod.Post, new { enctype = "multipart/form-data", id = "FacilitiesMaintenanceOccurrenceForm", autocomplete = "off" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true)
                            <div class="row">
                                @Html.HiddenFor(m => Model.TfmcId)
                                @Html.HiddenFor(m => Model.RequesterSignId)
                                @Html.HiddenFor(m => Model.ApproverSignId)
                                @Html.HiddenFor(m => m.PermitNo)
                                @Html.HiddenFor(m => m.TDrawingFields, new { id = "attachdrawingFiles" })
                                @*<input type="hidden" id="DSSign1Signature.FileName" name="DSSign1Signature.FileName" value="" />
                                    <input type="hidden" id="DSSign1Signature.FileContent" name="DSSign1Signature.FileContent" value="" />
                                    <input type="hidden" id="DSSign2Signature.FileName" name="DSSign2Signature.FileName" value="" />
                                    <input type="hidden" id="DSSign2Signature.FileContent" name="DSSign2Signature.FileContent" value="" />*@
                                <div class="facilities-row">
                                    <div class="facilities-col6">
                                        <div class="col-md-12 facilities-heading">
                                            <h4>Originator </h4>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="permitNumber">Report #:  @(Model.TfmcId > 0 ? Model.PermitNo : Localizer["PermitNumber"])</label>
                                            @*<label class="permitNumber">Report#: <span style="@(Model.TfmcId>0 ? "display:block;" :"display:none;")">@Model.PermitNo</span></label>*@
                                        </div>
                                        @*<div class="col-md-6">
                                                @await Html.PartialAsync("_PermitCommonMsg")
                                            </div>*@
                                        <div class="form-group col-md-6">
                                            <label>Name:</label><em class="required-field">*</em>
                                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", required = "required" })
                                            @Html.ValidationMessageFor(model => model.Name)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Asset ID(if applicable):</label>
                                            @*@Html.TextBoxFor(model => model.AssetId, new { @class = "form-control numeric", maxlength = "20" })*@
                                            @Html.TextBoxFor(model => model.AssetId, new { @class = "form-control numeric", maxlength = "20" })
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Position:</label>
                                            @Html.TextBoxFor(model => model.Position, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.Position)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Department:<em class="required-field">*</em></label>
                                            @Html.DropDownListFor(model => model.DepartmentId, (SelectList)ViewBag.Departments, "-- Select Department --", new { @class = "form-control", @required = "required" })
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Phone:</label>
                                            @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control phone" })
                                            @Html.ValidationMessageFor(model => model.PhoneNo)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Shift:<em class="required-field">*</em></label>
                                            @Html.ValidationMessageFor(model => model.Shift)
                                            @Html.TextBoxFor(model => model.Shift, new { @class = "form-control", required = "required" })
                                            @*@Html.DropDownListFor(model => model.ShiftId, (SelectList)ViewBag.Shifts, "-- Select Shift --", new { @class = "form-control", @required = "required" })*@
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Date of Occurrence:<em class="required-field">*</em></label>
                                            @Html.TextBoxFor(model => model.DateOfOccurence, $"{Model.DateOfOccurence:MMM d, yyyy}", new { @class = "form-control startDate readonly", required = "required", @autocomplete = "off" })
                                            @Html.ValidationMessageFor(model => model.DateOfOccurence)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Time Of Occurrence:<em class="required-field">*</em></label>
                                            @Html.TextBoxFor(m => m.TimeOfOccurence, $"{Model.TimeOfOccurence:HH:MM}", new { @class = "form-control timepicker required readonly", required = "required" })
                                            @Html.ValidationMessageFor(model => model.TimeOfOccurence)
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Report Date:<em class="required-field">*</em></label>
                                            @Html.TextBoxFor(model => Model.ReportDate, $"{Model.ReportDate:MMM d, yyyy}", new { @class = "form-control datepicker readonly", @autocomplete = "off", required = "required" })
                                        </div>
                                        <div class="form-group col-md-12">
                                            <label>Organization:<em class="required-field">*</em></label>
                                            @Html.TextBoxFor(model => model.Company, new { @class = "form-control", required = "required" })
                                            @Html.ValidationMessageFor(model => model.Company)
                                        </div>
                                        <div class="col-md-12 divattachment">
                                            <label class="attachedfile-lable">Attach Drawings:</label>
                                            <img src="@Url.Content(HCF.Web.Models.ImagePathModel.UploadIcon)" id="btnattachingdrawings" data-toggle="modal" data-target="#modal-container1" />

                                            <div id="drawing-upload-list">
                                                <div id="drawing-lists">
                                                    <ul class="col-lg-12 attachdrawingfiles ">
                                                        @foreach (var item in Model.DrawingAttachments)
                                                        {
                                                            <li class="list-group-item files" id="lidrawingdv_@item.FloorPlanId">
                                                                @if (!string.IsNullOrEmpty(item.FullFileName))
                                                                {
                                                                    <a href="@Url.Action("ImagePreview", "Common", new { imgSrc = item.ImagePath, title = item.FloorName + " , " + item.BuildingName })" title="@item.FileName" class="modal-link allowclick">
                                                                        @*<img src="@Url.Content("~/dist/Images/Icons/document_blue-icon.png")" title="@item.FullFileName" />*@
                                                                        @item.FullFileName
                                                                    </a>
                                                                    <a data-id="@item.FloorPlanId" class="deletedrawing allowclick">
                                                                        <img id="deletedrawing" alt="Delete" title="Delete file" src="~/dist/Images/Icons/red_cross.png" />
                                                                    </a>
                                                                }
                                                            </li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="facilities-col6">
                                        <div class="col-md-12 facilities-heading">
                                            <h4>Description</h4>
                                        </div>
                                        <div class="col-md-12">
                                            <div class="sitelocationhide">
                                                <div id="sitesList" class="sitelist">
                                                    <ul class="list" style="list-style-type: none;">
                                                        <li class="siteinnerlist"><label><strong>Classification:</strong><em class="required-field"> * </em></label></li>
                                                        @for (var i = 0; i < Model.lstClassificationType.OrderBy(x => x.Sequence).Count(); i++)
                                                        {

                                                            @Html.HiddenFor(m => Model.lstClassificationType[i].Id)
                                                            @Html.HiddenFor(m => Model.lstClassificationType[i].Name)
                                                            @Html.HiddenFor(m => Model.lstClassificationType[i].Sequence)
                                                            <li class="siteinnerlist">
                                                                <input @(Model.lstClassificationType[i].IsChecked == 0 ? "" : "checked") type="checkbox" onclick="SetCheckValInt(this)" class="siteCheck classificationtype" />
                                                                <input type="hidden" value="@Model.lstClassificationType[i].IsChecked" name="lstClassificationType[@i].IsChecked" />
                                                                <span></span>
                                                                <a> @Model.lstClassificationType[i].Name</a>
                                                            </li>}
                                                    </ul>

                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group col-md-12">
                                            <label>Location:<em class="required-field">*</em></label>
                                            @Html.TextAreaFor(model => model.Location, new { @class = "form-control", required = "required" })
                                            @Html.ValidationMessageFor(model => model.Location)
                                        </div>
                                        <div class="form-group col-md-12">
                                            <label>Describe Occurrence:<em class="required-field">*</em></label>
                                            @Html.TextAreaFor(model => model.OccurenceDetails, new { @class = "form-control occurr-textarea", required = "required" })
                                            @Html.ValidationMessageFor(model => model.OccurenceDetails)
                                        </div>



                                    </div>


                                </div>

                                <div class="col-md-12 facilities-heading">
                                    <h4>Action Taken-resolutions</h4>
                                </div>
                                <div class="form-group col-md-12">
                                    <label>Action Taken: <em class="required-field">*</em></label>
                                    @Html.TextAreaFor(model => model.ActionTaken, new { @class = "form-control", required = "required", @rows = 3 })
                                    @Html.ValidationMessageFor(model => model.ActionTaken)
                                </div>
                                <div class="col-md-12 facilities-heading">
                                    <h4>Comments</h4>
                                </div>
                                <div class="form-group col-md-12">
                                    <label>Comment:</label>
                                    @Html.TextAreaFor(model => model.Comments, new { @class = "form-control", @rows = 3 })
                                    @Html.ValidationMessageFor(model => model.Comments)
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-6">
                                    <label>Completely Resolved:</label>
                                    <select name="CompletelyResolved" id="CompletelyResolved" onchange="ChangeCompletelyResolved(this)" required="required" class="form-control">
                                        <option value="0"> No</option>
                                        <option value="1"> Yes</option>
                                    </select>
                                    @Html.ValidationMessageFor(model => model.CompletelyResolved)
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Date:</label>
                                    @Html.TextBoxFor(model => Model.CompleteDate, $"{Model.CompleteDate:MMM d, yyyy}", new { @class = "form-control startDate readonly", @autocomplete = "off" })
                                </div>


                                <div class="col-md-12">
                                    <div class="sitelocationhide">
                                        <div id="sitesList" class="sitelist">
                                            <ul class="list" style="list-style-type: none;">
                                                <!--<li class="siteinnerlist"><label><strong></strong></label></li>-->
                                                <li class="siteinnerlist">
                                                    <input @(Model.AddedToEOC == true ? "checked" : "") type="checkbox" name="eoc" onclick="SetCheckVal(this,true)" class="siteCheck" />

                                                    <span></span>
                                                    <a><label> Added To EOC Dashboard</label></a>
                                                </li>
                                                <li class="siteinnerlist">
                                                    <input @(Model.AddedToEOC == false ? "checked" : "") type="checkbox" name="eoc" onclick="SetCheckVal(this,false)" class="siteCheck" />

                                                    <span></span>
                                                    <a>  <label>Do not Include in EOC Dashboard</label></a>
                                                </li>
                                                <input type="hidden" name="AddedToEOC" value="@Model.AddedToEOC" id="AddedToEOC" />
                                            </ul>

                                        </div>
                                    </div>
                                </div>

                               
                              
                                <div class="col-md-12 text-right button_Div">
                                    <input name="submit" type="submit" value=' @Localizer["Submit"] ' class="comm-button" id="saveFMC" />

                                    <input name="submit" formnovalidate="formnovalidate" type="submit" id="btnIncomplete" value='Save Incomplete' class="@(Model.CompletelyResolved==1 ? "comm-bluebutton disable" :"comm-bluebutton")" />
                                    @Html.ActionLink("Cancel", "FacilitiesMaintenanceOccurrence", new { controller = "Permit" }, new { @class = "comm-Cancelbutton" })

                                    @*@Html.ActionLink("Cancel ", "FacilitiesMaintenanceOccurrence", "Permit", new { @class = "comm-button" })*@
                                </div>
                                
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>

<div class="modal fade" id="signAndSave" role="dialog">
</div>


<script src="@Url.Content("~/dist/Scripts/jquery-clockpicker.js")"></script>
<link rel="stylesheet" href="@Url.Content("~/dist/css/clock-picker/jquery-clockpicker.min.css")" />
<script>

  
    function Resetlinkclick(thisobj) {
        debugger;
        if (thisobj.id == "btnbackpageUrl") {
            var screenName = '@string.Format("{0}_{1}", ViewContext.RouteData.Values["Controller"].ToString().ToLower(), ViewContext.RouteData.Values["Action"].ToString().ToLower())';
            window.location.href = ('@Url.Action("RedirectTobackpage", "Common")' + "?pageUrl=" + window.location.href + "&screenName=" + screenName).replace('#', '');
        } else {
            var url = $(thisobj).attr("linkurl");
            if (typeof url !== 'undefined')
                window.location = url;
            else {
                var clickev = $(thisobj).prev(".originallink").attr("onclick");
                if (typeof clickev !== 'undefined') {
                    $(thisobj).hide();
                    var prevlink = $(thisobj).prev(".originallink");
                    $(thisobj).prev(".originallink").show();
                    $(prevlink).click();
                    $(thisobj).prev(".originallink").hide();
                    $(thisobj).show();
                }
                //  $(thisobj).prev(".originallink").click();
            }
        }
    }
    
    function Restrictpageload(thisobj) {
        swal({
            title: "Changes you made may not saved",
            text: "Do you want to save your data before leaving this page?",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: '#DD6B55',
            confirmButtonText: 'Yes',
            cancelButtonText: "No",
            closeOnConfirm: true,
            closeOnCancel: true
        },
            function (isConfirm) {
                swal.close();
                if (isConfirm) {
                   
                    setTimeout(function () {
                        $('#btnbackpageUrl').removeClass("stopunload");
                         $("#btnIncomplete").click();
                    }, 1000)
                }
                else {
                    //swal.close();
                    //Resetlinkclick(thisobj);
                    setTimeout(function () {
                        $('#btnbackpageUrl').removeClass("stopunload");
                        Resetlinkclick(thisobj);
                    }, 1000)
                }
            });       
    }
    
    var statusddl = $("#Status");
     $(document).ready(function () {
        var status = parseInt('@Model.Status');
         var fmcid = parseInt('@Model.TfmcId');
         
         var completelyResolvedValue = parseInt('@Model.CompletelyResolved')
         if (fmcid == 0) {
             status = 2;
         }

         statusddl.val(status);
         checkAppprovalStatus();

         $("#CompletelyResolved").val(completelyResolvedValue);

         //Save on any menu click for not loosing data
         //$("a").each(function () {
             $("a").not("#FacilitiesMaintenanceOccurrenceForm .allowclick").each(function () {
             $(this).addClass("stopunload");
             var url = this.href;
             //if link has url or click events will create duplicate
             if (url != '' || url == '#') {
                 $(this).attr("linkurl", url);
                 $(this).removeAttr("href");
             }
             else {
                 $(this).clone().insertAfter(this);
                 $(this).addClass("originallink");
                 $(this).hide();
             }
         });

        
         $("a").not(".originallink").removeAttr("onclick");

         $(".stopunload").not(".dropdown-toggle").click(function (e) {
             e.preventDefault();
             if ($("#FacilitiesMaintenanceOccurrenceForm").data("changed") || typeof $("#FacilitiesMaintenanceOccurrenceForm").data("changed") !== 'undefined') {
                 Restrictpageload(this);
             }
             else {
                 Resetlinkclick(this);
             }
             e.preventDefault();
         });
         //check any changes done on page
         $("#FacilitiesMaintenanceOccurrenceForm :input").change(function () {
             $("#FacilitiesMaintenanceOccurrenceForm").data("changed", true);
             $('#btnbackpageUrl').addClass("stopunload");
         });
         $('#btnbackpageUrl').removeClass("stopunload");
    });
    $(".readonly").on('keydown paste', function (e) {
        e.preventDefault();
    });


    $(".sign1name").click(function () {
        loadSignView('DSSign1Signature.FileName', 'DSSign1Signature.FileContent');
        $('#signAndSave').modal('show');
    });

    $(".sign2name").click(function () {
        loadSignView('DSSign2Signature.FileName', 'DSSign2Signature.FileContent');
        $('#signAndSave').modal('show');
    });

    var input = $('.timepicker');
    input.clockpicker({
        twelvehour: true,
        donetext: "Done",
        placement: 'top',
        align: 'left',
        autoclose: true,
        'default': 'now',
        afterDone: function () {

        }
    });

    $("#saveFMC").click(function () {
        var IsValid = true;
       
        if ($('#FacilitiesMaintenanceOccurrenceForm')[0].checkValidity() && $(".classificationtype:checked").length == 0) {

            IsValid = false;
            swalalert("Please select atleast one classification type .");
            return false;
        }
       
        if ($('#FacilitiesMaintenanceOccurrenceForm')[0].checkValidity() && $("#PhoneNo").val() != "") {
            var phone = $("#PhoneNo").val().replace(/[^0-9]/g, '');
            if (phone.length != 10) {
                swalalert("Please Enter Valid Phone #");
                IsValid = false;
                return false;
            }

        }
        if ($('#FacilitiesMaintenanceOccurrenceForm')[0].checkValidity()) {
            $(".loadingModal").show();
            if (IsValid) {
                $("#FacilitiesMaintenanceOccurrenceForm").submit();
            }
            else {
                $(".loadingModal").hide();

            }
        }
        
    });

    $("#btnIncomplete").click(function () {
        var IsValid = true;
        if ($("#Name").val() == "") {
            swalalert("Please select Name");
            IsValid = false;
            return false;
        }

        if ($("#PhoneNo").val() != "") {
            var phone = $("#PhoneNo").val().replace(/[^0-9]/g, '');
            if (phone.length != 10) {
                swalalert("Please Enter Valid Phone #");
                IsValid = false;
                return false;
            }

        }

       
        $(".loadingModal").show();
        if (IsValid) {
            $("#FacilitiesMaintenanceOccurrenceForm").submit();
        }
        else {
            $(".loadingModal").hide();

        }
    });

    $('textarea').on('input', function () {
        $(this).outerHeight(80).outerHeight(this.scrollHeight);
    });
    $('textarea').trigger('input');

    function SetCheckValInt(thisobj) {
        if ($(thisobj).prop("checked"))
            $(thisobj).next("input:hidden").val(1)
        else
            $(thisobj).next("input:hidden").val(0)
    }
    function SetCheckVal(thisobj, Value) {

        if ($(thisobj).prop("checked"))
            $("input[name='eoc']:checkbox").not(thisobj).prop('checked', false);

        $("#AddedToEOC").val(Value);

    }
    function ChangeCompletelyResolved(thisobj) {
        $("#btnIncomplete").removeClass();
    
        if ($(thisobj).val() == "1") {
            $("#btnIncomplete").addClass("comm-button disable");
        }
        else {
            $("#btnIncomplete").addClass("comm-button");
        }
    }
    function checkAppprovalStatus() {
        var StatusId = $("#Status").val();
        if (StatusId == 0 || StatusId == 3) { // Reject && Penidng
            var lbltext = StatusId == 0 ? "Reason(s) for Rejection:" : "Reason(s) for Hold/Pending:";
            lbltext += '<em class="required-field approverby">*</em>';
            $("#lbltext").html(lbltext);
            $(".showonreject").show();
            $(".showonapproved").hide();
            $(".approverby").show();
            $("#ApprovedDate").prop('required', false);
            $("#ApprovedDate").prev("label").find("em").hide();
            $("#ApprovedBy").prop('required', true);
            $("#ApprovedBy").prev("label").find("em").show();
            $("#Reason").prop('required', true);
        } else if (StatusId == 1) {
            $(".showonreject").hide();
            $(".showonapproved").show();
            $(".approverby").show();
            $("#ApprovedDate").prop('required', true);
            $("#ApprovedDate").prev("label").find("em").show();
            $("#ApprovedBy").prop('required', true);
            $("#ApprovedBy").prev("label").find("em").show();
            $("#Reason").prop('required', false);
        } else {
            $(".showonreject").hide();
            $(".showonapproved").hide();
            $(".approverby").hide();
            $("#ApprovedDate").prop('required', false);
            $("#ApprovedDate").prev("label").find("em").hide();
            $("#Reason").prop('required', false);
            $("#ApprovedBy").prev("label").find("em").hide();
            $("#ApprovedBy").prop('required', false);
        }
    }


    
 $(document).on('click', '#btnattachingdrawings', function () {
        LoadDrawingPathway();
        $('#modal-container1').modal('show');
    });
    var TDrawingFields = $("#attachdrawingFiles");
    $(document).on('click', 'a.deletedrawing', function (e) {
       // TDrawingFields = $("#attachdrawingFiles");
        e.preventDefault();
        var TFileId = $(this).data("id");
        swal({
            title: "Are you sure?",
            text: "You will not be able to recover this File!",
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: true
        },
            function () {
                if (TDrawingFields.val() != undefined && TDrawingFields.val() != "") {
                    var newfileIds = removeCommaSeperatedValue(TDrawingFields.val(), TFileId.toLowerCase(), ",");

                    TDrawingFields.val(newfileIds);
                    $.ajax({
                        type: "GET",
                        url: CRxUrls.Permit_DeleteFMCDrawings + "?TfmcId=" + '@Model.TfmcId' + "&fileIds=" + newfileIds,
                        success: function (data) {
                            swal("Deleted!", "Your file has been deleted.", "success");
                            $("#lidrawingdv_" + TFileId).remove();
                            deletedrawings(TFileId);
                        },
                        dataType: "json",
                        traditional: true
                    });
                }
                else {
                    deletedrawings(TFileId);
                    swal("Deleted!", "Your file has been deleted.", "success");
                }
            });
    });
</script>


<script>

    $('#CompleteDate').datepicker({
        onSelect: function (selectedDate) {
            $('#ui-datepicker-div table td a').attr('href', 'javascript:;');
        }
    });
</script>
<script type="text/javascript" src="@Url.Content("~/dist/scripts/page_scripts/fileupload.js")"></script>


