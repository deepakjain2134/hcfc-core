@model HCF.BDO.QuarterMaster
@{
    HCF.BDO.FireDrillTypes drillTypes = new HCF.BDO.FireDrillTypes();

    var i = this.ViewData.ContainsKey("i") ? Convert.ToInt32(this.ViewData["i"].ToString()) : 0;
    var kk = this.ViewData.ContainsKey("kk") ? Convert.ToInt32(this.ViewData["kk"].ToString()) : 0;
    var ii = this.ViewData.ContainsKey("ii") ? Convert.ToInt32(this.ViewData["ii"].ToString()) : 0;
    if (this.ViewData["drillType"] != null)
    {
        drillTypes = (HCF.BDO.FireDrillTypes)this.ViewData["drillType"];
    }

}

@if (drillTypes.IsActive)
{
<tr buildid="@Model.Buildings[i].BuildingId" sitecode="@Model.Buildings[i].SiteCode" id="@drillTypes.FireDrillType" class="@($"building{Model.Buildings[i].BuildingId}_type{drillTypes.Id} drillrow")">

    @if (ii == 0 && !drillTypes.IsAdded)
    {
        <td valign="middle" rowspan="@Model.Buildings[i].FireDrillTypes.Count">
            <span class="vertical-mode">@Model.Buildings[i].BuildingName</span>
        </td>
    }
    <td>
        @drillTypes.FireDrillType
        @if (!drillTypes.IsAdded)
        {
            if (HCF.Web.Base.UserSession.HasRoles("add_firedrill_schedule"))
            {
                <span class="addNewDrill" data-type="@ii" data-buildingNo="@i"><i class="fa fa-plus" aria-hidden="true"></i></span>
            }
        }
        else
        {
            if (HCF.Web.Base.UserSession.HasRoles("edit_fire_drill"))
            {
                <span class="removeNewDrill" data-type="@ii" data-buildingNo="@i" rel="@drillTypes.FireDrillType"><i class="fa fa-times" aria-hidden="true"></i></span>
            }
        }
    </td>
    @for (var j = 0; j < Model.Buildings[i].Shifts.Count; j++)
    {
        <td>
            @for (var k = 0; k < Model.Buildings[i].Shifts[j].Exercises.Count(x => string.Equals(x.Name, drillTypes.FireDrillType, StringComparison.CurrentCultureIgnoreCase)); k++)
            {
            <div id="@($"div_{i}_{j}_{kk}")" ival="@i">

                @*@await Html.PartialAsync("_EditFireDrillShift",
        Model.Buildings[i].Shifts[j].Exercises.FirstOrDefault(x => string.Equals(x.Name, drillTypes.FireDrillType,
        StringComparison.CurrentCultureIgnoreCase)), new ViewDataDictionary {
            { "year", Model.Year }, { "quarterNo", Model.QuarterNo },
            { "startTime", Model.Buildings[i].Shifts[j].StartTime },
            { "endTime", Model.Buildings[i].Shifts[j].EndTime },
            { "i", i }, { "j", j }, { "ii", kk }, { "buildingno", @ViewBag.buildingNo }
        })*@

                @await Html.PartialAsync("_EditFireDrillShift",
               Model.Buildings[i].Shifts[j].Exercises.FirstOrDefault(x => string.Equals(x.Name, drillTypes.FireDrillType,StringComparison.CurrentCultureIgnoreCase)),
                           new ViewDataDictionary(
                           new Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider(),
                           new Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary())
                           {{ "year", Model.Year }, { "quarterNo", Model.QuarterNo },
                            { "startTime", Model.Buildings[i].Shifts[j].StartTime },
                            { "endTime", Model.Buildings[i].Shifts[j].EndTime },
                             { "i", i }, { "j", j }, { "ii", kk }, { "buildingno", @ViewBag.buildingNo }}
                          )


            </div>
            }
        </td>
    }
</tr>
}
<script>
    $(document).ready(function () {
        var quarterJosn = [];
        quarterJosn.push({ "quarter": 1, "startDate": "1", "endDate": 31, "startMonth": 0, "endMonth": 2 }); // jan feb march
        quarterJosn.push({ "quarter": 2, "startDate": "1", "endDate": 30, "startMonth": 3, "endMonth": 5 }); // april may june
        quarterJosn.push({ "quarter": 3, "startDate": "1", "endDate": 30, "startMonth": 6, "endMonth": 8 }); // july Aug sep
        quarterJosn.push({ "quarter": 4, "startDate": "1", "endDate": 31, "startMonth": 9, "endMonth": 11 }); // oct nov December

        var quarter = parseInt($("#QuarterNo").val());
        var year = $("#Year").val();
        var resultQuarter = $.grep(quarterJosn, function (n, i) {
            return n.quarter === quarter;
        });

        //console.log(resultQuarter);
        if (resultQuarter.length > 0) {
            var mindate = new Date(year, resultQuarter[0].startMonth, 1);
            var maxdate = new Date(year, resultQuarter[0].endMonth, resultQuarter[0].endDate);

            $('.date').datepicker({
                changeYear: false,
                minDate: mindate,
                maxDate: maxdate,
                dateFormat: 'M d, yy'
            });
        }

        $(".timepicker").each(function () {
            debugger;
            $(this).empty();
            var control = $(this);
            var endTime = $(this).attr('endtime');
            var startTime = $(this).attr('starttime');
            $(this).clockpicker({
                autoclose: false,
                twelvehour: true,
                donetext: "Done",
                'default': 'now',
                afterDone: function () {
                    debugger;
                    var time = control.val();
                    var time1 = time.split(" ")[0];
                    var previoustime = time1.split(":")[1];
                    var time2 = time1.split(":")[1];
                    if (endTime != undefined && startTime != undefined) {
                        var startchangeTime = tConvert(startTime.replace(":00", ""));
                        var endchangeTime = tConvert(endTime.replace(":00", ""));
                        debugger;
                        if (time == endchangeTime) {
                            debugger;
                            if (time.split(':')[1].split(' ')[0] == "00") {
                                var hr = time.split(':')[0];
                                var _time = parseInt(time.split(':')[0]) - 1
                                if (_time.toString().length == 1) { _time = "0" + _time }
                                time = time.replace(hr, _time)
                                time = time.replace("00", "45")
                            } else if (time.split(':')[1].split(' ')[0] == "15") {
                                time = time.replace("15", "00")
                            } else if (time.split(':')[1].split(' ')[0] == "30") {
                                time = time.replace("30", "15")
                            } else {
                                time = time.replace("45", "30")
                            }
                        } else {
                            if (time2 >= "01" && time2 <= "14") {
                                time2 = "15"
                            } else if (time2 >= "16" && time2 <= "29") {
                                time2 = "30"
                            } else if (time2 >= "31" && time2 <= "44") {
                                time2 = "45"
                            } else if (time2 >= "46" && time2 <= "59") {
                                time2 = "45"
                            } else {
                            }
                        }
                        time = time.replace(previoustime, time2);
                        control.val(time);
                        var currentTime = getTwentyFourHourTime(time);

                        console.log(time)
                        var status = validateTime(startTime, endTime, currentTime);
                        //console.log(status);

                        if (status == false) {
                            control.val("");
                            swalalert('please select time between ' + startchangeTime + ' and ' + endchangeTime);
                        }

                    } else {
                        if (time2 >= "01" && time2 <= "14") {
                            time2 = "15"
                        } else if (time2 >= "16" && time2 <= "29") {
                            time2 = "30"
                        } else if (time2 >= "31" && time2 <= "44") {
                            time2 = "45"
                        } else if (time2 >= "46" && time2 <= "59") {
                            time2 = "45"
                        } else {
                        }
                        time = time.replace(previoustime, time2);
                        control.val(time);
                    }
                }
            });
        });

        function tConvert(time) {
            // Check correct time format and split into components
            //debugger;
            time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

            if (time.length > 1) { // If time format correct
                time = time.slice(1);  // Remove full string match value
                time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
                time[0] = +time[0] % 12 || 12; // Adjust hours
                if (time[0].toString().length == 1) { time[0] = "0" + time[0] }
            }
            return time.join(''); // return adjusted time or original string
        }

        function getTwentyFourHourTime(amPmString) {
            //var d = new Date("1/1/2020 " + amPmString);
            debugger;
            var d;
            var date = new Date();
            var month = date.getMonth();
            if (month == 0) {
                month = parseInt(month) + 1;
                d = new Date(month + "/" + new Date().getDate() + "/" + new Date().getFullYear() + " " + amPmString);
            } else {
                d = new Date(new Date().getMonth() + "/" + new Date().getDate() + "/" + new Date().getFullYear() + " " + amPmString);
            }
          

            //console.log(d);
            return d;
            // return ("0" + d.getHours()).slice(-2)  + ':' + ("0" + d.getMinutes()).slice(-2) + ':00';

        }

        var validateTime = function (startTime, endTime, currentDate) {
            //debugger;
            startDate = new Date(currentDate.getTime());
            startDate.setHours(startTime.split(":")[0]);
            startDate.setMinutes(startTime.split(":")[1]);
            startDate.setSeconds(startTime.split(":")[2]);

            //console.log(startDate);

            endDate = new Date(currentDate.getTime());
            endDate.setHours(endTime.split(":")[0]);
            endDate.setMinutes(endTime.split(":")[1]);
            endDate.setSeconds(endTime.split(":")[2]);
            // console.log(endDate);
            // //debugger;
            var dateDiff = diff_minutes(endDate, startDate);
            var dateDiff2 = diff_minutes(endDate, currentDate);
            if (dateDiff < 0) {
                endDate.setDate(endDate.getDate() + 1);
                if (dateDiff2 > 0) {
                    currentDate.setDate(currentDate.getDate() + 1);
                }
            }
            valid = startDate <= currentDate && endDate >= currentDate;
            return valid;
        }

        function diff_minutes(dt2, dt1) {
            //debugger;
            var diff = (dt2.getTime() - dt1.getTime()) / 1000;
            // console.log(diff);
            diff /= 60;
            return diff;

        }



    })

</script>
<style>
    .removeNewDrill {
        display: block;
        color: red;
    }
</style>
