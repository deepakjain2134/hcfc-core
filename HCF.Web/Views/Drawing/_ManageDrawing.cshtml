@model HCF.BDO.DrawingViewer
@{
    ViewBag.Title = "Drawings";
    Layout = null;

}



@if (Model != null && Model.FloorPlan != null && Model.FloorPlan.FloorPlanId != default(Guid))
{
    <div id="catfilter" class="align-left">
        <h4 style="margin-top:0px;">@($"{Model.FloorPlan.Floor.Building.BuildingName} - {Model.FloorPlan.Floor.FloorName}")</h4>
    </div>

    @await Component.InvokeAsync("CadViewer",
        new
        {
            model = Model

        })
}


@* <table class="drawing-container" id="none">
             <tr>
                 <td>
                     <div id="floorPlan">
                     </div>
                     <input type="hidden" name="DrawingType" value="Drawaing" />
                 </td>
             </tr>
         </table>


         <script src="@Url.Content("~/areas/cadviewer/app/js/jquery.qtip.min.js")" type="text/javascript"></script>
         <link href="@Url.Content("~/areas/cadviewer/app/css/jquery.qtip.min.css")" media="screen" rel="stylesheet" type="text/css" /



         <!--<script src="@Url.Content("~/areas/CadViewer/app/cv/cv-pro/cadviewer_6.5.12.min.js")" type="text/javascript"></script>
         <script src="@Url.Content("~/areas/cadviewer/app/cv/cv-custom_commands/CADViewer_custom_commands.js")" type="text/javascript"></script>

         <script src="@Url.Content("~/areas/cadviewer/app/cv/cvlicense.js")" type="text/javascript"></script>
         <script src="@Url.Content("~/areas/cadviewer/app/cv/cv-core/axuploader_2_19.js")" type="text/javascript"></script>

         <script src="@Url.Content("~/areas/cadviewer/app/js/bootstrap-multiselect.js")" type="text/javascript"></script>
         <link href="@Url.Content("~/areas/cadviewer/app/css/bootstrap-multiselect.css")" rel="stylesheet" type="text/css" />-->

        <link href="@Url.Content("~/areas/cadviewer/app/css/cvjs_6.1.0.css")" media="screen" rel="stylesheet" type="text/css" />
    <!--<link href="@Url.Content("~/areas/CadViewer/app/css/cvjs_6.5.css")" media="screen" rel="stylesheet" type="text/css" />

        <script src="@Url.Content("~/areas/cadviewer/app/js/library_js_svg_path.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/snap.svg-min.js")" type="text/javascript"></script>

        <script src="@Url.Content("~/areas/cadviewer/app/js/cvjs_api_styles_2_0_26.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/rgbcolor.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/StackBlur.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/canvg.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/list.js")" type="text/javascript"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/jscolor.js")" type="text/javascript"></script>

        <script src="@Url.Content("~/areas/cadviewer/app/js/jstree/jstree.min.js")"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/xml2json.min.js")"></script>
        <script src="@Url.Content("~/areas/cadviewer/app/js/d3.v3.min.js")"></script>

        <script src="@Url.Content("~/areas/cadviewer/app/cv/CADViewer_AshxHandlerSettings.js")" type="text/javascript"></script>


        <script type="text/javascript">

        var FileName = "@commonModelFactory.FilePath(Model.FloorPlan.ImagePath).Replace("https://", "https://s3.amazonaws.com/")";

        var drawingViewer = {
                FloorPlanId: '@Model.FloorPlan.FloorPlanId',
                ViewerMode: '@Model.ViewerMode',
                PermitNo: '@Model.PermitNo',
                ModifiedBy: '@HCF.Web.Base.UserSession.CurrentUser.UserId',
                SpeceObject: "",
                ImageObject: "",
                RedlineObject: "",
                DrawingObjectType: 0
            };

        $(document).ready(function () {



            //$(document).html();
            // Set CADViewer with full CADViewer Pro features
            cvjs_CADViewerPro(true);
            cvjs_debugMode(true);


            // Pass over the location of the installation, will update the internal paths
            cvjs_setServerLocationURL(ServerLocation, ServerUrl);
            cvjs_PrintToPDFWindowRelativeSize(0.8);
            cvjs_setFileModalEditMode(false);

            //// http://127.0.0.1:8081/html/CADViewer_json_610.html?drawing_name=/home/mydrawing.dgn&dgn_workspace=/home/workspace.txt&json_location=c:/nodejs/cadviewer/content/helloworld.json&print_modal_custom_checkbox=add_json

            //// IF CADVIEWER IS OPENED WITH A URL  http://localhost/cadviewer/html/CADViewer_sample_610.html?drawing_name=../content/drawings/dwg/hq17.dwg
            ////  or CADViewer_sample_610.html?drawing_name=http://localhost/cadviewer/content/drawings/dwg/hq17.dwg
            ////  this code segment will pass over the drawing_name to FileName for load of drawing



            cvjs_emailSettings_PDF_publish("From CAD Server", "my_from_address@mydomain.com", "my_cc_address@mydomain.com", "my_reply_to@mydomain.com");
            cvjs_setInsertImageObjectsAbsolutePath(ServerUrl + 'content/inserted_image_objects/', ServerLocation + '/content/inserted_image_objects/');

            // CHANGE LANGUAGE - DEFAULT IS ENGLISH
            cvjs_loadCADViewerLanguage("English", "/app/cv/cv-pro/language_table/cadviewerProLanguage.xml");
            // Available languages:  "English" ; "French, "Korean", "Spanish", "Portuguese", "Portuguese (Brazil)" ;  "Russian" ; "Malay" ;  "Chinese-Simplified"



            cvjs_setTopMenuXML("floorPlan", "cadviewer_full_commands_01.xml", "/app/cv/cv-pro/menu_config/");



            // SETTINGS OF THE COLORS OF SPACES
            cvjsRoomPolygonBaseAttributes = {
                fill: '#D3D3D3',   // #FFF   #ffd7f4
                "fill-opacity": "0.15",   // 0.1
                stroke: '#CCC',
                'stroke-width': 1,
                'stroke-linejoin': 'round',
            };

            cvjsRoomPolygonHighlightAttributes = {
                fill: '#a4d7f4',
                "fill-opacity": "0.5",
                stroke: '#a4d7f4',
                'stroke-width': 3
            };

            cvjsRoomPolygonSelectAttributes = {
                fill: '#5BBEF6',
                "fill-opacity": "0.5",
                stroke: '#5BBEF6',
                'stroke-width': 3
            };


            var my_cvjsPopUpBody = "";



            cvjs_setCallbackForModalDisplay(true, myCustomPopUpBody, populateMyCustomPopUpBody);

            // Initialize CADViewer - needs the div name on the svg element on page that contains CADViewerJS and the location of the
            // And we intialize with the Space Object Custom values
            cvjs_InitCADViewer_highLight_popUp_app("floorPlan", ServerUrl + "app/", cvjsRoomPolygonBaseAttributes, cvjsRoomPolygonHighlightAttributes, cvjsRoomPolygonSelectAttributes, my_cvjsPopUpBody);





            // set the location to license key, typically the js folder in main app application folder ../app/js/
            cvjs_setLicenseKeyPath(ServerUrl + "/app/cv/");


            cvjs_allowFileLoadToServer(true);



            cvjs_setRedlinesAbsolutePath(ServerUrl + '/content/redlines/fileloader_610/', ServerLocation + '/content/redlines/fileloader_610/');



            // cvjs_setServerFileLocation(ServerLocation+'/content/drawings/dwg/', '../content/drawings/dwg/', ServerUrl+'/content/drawings/dwg/',"","");
            cvjs_setServerFileLocation_AbsolutePaths(ServerLocation + '/content/drawings/dwg/', ServerUrl + 'content/drawings/dwg/', "", "");
            // NOTE AViewerModeViewerModeViewerModeBOVE: THESE SETTINGS ARE FOR SERVER CONTROLS FOR UPLOAD OF FILES AND FILE MANAGER



            // NOTE BELOW:PermitNo THESE SETTINGS ARE FOR SERVER CONTROLS OF SPACE OBJECTS
            // Set the path to folder location of Space Objects
            cvjs_setSpaceObjectsAbsolutePath(ServerUrl + '/content/spaceObjects/demoUsers/', ServerLocation + '/content/spaceObjects/demoUsers/');
            // NOTE ABOVE: THESE SETTINGS ARE FOR SERVER CONTROLS OF SPACE OBJECTS

            // NOTE BELOW: THESE SETTINGS ARE FOR SERVER CONTROLS FOR CONVERTING DWG, DXF, DWF files

            // settings of Converter Path, Controller and Converter Name are done in the XXXHandlerSettings.js files

            cvjs_conversion_clearAXconversionParameters();
            cvjs_conversion_addAXconversionParameter("last", "");
            cvjs_conversion_addAXconversionParameter("fpath", ServerLocation + "/converters/ax2020/windows/fonts/");


            cvjs_conversion_addAXconversionParameter("RL", "IDB");
            cvjs_conversion_addAXconversionParameter("TL", "IDB_REF");


            // NOTE ABOVE: THESE SETTINGS ARE FOR SERVER CONTROLS FOR CONVERTING DWG, DXF, DWF files


            // Load file - needs the svg div name and name and path of file to load
            cvjs_LoadDrawing("floorPlan", FileName);

            // set maximum CADViewer canvas side
            cvjs_resizeWindow_position("floorPlan");
            // alternatively set a fixed CADViewer canvas size
            //	cvjs_resizeWindow_fixedSize(800, 600, "floorPlan");
            //debugger;


            //cvjs_setServerLoadHandlerRedlines("LoadRedlinesHandler.ashx?drawingType=2");


            debugger;

            //use this method to load Image drawings
           // cvjs_loadAllImageLinksUser();

            //use this method to load Image drawings
           // cvjs_loadStickyNotesRedlinesUser();

        });

        function cvjs_loadAllImageLinksUser() {
               alert();
              drawingViewer.DrawingObjectType = '@Convert.ToInt32(HCF.BDO.Enums.DrawingObjectType.ImageObject)';
              cvjs_loadAllImageLinks("floorPlan", JSON.stringify(drawingViewer));
           }

        function cvjs_loadAllImageLinksUser() {
                debugger;
               // drawingViewer.DrawingObjectType = '@Convert.ToInt32(HCF.BDO.Enums.DrawingObjectType.ImageObject)';
              //  cvjs_loadAllImageLinks("floorPlan", JSON.stringify(drawingViewer));
            }

        function cvjs_loadAllImageLinksUser() {
                debugger;
                 drawingViewer.DrawingObjectType = '@Convert.ToInt32(HCF.BDO.Enums.DrawingObjectType.ImageObject)';
                cvjs_loadAllImageLinks("floorPlan", JSON.stringify(drawingViewer));
            }

        function startMethodRed() {

            //var v1 = $('#load_redline_url').val();
            //var v2 = $('#save_redline_url').val();

            //debugger;
             //cvjs_setStickyNoteRedlineUrl(ServerLocation + "/content/redlines/fileloader_610/area29.js");
            // cvjs_setStickyNoteSaveRedlineUrl(ServerLocation + "/content/redlines/fileloader_610/area29.js");
            //cvjs_setStickyNoteRedlineUrl(JSON.stringify(drawingViewer));
           // cvjs_setStickyNoteSaveRedlineUrl(JSON.stringify(drawingViewer));
        }

        $(window).resize(function () {
            // set maximum CADViewer canvas side
            cvjs_resizeWindow_position("floorPlan");
            // alternatively set a fixed CADViewer canvas size
            //	cvjs_resizeWindow_fixedSize(800, 600, "floorPlan");
        });

        function cvjs_OnLoadEnd() {
            // generic callback method, called when the drawing is loaded
            // here you fill in your stuff, call DB, set up arrays, etc..
            // this method MUST be retained as a dummy method! - if not implemeted -

            cvjs_resetZoomPan("floorPlan");

            var user_name = "@HCF.Web.Base.UserSession.CurrentUser.Name";
            var user_id = "@HCF.Web.Base.UserSession.CurrentUser.UserId";

            // set a value for redlines
            cvjs_setCurrentStickyNoteValues_NameUserId(user_name, user_id);
            cvjs_setCurrentRedlineValues_NameUserid(user_name, user_id);

            cvjs_dragBackgroundToFront_SVG("floorPlan");
            cvjs_initZeroWidthHandling("floorPlan", 1.0);



            cvjs_loadAllImageLinks("floorPlan");

            cvjs_loadStickyNotesRedlinesUser();
        }

        function cvjs_OnLoadEndRedlines() {

            cvjs_hideAllRedlines_HiddenUsersList();

            // I am freezing users added to the lock user list
            cvjs_lockAllRedlines_LockedUsersList();


            var user_name = "@HCF.Web.Base.UserSession.CurrentUser.Name";
            var user_id = "@HCF.Web.Base.UserSession.CurrentUser.UserId";

            // set a value for redlines
            cvjs_setCurrentStickyNoteValues_NameUserId(user_name, user_id);
            cvjs_setCurrentRedlineValues_NameUserid(user_name, user_id);


        }

        function cvjs_change_space() {

            //window.alert("cvjs_change_space ");


            }

        function cvjs_changeSpaceObjectDisplayMode(floorplan_div, displayModal) {
                debugger;
            }

        function cvjs_graphicalObjectOnChange(type, graphicalObject, spaceID) {
                debugger;
                if (graphicalObject.toLowerCase().indexOf('redline') > -1 || graphicalObject.toLowerCase().indexOf('stickynote') > -1) {
                    drawingViewer.DrawingObjectType = 2;
                    var drawingViewerObj = JSON.stringify(drawingViewer);
                    if (type == "Create" || type == "Edit" || type == "Move") {
                        cvjs_saveStickyNotesRedlines("floorPlan", false, drawingViewerObj);
                        //cvjs_saveStickyNotesRedlinesUser();
                    } else if (type == "Click") {
                        var objectData = cvjs_getSpaceObjectNodefromId(spaceID)
                        console.log(objectData);
                        //alert(spaceID);
                    } else if (type == "Delete" && graphicalObject.toLowerCase().indexOf('redline') > -1) {
                        swal({
                            html: true,
                            title: "Are you sure?",
                            text: "Do you want to delete this object.",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Yes, delete it!",
                            closeOnConfirm: true
                        },
                            function () {
                                cvjs_saveStickyNotesRedlines("floorPlan", false, drawingViewerObj);
                            });
                    } else if (type == "Delete" && graphicalObject.toLowerCase().indexOf('stickynote') > -1) {
                        cvjs_saveStickyNotesRedlines("floorPlan", false, drawingViewerObj);
                    }
                } else if (graphicalObject.toLowerCase().indexOf('imagelink') > -1 && type == "Create") {
                    drawingViewer.DrawingObjectType = 3;
                    var drawingViewerObj = JSON.stringify(drawingViewer);
                    cvjs_saveAllImageLinks("floorPlan", drawingViewerObj);
                }


            };

        function cvjs_graphicalObjectCreated(graphicalObject, object2) {
             debugger;
            //  window.alert(graphicalObject);
            //console.log(graphicalObject, object2)
            // cvjs_saveStickyNotesRedlinesUser();
        }

        function cvjs_saveStickyNotesRedlinesUser() {


            startMethodRed();
            // API call to save stickynotes and redlines
            cvjs_saveStickyNotesRedlines("floorPlan");
        }

        function cvjs_loadStickyNotesRedlinesUser() {


            startMethodRed();
            //debugger;
             drawingViewer.DrawingObjectType = '@Convert.ToInt32(HCF.BDO.Enums.DrawingObjectType.RedlineObject)';
            // API call to load stickynotes and redlines
            cvjs_loadStickyNotesRedlines("floorPlan", JSON.stringify(drawingViewer));
        }

        var cvjsPopUpBody;

        function myCustomPopUpBody(rmid) {
            // template pop-up modal body
            cvjsPopUpBody = "<div>Space Id: <span id=\"mymodal_name_" + rmid + "\" ></span><br>";
            cvjsPopUpBody += "Survey: <span id=\"mymodal_survey_" + rmid + "\" ></span><br>";
            cvjsPopUpBody += "Notice: <span id=\"mymodal_notice_" + rmid + "\" ></span><br>";
            //		cvjsPopUpBody += "Status: <div class=\"cvjs_callback_modal_1\" onclick=\"my_own_clickmenu1("+rmid+");\"><i class=\"glyphicon glyphicon-transfer\"></i>More Info </div>";
            cvjsPopUpBody += "Status: <a href=\"javascript:my_own_clickmenu1('" + rmid + "');\">More Info <i class=\"glyphicon glyphicon-transfer\" onclick=\"my_own_clickmenu1(" + rmid + ");\"></i></a> ";

            return cvjsPopUpBody;
        }

        function populateMyCustomPopUpBody(rmid, node) {

            var rmid_str = rmid.toString();

            var str = " " + rmid;
            var link = "#mymodal_name_" + rmid;
            $(link).html(str);

            if ((rmid_str.indexOf("05A") == 0) || (rmid_str.indexOf("41") == 0) || (rmid_str.indexOf("38") == 0))
                str = " Presumed Wall Void";
            else
                str = " Presumed Ceiling Void";

            link = "#mymodal_survey_" + rmid;
            $(link).html(str);


            if ((rmid_str.indexOf("05A") == 0) || (rmid_str.indexOf("41") == 0) || (rmid_str.indexOf("38") == 0))
                str = " Service Alert";
            else
                str = " Evaluation Pending";

            link = "#mymodal_notice_" + rmid;
            $(link).html(str);

        }

        function cvjs_ObjectSelected(rmid) {
            window.alert(rmid);
        }

        function cvjs_callbackForModalDisplay(rmid, node) {

            window.alert("WE call our server, then we update the modal" + rmid + "  " + node);
            populateMyCustomPopUpBody(rmid, node);
        }

        function cvjs_EmailSentStatus(html) {
                debugger;
                swalalert(html);
            }

        </script>

    }
    else
    {
        <span>
            No Floor plan found
        </span>

    }-->*@
