@model IEnumerable<HCF.BDO.InspectionEPDocs>

@{
    //HCF.Web.Base.Common common = new HCF.Web.Base.Common();
    List<string> filepathlist = new List<string>(); ;
}
@using (Html.BeginForm("DocumentReport", "Pdf"))
{
    <button type="submit" class="buttons-pdf hidden" id="DownloadDocumentReport" title="Download pdf with attachments"></button>
}

<table id="c_myTable" class="table table-bordered table-striped " style="width:100%;">
    <thead>
        <tr>
            <th style="display:none">Status</th>
            <th style="display:none">CategoryId</th>
            <th style="display:none">status</th>
            <th width="15%">
                Document Type
            </th>
            <th width="50%">
                File Name
            </th>
            <th width="15%">
                Document Name
            </th>
            <th width="10%" style="display:none">
                Next Due
            </th>

            <th width="10%">
                Uploaded date
            </th>
            <th width="10%">
                Uploaded By
            </th>
            <th width="15%">
                Standard, EP
            </th>
            <th>
                History
            </th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model.OrderByDescending(x => x.CreatedDate))
        {
            <tr>
                <td style="display:none"></td>
                <td style="display:none">@Html.DisplayFor(modelItem => item.EPDetail.Standard.CategoryId)</td>
                <td style="display:none">
                    @if (item.DocumentType != null)
                    {
                        <label>@commonModelFactory.GetTranStatus(item.DocumentType.Status)</label>
                    }
                </td>

                <td>
                    @if (item.UploadDocTypeId == 106)
                    {<span>Policies</span>
                    }
                    else if (item.UploadDocTypeId == 107)
                    {<span>Report</span> }
                    else if (item.UploadDocTypeId == 108)
                    { <span>Misc.Docs</span>}
                    else if (item.UploadDocTypeId == 4)
                    { <span>Asset Report</span>}
                    else
                    { <span></span>}
                </td>
                @{
                    string value = @commonModelFactory.FilePath(item.Path).ToString();
                    filepathlist.Add(value);
                    ///Session["attachedfilepaths"] = filepathlist;
                }
                <td class="align-left">
                    <a href="@commonModelFactory.FilePath(item.Path)" target="_blank">
                        <img src="@commonModelFactory.UploadDocTypeImagePath(item.UploadDocTypeId,item.DocTypeId)" alt="@item.DocumentName" id='@item.TInsDocs' />
                    </a>
                    @item.DocumentName
                </td>
                @if (item.DocumentType != null)
                {
                    <td>@item.DocumentType.Name</td>
                }
                else
                {
                    <td> </td>
                }
                <td style="display:none" data-sort="@item.ExpiredDate.DateSort()">
                    @if (item.DocTypeId.HasValue)
                    {
                        <span>@item.ExpiredDate.Value.ToClientTime().ToFormatDate()</span>
                    }

                </td>



                <td data-sort="@item.CreatedDate.Ticks">
                    @item.CreatedDate.ToClientTime().ToFormatDate()

                </td>
                <td>
                    @item.UserProfile.FullName

                </td>
                <td>
                    <a href='@Url.Action("EpDocs", "Reports", new { epDetailId = item.EPDetail.EPDetailId })'>
                        @item.EPDetail.StandardEp
                    </a>
                </td>
                <td>
                    <a href='@(item.UploadDocTypeId != 109? Url.Action("DocActivityHistory", "assets", new { activityId = item.ActivityId }) : commonModelFactory.FilePath(item.Path))'>
                        <img src="@Url.Content(HCF.Web.Models.ImagePathModel.HistoryIcon)" />
                    </a>
                </td>
            </tr>
        }
        @*@Html.ActionLink("Download Files", "Download", "Reports", new { @id = "downloadAttachments" })*@
    </tbody>
</table>

<script>
    var combinevaluearr = [];
    $(document).ready(function () {
        var from = $("#from").val();
        var todate = $("#todate").val();
        //$('[data-toggle="tooltip"]').tooltip();
        var documenttype = $("#drpDocumenttype").val();
        combinevaluearr.push(from);
        combinevaluearr.push(todate);
        combinevaluearr.push(documenttype);
        $(".comment").shorten({
            "showChars": 150,
            "moreText": "See More",
        });
        var dataTables = $('#c_myTable').DataTable({
        "lengthChange": false,
        "aaSorting": [],
        "pageLength": 20,
            "bPaginate": $('#c_myTable tbody tr').length > 20,
        "bInfo": false,
        "oSearch": { "bSmart": false },
        //"order": [[3, "desc"]],
        "language": {
            "emptyTable": "No data available in table",
            "search": "_INPUT_",
            "searchPlaceholder": "Search.."
        },
        dom: "<'row'<'col-sm-3'l><'col-sm-3'><'col-sm-6'p>>" +
            "<'row'<'col-sm-12'<'table-responsive'tr>>>" +
            "<'row'<'col-sm-5 float-right'i>>" + "Blfrtip",
        buttons: [
            {
                extend: 'pdfHtml5',
                orientation: 'portrait',
                //pageSize:'LEGAL',
                title: 'Document Report',
                exportOptions: {
                    columns: [3, 4, 5, 6, 7, 8]
                },
                messageBottom: function () {
                    return $("#dvgeneratedby").text();
                },
                customize: function (doc) {
                    //genereateRpeort(doc)
                    //Remove the title created by datatTables
                    doc.content.splice(0, 1);
                    //Create a date string that we use in the footer. Format is dd-mm-yyyy
                    var now = new Date();
                    var jsDate = setDateFormat(now);
                    //var jsDate = now.getDate() + '-' + (now.getMonth() + 1) + '-' + now.getFullYear();
                    // Logo converted to base64
                    //var logo = $("#logoimgbase64").val();
                    var logo = localStorage.getItem("logoimgbase64");//getBase64FromImageUrl();
                    //console.log(logo);
                    // The above call should work, but not when called from codepen.io
                    // So we use a online converter and paste the string in.
                    // Done on http://codebeautify.org/image-to-base64-converter
                    // It's a LONG string scroll down to see the rest of the code !!!
                    //var logo = '';
                    // A documentation reference can be found at
                    // https://github.com/bpampuch/pdfmake#getting-started
                    // Set page margins [left,top,right,bottom] or [horizontal,vertical]
                    // or one number for equal spread
                    // It's important to create enough space at the top for a header !!!
                    doc.pageMargins = [20, 60, 20, 30];
                    // Set the font size fot the entire document
                    doc.defaultStyle.fontSize = 10;
                    // Set the fontsize for the table header
                    doc.styles.tableHeader.fontSize = 10;

                    doc.content[0].table.widths = [120, 50, 120, 50,50,"*"];
                    // Create a header object with 3 columns
                    // Left side: Logo
                    // Middle: brandname
                    // Right side: A document title
                    doc['header'] = (function () {
                        return {
                            columns: [
                                { image: logo, width: 40 },
                                {
                                    alignment: 'left',
                                    italics: true,
                                    text: '',
                                    fontSize: 14,
                                    margin: [0, 6, 0, 0],
                                    width: 200,
                                },
                                {
                                    alignment: 'middle',
                                    fontSize: 14,
                                    text: getOrgName('@HCF.Web.Base.UserSession.CurrentOrg.Name') + '\n Document Report',
                                    margin: [0, 6, 0, 0]
                                }
                            ],
                            margin: 20
                        }
                    });
                    // Create a footer object with 2 columns
                    // Left side: report creation date
                    // Right side: current page and total pages
                    doc['footer'] = (function (page, pages) {
                        return {
                            columns: [
                                {
                                    alignment: 'left',
                                    text: ['Created on: ', { text: jsDate.toString() }]
                                },
                                {
                                    alignment: 'right',
                                    text: ['Generated from: ', { text: 'CRx' }]
                                },
                                {
                                    alignment: 'right',
                                    text: ['Generated by: ', { text: '@HCF.Web.Base.UserSession.CurrentUser.Name' }]
                                },
                                {
                                    alignment: 'right',
                                    text: [{ text: page.toString() }, ' of ', { text: pages.toString() }]
                                }
                            ],
                            margin: [20, 0, 20, 0]
                        }
                    });
                    // Change dataTable layout (Table styling)
                    // To use predefined layouts uncomment the line below and comment the custom lines below
                    // doc.content[0].layout = 'lightHorizontalLines'; // noBorders , headerLineOnly
                    var objLayout = {};
                    objLayout['hLineWidth'] = function (i) { return .5; };
                    objLayout['vLineWidth'] = function (i) { return .5; };
                    objLayout['hLineColor'] = function (i) { return '#aaa'; };
                    objLayout['vLineColor'] = function (i) { return '#aaa'; };
                    objLayout['paddingLeft'] = function (i) { return 4; };
                    objLayout['paddingRight'] = function (i) { return 4; };
                    doc.content[0].layout = objLayout;
                }
            },
            {
                extend: 'excel',
                title: 'Document Report',
                messageBottom: function () {
                    return $("#dvgeneratedby").text();
                },
                exportOptions: {
                    columns: [3, 4, 5, 6, 7, 8],
                    orthogonal: 'export'
                }
            }
            ],
            drawCallback: function () {
                var hasRows = this.api().rows({ filter: 'applied' }).data().length > 0;
                $('.buttons-pdf')[0].style.visibility = hasRows ? 'visible' : 'hidden'
            }
    });

        $('.dt-button.buttons-pdf.buttons-html5').attr('title', 'Download PDF');
        $('.dt-button.buttons-excel.buttons-html5').attr('title', 'Download Excel');
        

        $('#btn_all').on('click', function () {
            localStorage.setItem("btnValue", "");
            Searching();
        });

        $('#btn_pastdue').on('click', function () {
            localStorage.setItem("btnValue", "-1");
            Searching();
        });

        $("input[name=EPCat]:radio").change(function () {
            var catId = $("input[name='EPCat']:checked").val();
            localStorage.setItem("EPCatId", catId);
            Searching();
        });

        $('.filter_due_within').on('click', function () {
            var days = parseInt($(this).text());
            $("#btn_dueWithin").val("Due with in " + days + " Days")
            localStorage.setItem("CustomSearch", true);
            localStorage.setItem("Datein", days);
            dataTables.draw();
            localStorage.setItem("CustomSearch", "");
        })

        $('#btn_upcoming').on('click', function () {
            localStorage.setItem("CustomSearch", true);
            localStorage.setItem("Datein", 90);
            dataTables.draw();
            localStorage.setItem("CustomSearch", "");
        });

       

        function Searching() {
            var catId = localStorage.getItem("EPCatId");
            var status = localStorage.getItem("btnValue");
            if (catId == null || catId == 0) {
                catId = "";
                if (status == null) {
                    status = ""
                }
            } else if (status == null) {
                status = "";
            }
            dataTables.columns(0).search(status).columns(1).search(catId).draw();
        }


    });

    $('#drpDocumenttype').on('change', function () {
        var id = $(this).val();
        if (id != "") {
            dataTables.column(7).search("^" + id + "$", true, true, false).draw();
        } else {
            dataTables.columns(7).search("").draw();
        }
    });

    /* Custom filtering function which will search data in column four between two values */
    $.fn.dataTable.ext.search.push(
        function (settings, data, dataIndex) {
            debugger
            var status = localStorage.getItem("CustomSearch");
            if (status == "true") {
                var catId = parseInt(localStorage.getItem("EPCatId"));
                var dueWithin = parseInt(localStorage.getItem("Datein"));
                var InspectionDate = new Date(data[3]);
                var EPCatId = parseFloat(data[0]);
                var add_currentDate = new Date();
                // to add 4 days to current date
                add_currentDate.addDays(dueWithin);
                var currentDate = new Date();
                if (InspectionDate != null && catId > 0) {
                    if ((InspectionDate > currentDate && InspectionDate <= add_currentDate) && EPCatId == catId) {
                        return true;
                    }
                }
                else if (InspectionDate != null) {
                    if (InspectionDate > currentDate && InspectionDate <= add_currentDate) {
                        return true;
                    }
                }
                else {
                    return false;
                }
            }
            else { return true }
            return false;
        }
    );



    Date.prototype.addDays = function (days) {
        this.setDate(this.getDate() + parseInt(days));
        return this;
    };
</script>
<style>
    div.dt-buttons {
        position: absolute !important;
        left: 0;
        top: 6px;
    }
</style>