@model IEnumerable<HCF.BDO.TFloorAssets>


<table id="c_myTable" class="table table-bordered table-striped">
    <thead>
        <tr>
            <th style="display:none">Status</th>
            <th style="display:none">CategoryId</th>
            <th style="display:none">Year</th>
            <th style="display:none">AssetId</th>
            <th width="115">
                Asset Name
            </th>
            <th width="115">
                @Localizer["AssetNo"]
            </th>
            <th>
                Location
            </th>
            <th width="115">
                @Localizer["NearBy"]
            </th>
            <th>
                Standard,EP
            </th>
            @*<th>
                    Responsible
                </th>*@
            <th>
                @Localizer["LastInspectionDate"]
            </th>
            <th>
                Detail
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            if (!item.EPDetails.Any())
            {
                <tr>
                    <td style="display:none"></td>
                    <td style="display:none"></td>
                    <td style="display:none"></td>
                    <td style="display:none">@item.Assets.AssetId</td>
                    <td>
                        @item.Assets.Name
                    </td>
                    <td>
                        @item.AssetNo
                    </td>

                    <td>
                        @commonModelFactory.GetFloorAssetLocation(item)
                    </td>
                    <td>
                        @item.NearBy
                    </td>
                    <td></td>
                    @*<td></td>*@
                    <td></td>
                    <td></td>
                </tr>
            }
            else
            {
                foreach (var epdetails in item.EPDetails)
                {
                    <tr>
                        <td style="display:none">
                            @Html.DisplayFor(modelItem => epdetails.TInspectionActivity.FirstOrDefault().Status)
                        </td>
                        <td style="display:none">@Html.DisplayFor(modelItem => epdetails.Standard.CategoryId)</td>
                        @if (epdetails.TInspectionActivity.Count > 0 && epdetails.TInspectionActivity.FirstOrDefault() != null 
                            && epdetails.TInspectionActivity.FirstOrDefault().ActivityInspectionDate.HasValue)
                        {
                            <td style="display:none">@epdetails.TInspectionActivity.FirstOrDefault()?.ActivityInspectionDate.Value.ToString("yyyy")</td>
                        }
                        else
                        {
                            <td style="display:none"></td>
                        }
                        <td style="display:none">@item.Assets.AssetId</td>
                        <td>
                            @item.Assets.Name
                        </td>
                        <td>
                            @item.AssetNo
                        </td>

                        <td>
                            @commonModelFactory.GetFloorAssetLocation(item)
                        </td>
                        <td width="30px">
                            @item.NearBy
                        </td>
                        <td>
                            @commonModelFactory.GetEpStandard(epdetails)
                        </td>
                       

                        @if (epdetails.TInspectionActivity.Count > 0)
                        {
                            <td>
                                @epdetails.TInspectionActivity.FirstOrDefault().CreatedDate.Value.ToClientTime().ToFormatDateTime()
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }

                        <td>
                            @if (epdetails.TInspectionActivity.Count > 0)
                            {
                                <img onclick="location.href ='@Url.Action("ActivityHistory", "Assets", new { activityId = epdetails.TInspectionActivity.FirstOrDefault().ActivityId })'"
                                     src="@Url.Content(HCF.Web.Models.ImagePathModel.DetailIcon)" />
                            }
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
<div style="display:none">
    <span id="dvgeneratedby">
        @($"{Localizer["PrintGeneratedFromTitle"]} : {Localizer["PrintGeneratedFromText"]} \n\n\n {Localizer["PrintGeneratedByTitle"]} : {HCF.Web.Base.UserSession.CurrentUser.Name}")

        @*@string.Format("{0} : {1}", "\n\n\n Generated From: CRx    Generated by", HCF.Web.Base.UserSession.CurrentUser.Name)*@
    </span>
</div>
<script>
    $(document).ready(function () {
        //localStorage.clear();

        $(".comment").shorten({
            "showChars": 150,
            "moreText": "See More",
        });
        var dtable = $('#c_myTable').DataTable({
            "lengthChange": false,
            "aaSorting": [[7, 'desc']],
            "pageLength": 20,
            "bPaginate": $('#c_myTable tbody tr').length > 20,
            "bInfo": false,
            "oSearch": { "bSmart": false },
            "language": {
                "emptyTable": "No data available in table",
                "search": "_INPUT_",
                "searchPlaceholder": "Search.."
            },
            dom: "<'row'<'col-sm-3'l><'col-sm-3'><'col-sm-6'f p>>" +
                "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-5'i>>" + "Blrtip",
           
            buttons: [
                {
                    extend: 'pdfHtml5',
                    orientation: 'portrait',
                    //pageSize:'LEGAL',
                    title: 'Compliance/Non-compliance Report',
                    exportOptions: {
                        columns: [4, 5, 6, 7, 8]
                    },
                    messageBottom: function () {
                        return $("#dvgeneratedby").text();
                    },
                    customize: function (doc) {
                        //genereateRpeort(doc)
                        //Remove the title created by datatTables
                        doc.content.splice(0, 1);
                        //Create a date string that we use in the footer. Format is dd-mm-yyyy
                        var now = new Date();
                        var jsDate = setDateFormat(now);
                        //var jsDate = now.getDate() + '-' + (now.getMonth() + 1) + '-' + now.getFullYear();
                        // Logo converted to base64
                        //var logo = $("#logoimgbase64").val();
                        debugger;
                        var logo = localStorage.getItem("logoimgbase64");//getBase64FromImageUrl();
                        //console.log(logo);
                        // The above call should work, but not when called from codepen.io
                        // So we use a online converter and paste the string in.
                        // Done on http://codebeautify.org/image-to-base64-converter
                        // It's a LONG string scroll down to see the rest of the code !!!
                        //var logo = '';
                        // A documentation reference can be found at
                        // https://github.com/bpampuch/pdfmake#getting-started
                        // Set page margins [left,top,right,bottom] or [horizontal,vertical]
                        // or one number for equal spread
                        // It's important to create enough space at the top for a header !!!
                        doc.pageMargins = [20, 60, 20, 30];
                        // Set the font size fot the entire document
                        doc.defaultStyle.fontSize = 8;
                        // Set the fontsize for the table header
                        doc.styles.tableHeader.fontSize = 7;
                        // Create a header object with 3 columns
                        // Left side: Logo
                        // Middle: brandname
                        // Right side: A document title
                        doc['header'] = (function () {
                            return {
                                columns: [
                                    { image: logo, width: 40 },
                                    {
                                        alignment: 'left',
                                        italics: true,
                                        text: getOrgName('@HCF.Web.Base.UserSession.CurrentOrg.Name'), @*text: '@HCF.Web.Base.UserSession.CurrentOrg.Name',*@
                                        fontSize: 14,
                                        margin: [0, 6, 0, 0],
                                        width: 200,
                                    },
                                    {
                                        alignment: 'middle',
                                        fontSize: 14,
                                        text: 'Assets Report',
                                        margin: [0, 6, 0, 0]
                                    }
                                ],
                                margin: 20
                            }
                        });
                        // Create a footer object with 2 columns
                        // Left side: report creation date
                        // Right side: current page and total pages
                        doc['footer'] = (function (page, pages) {
                            return {
                                columns: [
                                    {
                                        alignment: 'left',
                                        text: ['Created on: ', { text: jsDate.toString() }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated from: ', { text:  'CRx' }]
                                    },
                                    {
                                        alignment: 'right',
                                        text: ['Generated by: ', { text: '@HCF.Web.Base.UserSession.CurrentUser.Name'} ]
                                    },                                   
                                    {
                                        alignment: 'right',
                                        text: [{ text: page.toString()},' of ',{ text: pages.toString()}]
                                    }                                
                                ],
                                margin: 20
                            }
                        });
                        // Change dataTable layout (Table styling)
                        // To use predefined layouts uncomment the line below and comment the custom lines below
                        // doc.content[0].layout = 'lightHorizontalLines'; // noBorders , headerLineOnly
                        var objLayout = {};
                        objLayout['hLineWidth'] = function (i) { return .5; };
                        objLayout['vLineWidth'] = function (i) { return .5; };
                        objLayout['hLineColor'] = function (i) { return '#aaa'; };
                        objLayout['vLineColor'] = function (i) { return '#aaa'; };
                        objLayout['paddingLeft'] = function (i) { return 4; };
                        objLayout['paddingRight'] = function (i) { return 4; };
                        doc.content[0].layout = objLayout;
                    }
                },
                {
                    extend: 'excel',
                    title: 'Assets Report',
                    messageBottom: function () {
                        return $("#dvgeneratedby").text();
                    },
                    exportOptions: {
                        columns: [4, 5, 6, 7, 8],
                        orthogonal: 'export'
                    }
                }
            ]
        });
        

        $('.dt-button.buttons-pdf.buttons-html5').attr('title', 'Download PDF');
        $('.dt-button.buttons-excel.buttons-html5').attr('title', 'Download Excel');

        $('#btn_all').on('click', function () {
            localStorage.setItem("btnValue", "");
            Searching();
        });

        $("input[name=EPCat]:radio").change(function () {
            var catId = $("input[name='EPCat']:checked").val();
            localStorage.setItem("EPCatId", catId);
            Searching();
        });

        function Searching() {
            var catId = localStorage.getItem("EPCatId");
            var status = localStorage.getItem("btnValue");
            if (catId == null || catId == 0) {
                catId = "";
                if (status == null) {
                    status = ""
                }
            } else if (status == null) {
                status = "";
            }
            dtable.columns(0).search(status).columns(1).search(catId).draw();
        }
        




    });
</script>
<style>
    table#c_myTable {
        width: 100% !important;
    }

    .assetsshortingBox {
        display: flex;
        justify-content: space-between;
        overflow: hidden;
        margin-bottom: 15px;
        align-items: center;
    }

    .selectyear-box {
        display: flex;
        width: 50%;
    }

    .btneoc {
        width: auto;
    }

    .dt-buttons {
        position: absolute !important;
        top: 4px;
        left: 0;
    }

    
    
</style>