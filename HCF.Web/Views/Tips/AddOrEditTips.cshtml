@model HCF.BDO.Tips

@{
    /**/

    var Title = Model.TipId > 0 ? "Edit Tip" : "Add Tip";
    ViewBag.Title = Title;

    var tipHelpMessage = Model.TipId > 0 ? "" : "(Please fill the below details for Tip Approval.)";
}


@section pageHeader{
    <section class="content-header">
        <h1>
            @Title
        </h1>
    </section>
}
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <div class="box box-primary">
                @using (Html.BeginForm("AddOrEditTips", "Tips", FormMethod.Post, new { id = "TipsAddForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="">
                        <input hidden id="RouteUrlPath" value="@Model.RouteUrl" />
                        @Html.ValidationSummary(true)
                        @Html.HiddenFor(x => x.TipId)
                        @Html.HiddenFor(x => x.CreatedBy)
                        <input type="hidden" name="IsApproved" value="2" />
                        <input type="hidden" id="tiptypeid" value="@Model.TipType" />
                        @*<input type="hidden" name="RouteName" value="" />*@

                        @*<div class="col-md-6">
                                <label>Module Tips</label><em class="required-field"> *</em>
                                @await Html.PartialAsync("_ModuleTipDDL", "SINGLE")
                                <input type="text" id="RouteUrlPath" name="RouteUrlPath" class="form-control" required />
                            </div>*@

                        <div class="form-group col-lg-6" style="padding-left:0px;">
                            <label>Module Tips</label><em class="required-field"> *</em>
                            <select name="RouteUrlPath" id="RouteUrlPath" required="required" class="form-control"></select>
                        </div>

                        <div class="form-group col-lg-6" style="padding-right:0px;">
                            <label>Tip Type</label><em class="required-field"> *</em>
                            @if (Model.TipType != 0)
                            {
                                <tiptypesdropdownlist name="TipType" selectedvalue="@Model.TipType" firsttext="Select" class="form-control disable" required="required"></tiptypesdropdownlist>
                                @*@Html.TipTypesDropDownList("TipType", (int)Model.TipType, "Select", true, new { @class = "form-control", @required = "required", @disabled = "disabled" })*@
                            }
                            else
                            {
                                <tiptypesdropdownlist name="TipType" selectedvalue="@Model.TipType" firsttext="Select" class="form-control" required="required"></tiptypesdropdownlist>

                                @*@Html.TipTypesDropDownList("TipType", (int)Model.TipType, "Select", true, new { @class = "form-control", @required = "required" })*@
                            }
                        </div>


                        <div style="margin-bottom : 15px">
                            <label>Title</label><em class="required-field"> *</em>
                            @Html.TextBoxFor(x => x.Title, new { @class = "form-control Spacevalid", placeholder = "Enter title for tip", required = "required" })
                        </div>

                        <div class="form-group">
                            <label>Description</label><em class="required-field"> *</em>
                            @Html.TextAreaFor(x => x.Description, new { @class = "form-control", name = "description", placeholder = "Enter description for tip", required = "required" })

                        </div>
                        <div class="ContributorBox" id="contributerbox">
                            <fieldset>
                                <legend>Contributor</legend>
                                <div class="row">
                                    <div class="form-group col-lg-3">
                                        <label>Contributor Name:</label>
                                        @Html.TextBoxFor(x => x.ContributorName, new { @class = "form-control Spacevalid", placeholder = "Enter Contributor name for tip" })
                                    </div>
                                    <div class="form-group col-lg-1">
                                        <div class="chkShow">
                                            Show: @Html.EditorFor(x => x.ShowContributorName, new { @class = "form-control", required = "" })<span></span>
                                        </div>
                                    </div>


                                    <div class="form-group col-lg-3">
                                        <label>Contributor Org:</label>
                                        @Html.TextBoxFor(x => x.ContributorOrg, new { @class = "form-control Spacevalid", placeholder = "Enter Contributor org for tip" })
                                    </div>
                                    <div class="form-group col-lg-1">
                                        <div class="chkShow">
                                            @Html.EditorFor(x => x.ShowContributorOrg, new { @class = "form-control" })<span></span><label>Show</label>
                                        </div>

                                    </div>

                                    <div class="form-group col-lg-3">
                                        <label>Contributor Position:</label>
                                        @Html.TextBoxFor(x => x.ContributorPosition, new { @class = "form-control Spacevalid", placeholder = "Enter Contributor position for tip" })
                                    </div>
                                    <div class="form-group col-lg-1">
                                        <div class="chkShow">
                                            @Html.EditorFor(x => x.ShowContributorPosition, new { @class = "form-control" })<span></span><label>Show</label>
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                        <div class="form-group">

                            @Html.EditorFor(x => x.IsActive)<span></span><label>IsActive</label><small> Warning: For System Admin use only. Unchecking this box will deactivate the above tip</small>

                        </div>
                        <div class="text-right button_Div">
                            <button type="button" class="comm-button" id="btn_preview" data-dismiss="modal">Preview</button>
                            <input type="submit" value='Save' class="comm-button" />
                            <input action="action" onclick="window.history.go(-1); return false;" type="submit" value="Cancel" class="comm-Cancelbutton" />
                            @*@Html.ActionLink("Cancel ", "CancelTips", "Tips", new { @class = "comm-button" })*@
                        </div>
                    </div>

                }

            </div>
        </div>
    </div>
</div>

<div class="modal-dialog previewtext-head">
    <div class="modal fade" id="previewPopUp" role="dialog">
        <div class="modal-dialog">
            <div class="modal-header">
                <h4 class="modal-title">
                    <span class="modelTitle"> Preview </span>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </h4>
            </div>
            <div class="modal-body">
                <div id="loadpreview">
                </div>
            </div>
            <div class="modal-footer">
                <input type="submit" name="submitButton" value="Cancel" data-dismiss="modal" class="button1" />
            </div>
        </div>
    </div>
</div>
<script type="text/javascript" src="@Url.Content("~/dist/Scripts/ckeditor/ckeditor.js")"></script>

@section scripts
{
    <script src="@Url.Content("~/dist/Scripts/ckeditor/ckeditor.js")" type="text/javascript"></script>
    <script>
    $(document).ready(function () {

        //debugger;

        var selectedtip = 0;
        var id = $('#tiptypeid').val();
        if (id == "0") {

        } else {
            if (id == "HelpPageText") { selectedtip = 3  }
            else if (id == "CRxCrowdSource") { selectedtip = 2 }
            else if (id == "CrowdSource") { selectedtip = 1 }
            else if (id == "FAQHowTo") { selectedtip = 4 }
            else if (id == "CRXSuggestion") { selectedtip = 5 }
            else { selectedtip = 0 }

            $("#TipType").val(selectedtip);
            showcontributer(selectedtip);
        }

        if (selectedtip != null) {
            showcontributer(selectedtip);
        }

        $('#TipType').on('change',
            function() {
                //debugger;
                var tiptypeid = $(this).val();
                showcontributer(tiptypeid);
            });

        function showcontributer(id) {
            //debugger;
            if (id == 1) {
                $('#contributerbox').show();
            } else {
                $('#contributerbox').hide();
            }
        }

        CKEDITOR.replace('Description');

        $('#RouteUrl').val($('#RouteUrlPath').val());
    });

    $('#btn_preview').click(function () {
        //debugger;
        var text = CKEDITOR.instances['Description'].getData();
        if (text != "") {
            $('#previewPopUp').modal('show');
            $('#loadpreview').html(text);
            $('#loadpreview').fadeIn('fast');
        } else {
            swalalert('Please fill the description!');
        }
    });

    $('#TipsAddForm').submit(function () {
        var valid = true;
        var messageLength = CKEDITOR.instances['Description'].document.getBody().getText().trim().length;
        if (messageLength == 0) {
            swalalert('Please enter a Tip description!!');
            valid = false;
        }
        return valid;
    });


    $(".Spacevalid").on("keypress", function (e) {
        debugger
        if (e.which === 32 && !this.value.length)
            e.preventDefault();
    });

   $(document).ready(function () {
        //debugger;
       let htmlData = '<option value="">Select Page</option><option menutype="0" value="home_index">Home (Landing Page)</option>';
        let url = '@Url.Action("RouteUrlData", "Tips")';
        $.get(url, function (data) {
            //debugger;
            for (var item of data) {
                if (item.Item4 == "0") {
                    htmlData += '<option style="font-size:17px" parentmenu=' + item.Item3 + ' value="' + item.Item2 + '">' + item.Item1 + '</option>';
                    for (var subitem of data) {
                        if (subitem.Item4 == item.Item3) {
                            htmlData += '<option menutype='+ subitem.Item4+ ' value="' + subitem.Item2 + '">' + subitem.Item1 + '</option>';
                            for (var inneritem of data) {
                                if (inneritem.Item4 == subitem.Item3) {
                                    htmlData += '<option value="' + inneritem.Item2 + '">' + inneritem.Item1 + '</option>';
                                }
                            }
                        }
                    }
                }
            }
            for (var litem of data) {
                if (litem.Item4 == "1") {
                    //debugger;
                    htmlData += '<option style="font-size:17px" parentmenu=' + litem.Item3 + ' value="' + litem.Item2 + '">' + litem.Item1 + '</option>';
                    for (var logitem of data) {
                        if (logitem.Item4 == litem.Item3) {
                            htmlData += '<option menutype=' + logitem.Item4 + ' value="' + logitem.Item2 + '">' + logitem.Item1 + '</option>';
                        }
                    }
                }
            }
            $('select#RouteUrlPath').html('');
            $('select#RouteUrlPath').html(htmlData);
            $('select#RouteUrlPath').find('option').each(function () {
                if ($(this).next('option').attr("menutype") == $(this).attr("parentmenu")) {
                    //typeof $("#mopform").data("changed") !== 'undefined'
                    if (typeof $(this).attr("menutype") == 'undefined') {
                        $(this).attr("disabled", true);
                    }
                }
            });
             const routeUrl = '@Model.RouteUrl';
             const tipType = '@Model.TipType';
             var route = $('select#RouteUrlPath');
             route.val(routeUrl);
             //$('#TipType').val(tipType);

        });
    })


    </script>
    <style>
        div#cke_1_contents {
            height: 500px !important;
        }

        .previewtext-head .modal-header {
            height: 50px;
        }

        .previewtext-head .modal-body {
            height: calc(100% - 50px);
        }

        .previewtext-head form {
            height: 100%;
        }
    </style>

}