/*
Deployment script for HCF_MasterDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar HCF_DB "HCF"
:setvar DatabaseName "HCF_MasterDb"
:setvar DefaultFilePrefix "HCF_MasterDb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[OrgServices]...';


GO
CREATE TABLE [dbo].[OrgServices] (
    [ClientMenuMapID] INT      IDENTITY (1, 1) NOT NULL,
    [MenuID]          INT      NOT NULL,
    [OrganizationKey] INT      NOT NULL,
    [Status]          BIT      NOT NULL,
    [Createdby]       INT      NOT NULL,
    [CreatedDate]     DATETIME NOT NULL,
    [ModuleId]        INT      NULL,
    [ServiceMode]     INT      NULL,
    [TrialStartDate]  DATETIME NULL,
    [TrialEndDate]    DATETIME NULL,
    CONSTRAINT [PK__Usermenu__9675D77AE5B13470] PRIMARY KEY CLUSTERED ([ClientMenuMapID] ASC)
);


GO
PRINT N'Creating [dbo].[PasswordResetRequests]...';


GO
CREATE TABLE [dbo].[PasswordResetRequests] (
    [RequestId]       UNIQUEIDENTIFIER NOT NULL,
    [EmailAddress]    NVARCHAR (128)   NOT NULL,
    [RecoveryMethod]  CHAR (1)         NOT NULL,
    [RecoveryAddress] NVARCHAR (128)   NOT NULL,
    [RequestedOn]     DATETIME         NOT NULL,
    [RecoveryToken]   VARCHAR (128)    NOT NULL,
    [RecoveredOn]     DATETIME         NULL,
    [Status]          AS               (CASE WHEN ([RequestedOn] + (1)) >= getutcdate()
                                                  AND [RecoveredOn] IS NULL THEN 'Y' ELSE 'N' END),
    CONSTRAINT [PasswordResetRequests_PK] PRIMARY KEY CLUSTERED ([RequestId] ASC)
);


GO
PRINT N'Creating [dbo].[FrequencyMaster]...';


GO
CREATE TABLE [dbo].[FrequencyMaster] (
    [FrequencyId] INT            IDENTITY (1, 1) NOT NULL,
    [GracePeriod] INT            NULL,
    [DisplayName] NVARCHAR (250) NULL,
    [Type]        NVARCHAR (5)   NULL,
    [Value]       INT            NULL,
    [Days]        INT            NULL,
    [Version]     NVARCHAR (50)  NULL,
    [IsActive]    BIT            NOT NULL,
    [CreatedBy]   INT            NOT NULL,
    [CreateDate]  DATETIME       NOT NULL,
    CONSTRAINT [PK_FrequencyMaster] PRIMARY KEY CLUSTERED ([FrequencyId] ASC)
);


GO
PRINT N'Creating [dbo].[HospitalType]...';


GO
CREATE TABLE [dbo].[HospitalType] (
    [HospitalTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Type]           NVARCHAR (150) NULL,
    [IsActive]       BIT            NULL,
    [CreatedBy]      INT            NOT NULL,
    [CreateDate]     DATETIME       NOT NULL,
    CONSTRAINT [PK_HospitalType] PRIMARY KEY CLUSTERED ([HospitalTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[RolesInGroups]...';


GO
CREATE TABLE [dbo].[RolesInGroups] (
    [RoleId]  INT NULL,
    [GroupId] INT NULL,
    [Status]  BIT NULL
);


GO
PRINT N'Creating [dbo].[BuildVersion]...';


GO
CREATE TABLE [dbo].[BuildVersion] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Version]        NVARCHAR (20)  NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [isMajorRelease] BIT            NULL,
    [FilePath]       NVARCHAR (250) NULL,
    [isCurrent]      BIT            NULL,
    [ReleaseDate]    DATETIME       NULL,
    CONSTRAINT [PK_BuildVersions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EPDescriptions]...';


GO
CREATE TABLE [dbo].[EPDescriptions] (
    [EPDescriptionId] INT            IDENTITY (1, 1) NOT NULL,
    [EPDetailId]      INT            NULL,
    [HospitalTypeId]  INT            NULL,
    [Description]     NVARCHAR (MAX) NULL,
    [IsCurrent]       BIT            NULL,
    [CreatedBy]       INT            NULL,
    [CreatedDate]     DATETIME       NULL,
    CONSTRAINT [PK_EPDescriptions] PRIMARY KEY CLUSTERED ([EPDescriptionId] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleId]      INT            IDENTITY (1, 1) NOT NULL,
    [RoleName]    NVARCHAR (256) NOT NULL,
    [Sequence]    INT            NULL,
    [IsActive]    BIT            NULL,
    [DisplayText] NVARCHAR (256) NULL,
    [ParentId]    INT            NULL,
    [IsChild]     BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    [IsUserRole]  BIT            NULL,
    CONSTRAINT [PK__webpages__8AFACE1A9F73F73B] PRIMARY KEY CLUSTERED ([RoleId] ASC),
    CONSTRAINT [UQ__webpages__8A2B61604FDF090E] UNIQUE NONCLUSTERED ([RoleName] ASC)
);


GO
PRINT N'Creating [dbo].[InboxEmails]...';


GO
CREATE TABLE [dbo].[InboxEmails] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [EmailId]   NVARCHAR (50) NULL,
    [Password]  NVARCHAR (50) NULL,
    [PopServer] NVARCHAR (50) NULL,
    [IsActive]  BIT           NULL,
    [ClientNo]  INT           NULL,
    [Port]      INT           NULL,
    [UseSSL]    BIT           NULL,
    [AddedDate] DATETIME      NULL,
    CONSTRAINT [PK_InboxEmails] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[IncomingMail]...';


GO
CREATE TABLE [dbo].[IncomingMail] (
    [DocumentRepoId]       INT            IDENTITY (1, 1) NOT NULL,
    [ClientNo]             INT            NULL,
    [EmailId]              NVARCHAR (50)  NULL,
    [MessageId]            NVARCHAR (250) NULL,
    [Subject]              NVARCHAR (50)  NULL,
    [Sender]               NVARCHAR (50)  NULL,
    [To]                   NVARCHAR (MAX) NULL,
    [Cc]                   NVARCHAR (MAX) NULL,
    [Bcc]                  NVARCHAR (MAX) NULL,
    [Details]              NVARCHAR (MAX) NULL,
    [MailFilePath]         NVARCHAR (MAX) NULL,
    [IsReplied]            BIT            NULL,
    [IsDeleted]            BIT            NULL,
    [ParentDocumentRepoId] INT            NULL,
    [ReceivedDate]         DATETIME       NULL,
    [CreatedDate]          DATETIME       NULL,
    CONSTRAINT [PK_DocumentRepo] PRIMARY KEY CLUSTERED ([DocumentRepoId] ASC)
);


GO
PRINT N'Creating [dbo].[Menus]...';


GO
CREATE TABLE [dbo].[Menus] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Alias]       NVARCHAR (150) NOT NULL,
    [Name]        NVARCHAR (150) NULL,
    [Seq]         INT            NOT NULL,
    [Type]        INT            NULL,
    [ImagePath]   NVARCHAR (150) NULL,
    [IsActive]    BIT            NOT NULL,
    [ParentId]    INT            NOT NULL,
    [ChildCount]  INT            NOT NULL,
    [PageUrl]     NVARCHAR (150) NULL,
    [Description] NVARCHAR (MAX) NULL,
    [CreatedBy]   INT            NOT NULL,
    [CreatedDate] DATETIME       NOT NULL,
    [IsAllowed]   BIT            NULL,
    CONSTRAINT [PK_Menus] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EPFrequency]...';


GO
CREATE TABLE [dbo].[EPFrequency] (
    [EpFrequencyId]   INT      IDENTITY (1, 1) NOT NULL,
    [EpDetailId]      INT      NOT NULL,
    [TjcFrequencyId]  INT      NOT NULL,
    [RecFrequencyId]  INT      NULL,
    [IsActive]        BIT      NOT NULL,
    [SecondFrequency] INT      NULL,
    [CreatedBy]       INT      NOT NULL,
    [CreatedDate]     DATETIME NOT NULL,
    CONSTRAINT [PK_EPFrequency] PRIMARY KEY CLUSTERED ([EpFrequencyId] ASC)
);


GO
PRINT N'Creating [dbo].[InspStatus]...';


GO
CREATE TABLE [dbo].[InspStatus] (
    [InspStatusId] INT           IDENTITY (1, 1) NOT NULL,
    [InspResultId] INT           NOT NULL,
    [StatusName]   NVARCHAR (50) NULL,
    [Code]         NVARCHAR (5)  NULL,
    [IsActive]     BIT           NULL,
    [CreatedBy]    INT           NULL,
    [CreatedDate]  DATETIME      NULL,
    CONSTRAINT [PK_InspStatus] PRIMARY KEY CLUSTERED ([InspStatusId] ASC)
);


GO
PRINT N'Creating [dbo].[InspResult]...';


GO
CREATE TABLE [dbo].[InspResult] (
    [InspResultId] INT           IDENTITY (1, 1) NOT NULL,
    [ResultName]   NVARCHAR (50) NULL,
    [Code]         NVARCHAR (5)  NULL,
    [IsActive]     BIT           NOT NULL,
    [CreatedBy]    INT           NULL,
    [CreatedDate]  DATETIME      NULL,
    CONSTRAINT [PK_InspResult] PRIMARY KEY CLUSTERED ([InspResultId] ASC)
);


GO
PRINT N'Creating [dbo].[UserLogin]...';


GO
CREATE TABLE [dbo].[UserLogin] (
    [UserLoginId]          INT              IDENTITY (1, 1) NOT NULL,
    [UserId]               INT              NULL,
    [DeviceId]             NVARCHAR (150)   NULL,
    [DeviceTypeId]         INT              NULL,
    [IsLogOn]              BIT              NULL,
    [BuildVersion]         NVARCHAR (15)    NOT NULL,
    [RefereshToken]        UNIQUEIDENTIFIER NULL,
    [IsCurrent]            BIT              NULL,
    [LogOffDate]           DATETIME         NULL,
    [LogOnDate]            DATETIME         NULL,
    [ip]                   NVARCHAR (30)    NULL,
    [city]                 NVARCHAR (50)    NULL,
    [country_name]         NVARCHAR (50)    NULL,
    [organisation]         NVARCHAR (50)    NULL,
    [OsName]               NVARCHAR (50)    NULL,
    [BrowserName]          NVARCHAR (50)    NULL,
    [LastActivityDateTime] DATETIME         NULL,
    [UserProfileId]        UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_UserLogin] PRIMARY KEY CLUSTERED ([UserLoginId] ASC)
);


GO
PRINT N'Creating [dbo].[Organization]...';


GO
CREATE TABLE [dbo].[Organization] (
    [Orgkey]              UNIQUEIDENTIFIER NOT NULL,
    [ClientNo]            INT              IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (250)   NULL,
    [Latitude]            NVARCHAR (50)    NULL,
    [Longitude]           NVARCHAR (50)    NULL,
    [Email]               NVARCHAR (150)   NULL,
    [City]                NVARCHAR (100)   NULL,
    [State]               NVARCHAR (50)    NULL,
    [Country]             NVARCHAR (150)   NULL,
    [Zip]                 NVARCHAR (50)    NULL,
    [logoName]            NVARCHAR (50)    NULL,
    [LogoPath]            NVARCHAR (150)   NULL,
    [IsOutpatient]        BIT              NULL,
    [IsActive]            BIT              NULL,
    [FileName]            NVARCHAR (50)    NULL,
    [DashBoadImagePath]   NVARCHAR (250)   NULL,
    [DbName]              NVARCHAR (20)    NULL,
    [ParentOrgKey]        UNIQUEIDENTIFIER NULL,
    [Address]             NVARCHAR (MAX)   NULL,
    [IsParent]            BIT              NULL,
    [IsTmsWo]             BIT              NULL,
    [SegmentId]           INT              NULL,
    [Timezone]            NVARCHAR (150)   NULL,
    [CreatedBy]           INT              NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [BaseUrl]             NVARCHAR (150)   NULL,
    [HospitalTypeId]      INT              NULL,
    [FireWatchTimeSlot]   INT              NULL,
    [DefaultEPInspection] BIT              NULL,
    CONSTRAINT [PK_Organization_1] PRIMARY KEY CLUSTERED ([Orgkey] ASC)
);


GO
PRINT N'Creating [dbo].[EPDocuments]...';


GO
CREATE TABLE [dbo].[EPDocuments] (
    [EPDocumentId]         INT      IDENTITY (1, 1) NOT NULL,
    [EPDetailId]           INT      NOT NULL,
    [DocTypeId]            INT      NOT NULL,
    [IsActive]             BIT      NOT NULL,
    [DocInspectionGroupId] INT      NULL,
    [DateEffective]        DATETIME NULL,
    [CreatedBy]            INT      NOT NULL,
    [CreatedDate]          DATETIME NOT NULL,
    CONSTRAINT [PK_EPDocuments] PRIMARY KEY CLUSTERED ([EPDocumentId] ASC)
);


GO
PRINT N'Creating [dbo].[UserTypes]...';


GO
CREATE TABLE [dbo].[UserTypes] (
    [UserTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]       NVARCHAR (50) NULL,
    [IsActive]   BIT           NULL,
    CONSTRAINT [PK_UserTypes] PRIMARY KEY CLUSTERED ([UserTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[EpBinder]...';


GO
CREATE TABLE [dbo].[EpBinder] (
    [EPBinderId]  INT      IDENTITY (1, 1) NOT NULL,
    [EPDetailId]  INT      NOT NULL,
    [BinderId]    INT      NOT NULL,
    [IsActive]    BIT      NOT NULL,
    [CreatedBy]   INT      NOT NULL,
    [CreatedDate] DATETIME NOT NULL,
    CONSTRAINT [PK_EpBinder] PRIMARY KEY CLUSTERED ([EPBinderId] ASC)
);


GO
PRINT N'Creating [dbo].[DeviceTypes]...';


GO
CREATE TABLE [dbo].[DeviceTypes] (
    [DeviceTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [DeviceType]   NVARCHAR (30) NOT NULL,
    [IsActive]     BIT           NOT NULL,
    CONSTRAINT [PK_DeviceTypes] PRIMARY KEY CLUSTERED ([DeviceTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [GroupId]     INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NULL,
    [IsActive]    BIT            NULL,
    [Description] NVARCHAR (MAX) NULL,
    [IsReadOnly]  BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    CONSTRAINT [PK_RoleGroup] PRIMARY KEY CLUSTERED ([GroupId] ASC)
);


GO
PRINT N'Creating [dbo].[CityMaster]...';


GO
CREATE TABLE [dbo].[CityMaster] (
    [CityId]      INT            IDENTITY (1, 1) NOT NULL,
    [CityName]    NVARCHAR (100) NOT NULL,
    [CityCode]    NVARCHAR (50)  NOT NULL,
    [StateId]     INT            NOT NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    [Zipcode]     INT            NULL
);


GO
PRINT N'Creating [dbo].[Status]...';


GO
CREATE TABLE [dbo].[Status] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [StatusCode]  NVARCHAR (150) NULL,
    [StatusName]  NVARCHAR (50)  NULL,
    [Description] NVARCHAR (50)  NULL,
    [ColumnName]  NVARCHAR (50)  NULL,
    [TableName]   NVARCHAR (50)  NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    CONSTRAINT [PK_Status] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Attachments]...';


GO
CREATE TABLE [dbo].[Attachments] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [DocumentRepoId] INT            NULL,
    [FileName]       NVARCHAR (MAX) NULL,
    [FilePath]       NVARCHAR (MAX) NULL,
    [Extension]      VARCHAR (10)   NULL,
    [IsRejected]     BIT            NOT NULL,
    [IsUsed]         BIT            NOT NULL,
    [IsDeleted]      BIT            NULL,
    [CreatedBy]      INT            NULL,
    [CreatedDate]    DATETIME       NULL,
    CONSTRAINT [PK_Attachments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ConstructionActivity]...';


GO
CREATE TABLE [dbo].[ConstructionActivity] (
    [ConstActivityId]    INT            IDENTITY (1, 1) NOT NULL,
    [ConstructionTypeId] INT            NULL,
    [Activity]           NVARCHAR (MAX) NULL,
    [IsActive]           BIT            NULL,
    [CreatedBy]          INT            NULL,
    [CreatedDate]        DATETIME       NULL,
    CONSTRAINT [PK_ICRA_ConstructionActivity] PRIMARY KEY CLUSTERED ([ConstActivityId] ASC)
);


GO
PRINT N'Creating [dbo].[Standards]...';


GO
CREATE TABLE [dbo].[Standards] (
    [StDescID]          INT            IDENTITY (1, 1) NOT NULL,
    [CategoryId]        INT            NULL,
    [TJCStandard]       NVARCHAR (255) NULL,
    [TJCDescription]    NVARCHAR (MAX) NULL,
    [CmsStandard]       NVARCHAR (50)  NULL,
    [CmsStdDescription] NVARCHAR (MAX) NULL,
    [IsActive]          BIT            NULL,
    [Version]           NVARCHAR (50)  NULL,
    [CreateDate]        DATETIME       NULL,
    [CreatedBy]         INT            NULL,
    CONSTRAINT [PK_StandardDesc] PRIMARY KEY CLUSTERED ([StDescID] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationMapping]...';


GO
CREATE TABLE [dbo].[NotificationMapping] (
    [NotificationMappingId] INT      IDENTITY (1, 1) NOT NULL,
    [NotificationCatId]     INT      NULL,
    [NotificationEventId]   INT      NULL,
    [Status]                INT      NULL,
    [CreatedBy]             INT      NULL,
    [CreatedDate]           DATETIME NULL,
    CONSTRAINT [PK_NotificationMapping] PRIMARY KEY CLUSTERED ([NotificationMappingId] ASC)
);


GO
PRINT N'Creating [dbo].[Score]...';


GO
CREATE TABLE [dbo].[Score] (
    [ScoreId]     INT            NOT NULL,
    [Name]        VARCHAR (50)   NULL,
    [Description] NVARCHAR (MAX) NULL,
    [Value]       INT            NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_Score] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationEvent]...';


GO
CREATE TABLE [dbo].[NotificationEvent] (
    [NotificationEventId] INT            IDENTITY (1, 1) NOT NULL,
    [EventName]           NVARCHAR (150) NULL,
    [EventDescription]    NVARCHAR (250) NULL,
    [IsActive]            BIT            NULL,
    CONSTRAINT [PK_NotificationEvent] PRIMARY KEY CLUSTERED ([NotificationEventId] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationCategory]...';


GO
CREATE TABLE [dbo].[NotificationCategory] (
    [NotificationCatId]   INT            IDENTITY (1, 1) NOT NULL,
    [EnumValue]           NVARCHAR (250) NULL,
    [CategoryName]        NVARCHAR (150) NULL,
    [CategoryDescription] NVARCHAR (250) NULL,
    [IsActive]            BIT            NULL,
    [MenuAlais]           NVARCHAR (50)  NULL,
    CONSTRAINT [PK_NotificationCategory] PRIMARY KEY CLUSTERED ([NotificationCatId] ASC)
);


GO
PRINT N'Creating [dbo].[Binders]...';


GO
CREATE TABLE [dbo].[Binders] (
    [BinderId]       INT            IDENTITY (1, 1) NOT NULL,
    [BinderCode]     NVARCHAR (50)  NULL,
    [BinderName]     NVARCHAR (150) NULL,
    [DisplayName]    NVARCHAR (50)  NULL,
    [FileName]       NVARCHAR (150) NULL,
    [FilePath]       NVARCHAR (250) NULL,
    [IsActive]       BIT            NULL,
    [CreatedBy]      INT            NULL,
    [CreatedDate]    DATETIME       NULL,
    [ParentBinderId] INT            NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [ClientNo]       INT            NULL,
    CONSTRAINT [PK_Binders] PRIMARY KEY CLUSTERED ([BinderId] ASC),
    UNIQUE NONCLUSTERED ([BinderCode] ASC),
    CONSTRAINT [uq_binders_name_clientNo] UNIQUE NONCLUSTERED ([BinderName] ASC, [ClientNo] ASC)
);


GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [CategoryId]  INT            IDENTITY (1, 1) NOT NULL,
    [Alias]       CHAR (20)      NULL,
    [Code]        NVARCHAR (10)  NULL,
    [Name]        NVARCHAR (150) NULL,
    [Description] NVARCHAR (MAX) NULL,
    [IsActive]    BIT            NULL,
    [Version]     NVARCHAR (50)  NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    CONSTRAINT [PK_AssetsCategory] PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Category].[Category__Name]...';


GO
CREATE NONCLUSTERED INDEX [Category__Name]
    ON [dbo].[Category]([Name] ASC);


GO
PRINT N'Creating [dbo].[Category].[Category__Code]...';


GO
CREATE NONCLUSTERED INDEX [Category__Code]
    ON [dbo].[Category]([Code] ASC);


GO
PRINT N'Creating [dbo].[Manufactures]...';


GO
CREATE TABLE [dbo].[Manufactures] (
    [ManufactureId]   INT            IDENTITY (1, 1) NOT NULL,
    [ManufactureName] NVARCHAR (150) NULL,
    [IsActive]        BIT            NULL,
    [CreatedBy]       INT            NULL,
    [CreateDate]      DATETIME       NULL,
    CONSTRAINT [PK_Manufactures] PRIMARY KEY CLUSTERED ([ManufactureId] ASC)
);


GO
PRINT N'Creating [dbo].[AssetType]...';


GO
CREATE TABLE [dbo].[AssetType] (
    [TypeId]        INT           IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (50) NULL,
    [AssetTypeCode] NVARCHAR (10) NULL,
    [IsInternal]    BIT           NULL,
    [IsActive]      BIT           NULL,
    [CreatedBy]     INT           NULL,
    [CreateDate]    DATETIME      NULL,
    CONSTRAINT [PK_AssestType_1] PRIMARY KEY CLUSTERED ([TypeId] ASC),
    UNIQUE NONCLUSTERED ([AssetTypeCode] ASC)
);


GO
PRINT N'Creating [dbo].[EPGroupsDetail]...';


GO
CREATE TABLE [dbo].[EPGroupsDetail] (
    [EPGroupDetailId] INT IDENTITY (1, 1) NOT NULL,
    [EPGroupId]       INT NULL,
    [EPDetailId]      INT NULL,
    [IsActive]        BIT NULL,
    CONSTRAINT [PK_EPGroupsDetail] PRIMARY KEY CLUSTERED ([EPGroupDetailId] ASC)
);


GO
PRINT N'Creating [dbo].[Tips]...';


GO
CREATE TABLE [dbo].[Tips] (
    [TipId]                   INT            IDENTITY (1, 1) NOT NULL,
    [Title]                   NVARCHAR (150) NULL,
    [Description]             NVARCHAR (MAX) NULL,
    [Source]                  NVARCHAR (150) NULL,
    [RouteUrl]                NVARCHAR (255) NULL,
    [CreatedBy]               INT            NULL,
    [CreatedDate]             DATETIME       NULL,
    [ClientNo]                INT            NULL,
    [ContributorName]         NVARCHAR (150) NULL,
    [ContributorOrg]          NVARCHAR (150) NULL,
    [ContributorPosition]     NVARCHAR (150) NULL,
    [IsApproved]              INT            NOT NULL,
    [ShowContributorName]     BIT            NOT NULL,
    [ShowContributorOrg]      BIT            NOT NULL,
    [ShowContributorPosition] BIT            NOT NULL,
    [TipType]                 INT            NOT NULL,
    [IsActive]                BIT            NOT NULL,
    [IsCurrent]               BIT            NULL,
    [ParentTipId]             INT            NULL,
    [UpdatedBy]               INT            NULL,
    [UpdatedDate]             DATETIME       NULL,
    [RouteName]               NVARCHAR (500) NULL,
    CONSTRAINT [PK_Tips] PRIMARY KEY CLUSTERED ([TipId] ASC)
);


GO
PRINT N'Creating [dbo].[Steps]...';


GO
CREATE TABLE [dbo].[Steps] (
    [StepsId]      INT            IDENTITY (1, 1) NOT NULL,
    [MainGoalId]   INT            NULL,
    [GoalUId]      NVARCHAR (50)  NULL,
    [EPDetailId]   INT            NULL,
    [IsRA]         BIT            NULL,
    [RAScore]      INT            NULL,
    [Step]         NVARCHAR (MAX) NULL,
    [IsActive]     BIT            NOT NULL,
    [IsCurrent]    BIT            NOT NULL,
    [StepType]     INT            NOT NULL,
    [IsIlsmLink]   BIT            NULL,
    [CreatedBy]    INT            NOT NULL,
    [CreatedDate]  DATETIME       NOT NULL,
    [ParentStepId] INT            NULL,
    CONSTRAINT [PK_CheckPoints] PRIMARY KEY CLUSTERED ([StepsId] ASC)
);


GO
PRINT N'Creating [dbo].[AffectedEPs]...';


GO
CREATE TABLE [dbo].[AffectedEPs] (
    [Id]                 INT      IDENTITY (1, 1) NOT NULL,
    [StepsId]            INT      NULL,
    [AffectedEPDetailId] INT      NOT NULL,
    [IsActive]           BIT      NULL,
    [CreatedBy]          INT      NULL,
    [CreatedDate]        DATETIME NULL,
    [EpDetailId]         INT      NULL,
    CONSTRAINT [PK_AffectedEPs] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EPGroups]...';


GO
CREATE TABLE [dbo].[EPGroups] (
    [EPGroupId]   INT            IDENTITY (1, 1) NOT NULL,
    [EPGroupName] NVARCHAR (MAX) NULL,
    [IsActive]    BIT            NULL,
    CONSTRAINT [PK_EPGroups] PRIMARY KEY CLUSTERED ([EPGroupId] ASC)
);


GO
PRINT N'Creating [dbo].[AssetInspFrequency]...';


GO
CREATE TABLE [dbo].[AssetInspFrequency] (
    [Id]          INT      IDENTITY (1, 1) NOT NULL,
    [AssetId]     INT      NULL,
    [FrequencyId] INT      NULL,
    [IsActive]    BIT      NOT NULL,
    [CreatedBy]   INT      NULL,
    [CreatedDate] DATETIME NULL,
    CONSTRAINT [PK_AssetInspFrequency] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserProfile]...';


GO
CREATE TABLE [dbo].[UserProfile] (
    [UserId]         INT              IDENTITY (39999, 1) NOT NULL,
    [Orgkey]         UNIQUEIDENTIFIER NULL,
    [UserProfileId]  UNIQUEIDENTIFIER NULL,
    [FirstName]      NVARCHAR (50)    NULL,
    [LastName]       NVARCHAR (50)    NULL,
    [Email]          NVARCHAR (150)   NULL,
    [UserName]       NVARCHAR (56)    NOT NULL,
    [PhoneNumber]    NVARCHAR (20)    NULL,
    [CellNo]         NVARCHAR (50)    NULL,
    [Password]       NVARCHAR (MAX)   NULL,
    [Salt]           UNIQUEIDENTIFIER NULL,
    [IsActive]       BIT              NULL,
    [FileName]       NVARCHAR (150)   NULL,
    [FilePath]       NVARCHAR (150)   NULL,
    [UserGroupId]    INT              NULL,
    [IsSystemUser]   BIT              NULL,
    [IsInternalUser] BIT              NULL,
    [VendorId]       INT              NULL,
    [IsPwdChange]    BIT              NULL,
    [CreatedBy]      INT              NULL,
    [CreatedDate]    DATETIME         NULL,
    [UserTypeId]     INT              NULL,
    [IsCRxUser]      BIT              NOT NULL,
    [UserStatusCode] INT              NULL,
    [IPs]            NVARCHAR (150)   NULL,
    CONSTRAINT [PK_UserProfile] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[EpAssets]...';


GO
CREATE TABLE [dbo].[EpAssets] (
    [MappingId]  INT      IDENTITY (1, 1) NOT NULL,
    [EPDetailId] INT      NOT NULL,
    [AssetId]    INT      NOT NULL,
    [IsActive]   BIT      NOT NULL,
    [CreatedBy]  INT      NOT NULL,
    [CreateDate] DATETIME NOT NULL,
    CONSTRAINT [PK_EpAssets] PRIMARY KEY CLUSTERED ([MappingId] ASC)
);


GO
PRINT N'Creating [dbo].[UserOrganization]...';


GO
CREATE TABLE [dbo].[UserOrganization] (
    [UserOrgId]     UNIQUEIDENTIFIER NULL,
    [UserProfileId] UNIQUEIDENTIFIER NULL,
    [IsActive]      BIT              NULL
);


GO
PRINT N'Creating [dbo].[Assets]...';


GO
CREATE TABLE [dbo].[Assets] (
    [AssetId]         INT            IDENTITY (1, 1) NOT NULL,
    [AssetTypeId]     INT            NULL,
    [AssetCode]       NVARCHAR (250) NULL,
    [Name]            NVARCHAR (150) NULL,
    [IconPath]        NVARCHAR (250) NOT NULL,
    [IsActive]        BIT            NULL,
    [Version]         NVARCHAR (50)  NULL,
    [IsStepsOnReport] BIT            NULL,
    [CreatedBy]       INT            NULL,
    [CreateDate]      DATETIME       NULL,
    [IsRouteInsp]     BIT            NULL,
    CONSTRAINT [PK_Assets] PRIMARY KEY CLUSTERED ([AssetId] ASC),
    CONSTRAINT [UQ__Assets__2DDE5240BB750A91] UNIQUE NONCLUSTERED ([AssetCode] ASC)
);


GO
PRINT N'Creating [dbo].[StateMaster]...';


GO
CREATE TABLE [dbo].[StateMaster] (
    [StateId]     INT            IDENTITY (1, 1) NOT NULL,
    [StateName]   NVARCHAR (100) NOT NULL,
    [StateCode]   NVARCHAR (50)  NOT NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL
);


GO
PRINT N'Creating [dbo].[DocumentType]...';


GO
CREATE TABLE [dbo].[DocumentType] (
    [DocTypeId]     INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (250) NULL,
    [Path]          NVARCHAR (250) NULL,
    [IsActive]      BIT            NULL,
    [CreatedBy]     INT            NULL,
    [CreatedDate]   DATETIME       NULL,
    [DocCategoryID] INT            NULL,
    CONSTRAINT [PK_DocumnetType] PRIMARY KEY CLUSTERED ([DocTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[SiteType]...';


GO
CREATE TABLE [dbo].[SiteType] (
    [SiteTypeId]   INT            IDENTITY (1, 1) NOT NULL,
    [SiteTypeName] NVARCHAR (100) NULL,
    [IsActive]     BIT            NULL,
    [CreatedBy]    INT            NULL,
    [CreatedDate]  DATETIME       NULL,
    CONSTRAINT [PK_SiteType] PRIMARY KEY CLUSTERED ([SiteTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[MainGoal]...';


GO
CREATE TABLE [dbo].[MainGoal] (
    [MainGoalId]   INT            IDENTITY (1, 1) NOT NULL,
    [EPDetailId]   INT            NULL,
    [AssetId]      INT            NULL,
    [FrequencyId]  INT            NULL,
    [DocTypeId]    INT            NULL,
    [GoalUId]      NVARCHAR (50)  NULL,
    [ActivityType] INT            NULL,
    [Goal]         NVARCHAR (MAX) NOT NULL,
    [IsActive]     BIT            NULL,
    [IsCurrent]    BIT            NULL,
    [CreatedBy]    INT            NOT NULL,
    [CreatedDate]  DATETIME       NOT NULL,
    [ClientNo]     INT            NULL,
    [FloorAssetId] INT            NULL,
    CONSTRAINT [PK_MainGoal] PRIMARY KEY CLUSTERED ([MainGoalId] ASC)
);


GO
PRINT N'Creating [dbo].[MainGoal].[MainGoal_AssetId]...';


GO
CREATE NONCLUSTERED INDEX [MainGoal_AssetId]
    ON [dbo].[MainGoal]([AssetId] ASC);


GO
PRINT N'Creating [dbo].[MainGoal].[MainGoal_EPDetailId]...';


GO
CREATE NONCLUSTERED INDEX [MainGoal_EPDetailId]
    ON [dbo].[MainGoal]([EPDetailId] ASC);


GO
PRINT N'Creating [dbo].[EPDetails]...';


GO
CREATE TABLE [dbo].[EPDetails] (
    [EPDetailId]        INT              IDENTITY (1, 1) NOT NULL,
    [StDescID]          INT              NOT NULL,
    [EPNumber]          NVARCHAR (50)    NOT NULL,
    [ScoreId]           INT              NULL,
    [Description]       NVARCHAR (MAX)   NULL,
    [CmsEPNumber]       NVARCHAR (50)    NULL,
    [CmsDescription]    NVARCHAR (MAX)   NULL,
    [IsDocRequired]     BIT              NULL,
    [Version]           NVARCHAR (150)   NULL,
    [IsActive]          BIT              NOT NULL,
    [IsDeleted]         BIT              NOT NULL,
    [IsIlsmEP]          BIT              NOT NULL,
    [IsAssetsRequired]  BIT              NOT NULL,
    [IsFrequencyChange] BIT              NOT NULL,
    [Priority]          INT              NOT NULL,
    [EffectiveDate]     DATE             NULL,
    [ExpiryDate]        DATE             NULL,
    [RiskScore]         INT              NULL,
    [CreatedBy]         INT              NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [LastUpdatedDate]   DATETIME         NULL,
    [IsRelation]        BIT              NULL,
    [ParentEPDetailId]  INT              NULL,
    [IsCurrent]         BIT              NULL,
    [EpdetailGuid]      UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_EPDetails] PRIMARY KEY CLUSTERED ([EPDetailId] ASC)
);


GO
PRINT N'Creating [dbo].[EPDetails].[EPDetails_EPNumber]...';


GO
CREATE NONCLUSTERED INDEX [EPDetails_EPNumber]
    ON [dbo].[EPDetails]([EPNumber] ASC);


GO
PRINT N'Creating [dbo].[EPDetails].[EPDetails_ScoreId]...';


GO
CREATE NONCLUSTERED INDEX [EPDetails_ScoreId]
    ON [dbo].[EPDetails]([ScoreId] ASC);


GO
PRINT N'Creating [dbo].[EPDetails].[EPDetails_IsDocRequired]...';


GO
CREATE NONCLUSTERED INDEX [EPDetails_IsDocRequired]
    ON [dbo].[EPDetails]([IsDocRequired] ASC);


GO
PRINT N'Creating [dbo].[EPDetails].[EPDetails_StDescID]...';


GO
CREATE NONCLUSTERED INDEX [EPDetails_StDescID]
    ON [dbo].[EPDetails]([StDescID] ASC);


GO
PRINT N'Creating [dbo].[EPDetails].[EPDetails_Priority]...';


GO
CREATE NONCLUSTERED INDEX [EPDetails_Priority]
    ON [dbo].[EPDetails]([Priority] ASC);


GO
PRINT N'Creating [dbo].[IlsmStepsMapping]...';


GO
CREATE TABLE [dbo].[IlsmStepsMapping] (
    [Id]          INT      IDENTITY (1, 1) NOT NULL,
    [StepsId]     INT      NULL,
    [ILsmStepsId] INT      NULL,
    [IsActive]    BIT      NULL,
    [CreatedDate] DATETIME NULL,
    CONSTRAINT [PK_IlsmStepsMapping] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EPVersions]...';


GO
CREATE TABLE [dbo].[EPVersions] (
    [EPVersionId]     UNIQUEIDENTIFIER NOT NULL,
    [EPDetailId]      INT              NULL,
    [EPDescriptionId] NVARCHAR (50)    NOT NULL,
    [ScoreId]         INT              NULL,
    [FrequencyId]     INT              NULL,
    [AssetId]         INT              NULL,
    [DocTypeId]       INT              NULL,
    [BinderId]        INT              NULL,
    [IsCurrent]       BIT              NULL,
    [ModifiedType]    NVARCHAR (MAX)   NULL,
    [CreatedBy]       INT              NULL,
    [CreatedDate]     DATETIME         NULL,
    CONSTRAINT [PK_EPVersions] PRIMARY KEY CLUSTERED ([EPVersionId] ASC)
);


GO
PRINT N'Creating [dbo].[ICRASteps]...';


GO
CREATE TABLE [dbo].[ICRASteps] (
    [ICRAStepId]       INT            IDENTITY (1, 1) NOT NULL,
    [Alias]            NVARCHAR (15)  NULL,
    [Steps]            NVARCHAR (MAX) NULL,
    [Sequence]         INT            NULL,
    [IsActive]         BIT            NULL,
    [CreatedBy]        INT            NULL,
    [CreatedDate]      DATETIME       NULL,
    [ParentICRAStepId] INT            NULL,
    CONSTRAINT [PK_ICRASteps] PRIMARY KEY CLUSTERED ([ICRAStepId] ASC)
);


GO
PRINT N'Creating [dbo].[ICRARiskArea]...';


GO
CREATE TABLE [dbo].[ICRARiskArea] (
    [RiskAreaId]     INT           IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (50) NULL,
    [ApprovalStatus] INT           NULL,
    [IsActive]       BIT           NULL,
    [IsSendEmail]    BIT           NULL,
    [CreatedBy]      INT           NULL,
    [CreatedDate]    DATETIME      NULL,
    CONSTRAINT [PK_ICRARiskArea] PRIMARY KEY CLUSTERED ([RiskAreaId] ASC)
);


GO
PRINT N'Creating [dbo].[StandardManuals]...';


GO
CREATE TABLE [dbo].[StandardManuals] (
    [Id]             INT IDENTITY (1, 1) NOT NULL,
    [StDescID]       INT NULL,
    [EpDetailId]     INT NULL,
    [HospitalTypeId] INT NULL,
    [IsApplicable]   BIT NULL,
    CONSTRAINT [PK_StandardManuals] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ICRAObsReportCheckPoints]...';


GO
CREATE TABLE [dbo].[ICRAObsReportCheckPoints] (
    [ICRAReportPointId] INT            IDENTITY (1, 1) NOT NULL,
    [CheckPoints]       NVARCHAR (250) NULL,
    [Description]       NVARCHAR (MAX) NULL,
    [IsActive]          BIT            NULL,
    [CreatedBy]         INT            NULL,
    [CreatedDate]       DATETIME       NULL,
    CONSTRAINT [PK_ICRAObsReportCheckPoints] PRIMARY KEY CLUSTERED ([ICRAReportPointId] ASC)
);


GO
PRINT N'Creating [dbo].[FireExtinguisherTypes]...';


GO
CREATE TABLE [dbo].[FireExtinguisherTypes] (
    [FETypeId] INT           IDENTITY (1, 1) NOT NULL,
    [AscId]    INT           NOT NULL,
    [FeType]   NVARCHAR (50) NULL,
    [IsActive] BIT           NOT NULL,
    [Sequence] INT           NOT NULL,
    CONSTRAINT [PK_FireExtinguisherTypes] PRIMARY KEY CLUSTERED ([FETypeId] ASC)
);


GO
PRINT N'Creating [dbo].[ICRAMatixPrecautions]...';


GO
CREATE TABLE [dbo].[ICRAMatixPrecautions] (
    [Id]                  INT IDENTITY (1, 1) NOT NULL,
    [ConstructionClassId] INT NULL,
    [ConstructionRiskId]  INT NULL,
    [ConstructionTypeId]  INT NULL,
    [IsActive]            BIT NULL,
    CONSTRAINT [PK_ICRAMatixPrecautions] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AssetsSubCategory]...';


GO
CREATE TABLE [dbo].[AssetsSubCategory] (
    [AscId]       INT           IDENTITY (1, 1) NOT NULL,
    [AscName]     NVARCHAR (50) NULL,
    [AssetId]     INT           NULL,
    [IsActive]    BIT           NULL,
    [CreatedDate] DATETIME      NULL,
    CONSTRAINT [PK_AssetsSubCategory] PRIMARY KEY CLUSTERED ([AscId] ASC)
);


GO
PRINT N'Creating [dbo].[FireDrillQuestionnaires]...';


GO
CREATE TABLE [dbo].[FireDrillQuestionnaires] (
    [FireDrillQuesId] INT            IDENTITY (1, 1) NOT NULL,
    [FireDrillCatId]  INT            NOT NULL,
    [Questionnaries]  NVARCHAR (MAX) NOT NULL,
    [IsActive]        BIT            NOT NULL,
    [CreatedBy]       INT            NOT NULL,
    [CreatedDate]     DATETIME       NOT NULL,
    [Applicable]      NVARCHAR (MAX) NULL,
    [IsCommQues]      BIT            NULL,
    CONSTRAINT [PK_FireDrillQuestionnaires] PRIMARY KEY CLUSTERED ([FireDrillQuesId] ASC)
);


GO
PRINT N'Creating [dbo].[FiredrillCategory]...';


GO
CREATE TABLE [dbo].[FiredrillCategory] (
    [FiredrillCatId] INT            IDENTITY (1, 1) NOT NULL,
    [CategoryName]   VARCHAR (100)  NOT NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [IsActive]       BIT            NOT NULL,
    [CreatedBy]      INT            NOT NULL,
    [CreatedDate]    DATETIME       NOT NULL,
    [IsCommonCat]    BIT            NOT NULL,
    [Applicable]     NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_FiredrillCategory] PRIMARY KEY CLUSTERED ([FiredrillCatId] ASC)
);


GO
PRINT N'Creating [dbo].[ConstructionType]...';


GO
CREATE TABLE [dbo].[ConstructionType] (
    [ConstructionTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [TypeName]           NVARCHAR (50)  NULL,
    [Description]        NVARCHAR (MAX) NULL,
    [IsActive]           BIT            NULL,
    [CreatedBy]          INT            NULL,
    [CreatedDate]        DATETIME       NULL,
    CONSTRAINT [PK_ICRA_ConstructionType] PRIMARY KEY CLUSTERED ([ConstructionTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[ConstructionRisk]...';


GO
CREATE TABLE [dbo].[ConstructionRisk] (
    [ConstructionRiskId] INT           IDENTITY (1, 1) NOT NULL,
    [GroupName]          NVARCHAR (50) NULL,
    [RiskName]           NVARCHAR (50) NULL,
    [IsActive]           BIT           NULL,
    [CreatedBy]          INT           NULL,
    [CreatedDate]        DATETIME      NULL,
    CONSTRAINT [PK_ConstructionRisk] PRIMARY KEY CLUSTERED ([ConstructionRiskId] ASC)
);


GO
PRINT N'Creating [dbo].[News]...';


GO
CREATE TABLE [dbo].[News] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [Title]          NVARCHAR (255) NOT NULL,
    [Short]          NVARCHAR (150) NULL,
    [IsReleaseNotes] BIT            NULL,
    [Description]    NVARCHAR (MAX) NOT NULL,
    [Published]      BIT            NULL,
    [IsDeleted]      BIT            NULL,
    [StartDate]      DATE           NULL,
    [EndDate]        DATE           NULL,
    [CreatedBy]      INT            NOT NULL,
    [CreatedOn]      DATETIME       NOT NULL,
    CONSTRAINT [PK_News] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ConstructionClassActivity]...';


GO
CREATE TABLE [dbo].[ConstructionClassActivity] (
    [ConstClassActivityId] INT            IDENTITY (1, 1) NOT NULL,
    [ConstClassId]         INT            NULL,
    [ConstClassCatId]      INT            NULL,
    [Activity]             NVARCHAR (MAX) NULL,
    [IsActive]             BIT            NULL,
    [CreatedBy]            INT            NULL,
    [CreatedDate]          DATETIME       NULL,
    CONSTRAINT [PK_ConstructionClassActivity] PRIMARY KEY CLUSTERED ([ConstClassActivityId] ASC)
);


GO
PRINT N'Creating [dbo].[UserAdditionalRole]...';


GO
CREATE TABLE [dbo].[UserAdditionalRole] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NCHAR (100)    NULL,
    [IsActive]    BIT            NULL,
    [Description] NVARCHAR (MAX) NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    CONSTRAINT [PK_UserAdditionalRole] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ConstructionClass]...';


GO
CREATE TABLE [dbo].[ConstructionClass] (
    [ConstructionClassId] INT           IDENTITY (1, 1) NOT NULL,
    [ClassName]           NVARCHAR (50) NULL,
    [IsActive]            BIT           NULL,
    [CreatedBy]           INT           NULL,
    [CreatedDate]         DATETIME      NULL,
    CONSTRAINT [PK_ConstructionClass] PRIMARY KEY CLUSTERED ([ConstructionClassId] ASC)
);


GO
PRINT N'Creating [dbo].[CmsEpMapping]...';


GO
CREATE TABLE [dbo].[CmsEpMapping] (
    [CMSEPMappingId] INT      IDENTITY (1, 1) NOT NULL,
    [EPDetailId]     INT      NULL,
    [CopDetailsId]   INT      NULL,
    [CreatedBy]      INT      NULL,
    [CreatedDate]    DATETIME NULL,
    [IsDeleted]      BIT      NULL,
    PRIMARY KEY CLUSTERED ([CMSEPMappingId] ASC)
);


GO
PRINT N'Creating [dbo].[CopStdesc]...';


GO
CREATE TABLE [dbo].[CopStdesc] (
    [CopStdescId] INT            IDENTITY (1, 1) NOT NULL,
    [CopName]     NVARCHAR (150) NULL,
    [CopTitle]    NVARCHAR (150) NULL,
    [TagCode]     NVARCHAR (150) NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CopStdescId] ASC)
);


GO
PRINT N'Creating [dbo].[CopDetails]...';


GO
CREATE TABLE [dbo].[CopDetails] (
    [CopDetailsId]    INT            IDENTITY (1, 1) NOT NULL,
    [CopStdescId]     INT            NULL,
    [RequirementName] NVARCHAR (MAX) NULL,
    [CopText]         NVARCHAR (MAX) NULL,
    [EPTextID]        NVARCHAR (150) NULL,
    [CreatedBy]       INT            NULL,
    [CreatedDate]     DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([CopDetailsId] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectType]...';


GO
CREATE TABLE [dbo].[ProjectType] (
    [ProjectTypeId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]          NVARCHAR (150) NULL,
    [Description]   NVARCHAR (MAX) NULL,
    [IsActive]      BIT            NULL,
    [CreatedBy]     INT            NULL,
    [CreatedDate]   DATETIME       NULL,
    CONSTRAINT [PK_ProjectType1] PRIMARY KEY CLUSTERED ([ProjectTypeId] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SyncMongoMaster]...';


GO
CREATE TABLE [dbo].[SyncMongoMaster] (
    [Id]               INT            IDENTITY (1, 1) NOT NULL,
    [TableName]        NVARCHAR (200) NULL,
    [Query]            NVARCHAR (MAX) NULL,
    [IsMasterTable]    BIT            NULL,
    [IsApplicable]     BIT            NULL,
    [IsStructureOnly]  BIT            NULL,
    [IsMainDbTable]    BIT            NULL,
    [LastSyncDateTime] DATETIME       NULL,
    [Description]      VARCHAR (MAX)  NULL,
    CONSTRAINT [PK_SyncMongoMaster] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[EpRelation]...';


GO
CREATE TABLE [dbo].[EpRelation] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Epdetailid]  INT            NULL,
    [RelatedTo]   NVARCHAR (MAX) NULL,
    [ClientNo]    INT            NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATE           NULL,
    CONSTRAINT [PK_EpRelation] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Vendors]...';


GO
CREATE TABLE [dbo].[Vendors] (
    [VendorOrgId]         UNIQUEIDENTIFIER NOT NULL,
    [VendorId]            INT              IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (150)   NULL,
    [Address]             NVARCHAR (450)   NULL,
    [RegistrationNo]      NVARCHAR (50)    NULL,
    [IsActive]            BIT              NOT NULL,
    [Email]               NVARCHAR (50)    NULL,
    [PhoneNo]             NVARCHAR (20)    NULL,
    [CellNo]              NVARCHAR (20)    NULL,
    [ContactDetails]      TEXT             NULL,
    [MessageToContractor] NVARCHAR (MAX)   NULL,
    [CreatedBy]           INT              NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [BuildingIds]         VARCHAR (MAX)    NULL,
    [ClientNo]            VARCHAR (50)     NULL
);


GO
PRINT N'Creating [dbo].[RoundsQuestionnaires]...';


GO
CREATE TABLE [dbo].[RoundsQuestionnaires] (
    [RouQuesId]         INT            IDENTITY (1, 1) NOT NULL,
    [RoundCatId]        INT            NULL,
    [RoundStep]         NVARCHAR (MAX) NULL,
    [IsShared]          BIT            NULL,
    [IsActive]          BIT            NULL,
    [ParentRouQuesId]   INT            NULL,
    [RiskType]          INT            NULL,
    [RiskStepCode]      NVARCHAR (50)  NULL,
    [CreatedBy]         INT            NULL,
    [CreatedDate]       DATETIME       NULL,
    [Applicable]        VARCHAR (MAX)  NULL,
    [IsCommonRoundQues] BIT            NULL,
    [ShortDescription]  NVARCHAR (50)  NULL,
    CONSTRAINT [PK_RoundItems] PRIMARY KEY CLUSTERED ([RouQuesId] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[RoundCategory]...';


GO
CREATE TABLE [dbo].[RoundCategory] (
    [RoundCatId]   INT            IDENTITY (1, 1) NOT NULL,
    [CategoryName] VARCHAR (100)  NULL,
    [FrequencyIds] NVARCHAR (50)  NULL,
    [IsActive]     BIT            NULL,
    [CreatedBy]    INT            NULL,
    [CreatedDate]  DATETIME       NULL,
    [Applicable]   NVARCHAR (MAX) NULL,
    [IsCommonCat]  BIT            NULL,
    CONSTRAINT [PK_RoundCategory] PRIMARY KEY CLUSTERED ([RoundCatId] ASC)
);


GO
PRINT N'Creating [dbo].[ModuleMaster]...';


GO
CREATE TABLE [dbo].[ModuleMaster] (
    [ModuleId]    INT            NOT NULL,
    [ModuleName]  NVARCHAR (250) NULL,
    [MenuIds]     NVARCHAR (MAX) NULL,
    [IsActive]    BIT            NULL,
    [CreatedBy]   INT            NULL,
    [CreatedDate] DATETIME       NULL,
    [Sequence]    INT            NULL,
    [ModuleCode]  NVARCHAR (10)  NULL,
    PRIMARY KEY CLUSTERED ([ModuleId] ASC)
);


GO
PRINT N'Creating [dbo].[VendorOrganizations]...';


GO
CREATE TABLE [dbo].[VendorOrganizations] (
    [Id]            INT              IDENTITY (1, 1) NOT NULL,
    [InvitationId]  UNIQUEIDENTIFIER NULL,
    [VendorId]      INT              NULL,
    [OrgKey]        UNIQUEIDENTIFIER NULL,
    [IsRequested]   BIT              NULL,
    [RequestedDate] DATETIME         NULL,
    [RequestedBy]   UNIQUEIDENTIFIER NULL,
    [IsOrgVendor]   BIT              NULL,
    CONSTRAINT [PK_VendorOrganizations] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[DF_OrgServices_CreatedDate]...';


GO
ALTER TABLE [dbo].[OrgServices]
    ADD CONSTRAINT [DF_OrgServices_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[PasswordResetRequests_PK_DF]...';


GO
ALTER TABLE [dbo].[PasswordResetRequests]
    ADD CONSTRAINT [PasswordResetRequests_PK_DF] DEFAULT (newsequentialid()) FOR [RequestId];


GO
PRINT N'Creating [dbo].[PasswordResetRequests_RequestedOn_DF]...';


GO
ALTER TABLE [dbo].[PasswordResetRequests]
    ADD CONSTRAINT [PasswordResetRequests_RequestedOn_DF] DEFAULT (getutcdate()) FOR [RequestedOn];


GO
PRINT N'Creating [dbo].[DF_FrequencyMaster_IsActive]...';


GO
ALTER TABLE [dbo].[FrequencyMaster]
    ADD CONSTRAINT [DF_FrequencyMaster_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_FrequencyMaster_CreatedDate]...';


GO
ALTER TABLE [dbo].[FrequencyMaster]
    ADD CONSTRAINT [DF_FrequencyMaster_CreatedDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_HospitalType_CreateDate]...';


GO
ALTER TABLE [dbo].[HospitalType]
    ADD CONSTRAINT [DF_HospitalType_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_RolesInGroups_Status]...';


GO
ALTER TABLE [dbo].[RolesInGroups]
    ADD CONSTRAINT [DF_RolesInGroups_Status] DEFAULT ((0)) FOR [Status];


GO
PRINT N'Creating [dbo].[DF_BuildVersions_isMajor]...';


GO
ALTER TABLE [dbo].[BuildVersion]
    ADD CONSTRAINT [DF_BuildVersions_isMajor] DEFAULT ((1)) FOR [isMajorRelease];


GO
PRINT N'Creating [dbo].[DF_BuildVersions_isCurrent]...';


GO
ALTER TABLE [dbo].[BuildVersion]
    ADD CONSTRAINT [DF_BuildVersions_isCurrent] DEFAULT ((1)) FOR [isCurrent];


GO
PRINT N'Creating [dbo].[DF_BuildVersions_BuildDate]...';


GO
ALTER TABLE [dbo].[BuildVersion]
    ADD CONSTRAINT [DF_BuildVersions_BuildDate] DEFAULT (getutcdate()) FOR [ReleaseDate];


GO
PRINT N'Creating [dbo].[DF_EPDescriptions_IsCurrent]...';


GO
ALTER TABLE [dbo].[EPDescriptions]
    ADD CONSTRAINT [DF_EPDescriptions_IsCurrent] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_Roles_IsActive]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD CONSTRAINT [DF_Roles_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Roles_IsChild]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD CONSTRAINT [DF_Roles_IsChild] DEFAULT ((1)) FOR [IsChild];


GO
PRINT N'Creating [dbo].[DF_Roles_CreatedDate]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD CONSTRAINT [DF_Roles_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__Roles__IsUserRol__0CE69C57]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD CONSTRAINT [DF__Roles__IsUserRol__0CE69C57] DEFAULT ((0)) FOR [IsUserRole];


GO
PRINT N'Creating [dbo].[DF_InboxEmails_UseSSL]...';


GO
ALTER TABLE [dbo].[InboxEmails]
    ADD CONSTRAINT [DF_InboxEmails_UseSSL] DEFAULT ((1)) FOR [UseSSL];


GO
PRINT N'Creating [dbo].[DF_InboxEmails_AddedDate]...';


GO
ALTER TABLE [dbo].[InboxEmails]
    ADD CONSTRAINT [DF_InboxEmails_AddedDate] DEFAULT (getutcdate()) FOR [AddedDate];


GO
PRINT N'Creating [dbo].[DF_DocumentRepo_IsReplied]...';


GO
ALTER TABLE [dbo].[IncomingMail]
    ADD CONSTRAINT [DF_DocumentRepo_IsReplied] DEFAULT ((0)) FOR [IsReplied];


GO
PRINT N'Creating [dbo].[DF_DocumentRepo_IsDeleted]...';


GO
ALTER TABLE [dbo].[IncomingMail]
    ADD CONSTRAINT [DF_DocumentRepo_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_DocumentRepo_ParentDocumentRepoId]...';


GO
ALTER TABLE [dbo].[IncomingMail]
    ADD CONSTRAINT [DF_DocumentRepo_ParentDocumentRepoId] DEFAULT ((0)) FOR [ParentDocumentRepoId];


GO
PRINT N'Creating [dbo].[DF_DocumentRepo_CreatedDate]...';


GO
ALTER TABLE [dbo].[IncomingMail]
    ADD CONSTRAINT [DF_DocumentRepo_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Menus_Seq]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD CONSTRAINT [DF_Menus_Seq] DEFAULT ((0)) FOR [Seq];


GO
PRINT N'Creating [dbo].[DF_Menus_IsActive]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD CONSTRAINT [DF_Menus_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Menus_ParentId]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD CONSTRAINT [DF_Menus_ParentId] DEFAULT ((0)) FOR [ParentId];


GO
PRINT N'Creating [dbo].[DF_Menus_ChildCount]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD CONSTRAINT [DF_Menus_ChildCount] DEFAULT ((0)) FOR [ChildCount];


GO
PRINT N'Creating [dbo].[DF_Menus_CreatedDate]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD CONSTRAINT [DF_Menus_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Menus]...';


GO
ALTER TABLE [dbo].[Menus]
    ADD DEFAULT ((1)) FOR [IsAllowed];


GO
PRINT N'Creating [dbo].[DF_EPFrequency_TjcFrequencyId]...';


GO
ALTER TABLE [dbo].[EPFrequency]
    ADD CONSTRAINT [DF_EPFrequency_TjcFrequencyId] DEFAULT ((0)) FOR [TjcFrequencyId];


GO
PRINT N'Creating [dbo].[DF_EPFrequency_IsActive]...';


GO
ALTER TABLE [dbo].[EPFrequency]
    ADD CONSTRAINT [DF_EPFrequency_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EPFrequency_CreatedDate]...';


GO
ALTER TABLE [dbo].[EPFrequency]
    ADD CONSTRAINT [DF_EPFrequency_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_InspStatus_IsActive]...';


GO
ALTER TABLE [dbo].[InspStatus]
    ADD CONSTRAINT [DF_InspStatus_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_InspStatus_CreatedDate]...';


GO
ALTER TABLE [dbo].[InspStatus]
    ADD CONSTRAINT [DF_InspStatus_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_InspResult_IsActive]...';


GO
ALTER TABLE [dbo].[InspResult]
    ADD CONSTRAINT [DF_InspResult_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_InspResult_CreatedDate]...';


GO
ALTER TABLE [dbo].[InspResult]
    ADD CONSTRAINT [DF_InspResult_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_UserLogin_IsLogin]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [DF_UserLogin_IsLogin] DEFAULT ((1)) FOR [IsLogOn];


GO
PRINT N'Creating [dbo].[DF_UserLogin_RefereshToken]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [DF_UserLogin_RefereshToken] DEFAULT (newid()) FOR [RefereshToken];


GO
PRINT N'Creating [dbo].[DF_UserLogin_IsCurrent]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [DF_UserLogin_IsCurrent] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_UserLogin_LastActivityDateTime]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [DF_UserLogin_LastActivityDateTime] DEFAULT (getutcdate()) FOR [LastActivityDateTime];


GO
PRINT N'Creating [dbo].[DF_Organization_Orgkey]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_Orgkey] DEFAULT (newid()) FOR [Orgkey];


GO
PRINT N'Creating [dbo].[DF_Organization_IsOutpatient]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_IsOutpatient] DEFAULT ((0)) FOR [IsOutpatient];


GO
PRINT N'Creating [dbo].[DF_Organization_IsActive]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Organization_IsParent]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_IsParent] DEFAULT ((0)) FOR [IsParent];


GO
PRINT N'Creating [dbo].[DF_Organization_IsTmsWo]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_IsTmsWo] DEFAULT ((0)) FOR [IsTmsWo];


GO
PRINT N'Creating [dbo].[DF_Organization_SegmentId]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_SegmentId] DEFAULT ((1)) FOR [SegmentId];


GO
PRINT N'Creating [dbo].[DF_Originations_CreatedDate]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Originations_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Organization_FireWatchTimeSlot]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [DF_Organization_FireWatchTimeSlot] DEFAULT ((4)) FOR [FireWatchTimeSlot];


GO
PRINT N'Creating unnamed constraint on [dbo].[Organization]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD DEFAULT 0 FOR [DefaultEPInspection];


GO
PRINT N'Creating [dbo].[DF_EPDocuments_IsDeleted]...';


GO
ALTER TABLE [dbo].[EPDocuments]
    ADD CONSTRAINT [DF_EPDocuments_IsDeleted] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EPDocuments_DocInspectionGroupId]...';


GO
ALTER TABLE [dbo].[EPDocuments]
    ADD CONSTRAINT [DF_EPDocuments_DocInspectionGroupId] DEFAULT ((0)) FOR [DocInspectionGroupId];


GO
PRINT N'Creating [dbo].[DF_EPDocuments_CreatedDate]...';


GO
ALTER TABLE [dbo].[EPDocuments]
    ADD CONSTRAINT [DF_EPDocuments_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_UserTypes_IsActive]...';


GO
ALTER TABLE [dbo].[UserTypes]
    ADD CONSTRAINT [DF_UserTypes_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EpBinder_IsActive]...';


GO
ALTER TABLE [dbo].[EpBinder]
    ADD CONSTRAINT [DF_EpBinder_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EpBinder_CreatedDate]...';


GO
ALTER TABLE [dbo].[EpBinder]
    ADD CONSTRAINT [DF_EpBinder_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_DeviceTypes_IsActive]...';


GO
ALTER TABLE [dbo].[DeviceTypes]
    ADD CONSTRAINT [DF_DeviceTypes_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_RoleGroup_IsActive]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [DF_RoleGroup_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_UserGroup_IsReadOnly]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [DF_UserGroup_IsReadOnly] DEFAULT ((0)) FOR [IsReadOnly];


GO
PRINT N'Creating [dbo].[DF_RoleGroup_CreatedDate]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [DF_RoleGroup_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[CityMaster]...';


GO
ALTER TABLE [dbo].[CityMaster]
    ADD DEFAULT ((0)) FOR [Zipcode];


GO
PRINT N'Creating [dbo].[DF_Status_IsActive]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [DF_Status_IsActive] DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Status_CreatedDate]...';


GO
ALTER TABLE [dbo].[Status]
    ADD CONSTRAINT [DF_Status_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Attachments_IsRejected]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [DF_Attachments_IsRejected] DEFAULT ((0)) FOR [IsRejected];


GO
PRINT N'Creating [dbo].[DF_Attachments_IsUsed]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [DF_Attachments_IsUsed] DEFAULT ((0)) FOR [IsUsed];


GO
PRINT N'Creating [dbo].[DF_Attachments_IsDeleted]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [DF_Attachments_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_Attachments_CreatedBy]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [DF_Attachments_CreatedBy] DEFAULT ((4)) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_Attachments_CreatedDate]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [DF_Attachments_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ICRA_ConstructionActivity_CreatedDate]...';


GO
ALTER TABLE [dbo].[ConstructionActivity]
    ADD CONSTRAINT [DF_ICRA_ConstructionActivity_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_GoalMaster_IsActive]...';


GO
ALTER TABLE [dbo].[Standards]
    ADD CONSTRAINT [DF_GoalMaster_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_TaskMaster_CreatedDate]...';


GO
ALTER TABLE [dbo].[Standards]
    ADD CONSTRAINT [DF_TaskMaster_CreatedDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_NotificationMapping_CreatedDate]...';


GO
ALTER TABLE [dbo].[NotificationMapping]
    ADD CONSTRAINT [DF_NotificationMapping_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Score_Value]...';


GO
ALTER TABLE [dbo].[Score]
    ADD CONSTRAINT [DF_Score_Value] DEFAULT (0) FOR [Value];


GO
PRINT N'Creating [dbo].[DF_Score_IsActive]...';


GO
ALTER TABLE [dbo].[Score]
    ADD CONSTRAINT [DF_Score_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Score_CreatedDate]...';


GO
ALTER TABLE [dbo].[Score]
    ADD CONSTRAINT [DF_Score_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_NotificationEvent_IsActive]...';


GO
ALTER TABLE [dbo].[NotificationEvent]
    ADD CONSTRAINT [DF_NotificationEvent_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_NotificationCategory_IsActive]...';


GO
ALTER TABLE [dbo].[NotificationCategory]
    ADD CONSTRAINT [DF_NotificationCategory_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Binders_IsActive]...';


GO
ALTER TABLE [dbo].[Binders]
    ADD CONSTRAINT [DF_Binders_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetsCategory_IsActive]...';


GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_AssetsCategory_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetsCategory_CreatedDate]...';


GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_AssetsCategory_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Manufactures_IsActive]...';


GO
ALTER TABLE [dbo].[Manufactures]
    ADD CONSTRAINT [DF_Manufactures_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Manufactures_CreateDate]...';


GO
ALTER TABLE [dbo].[Manufactures]
    ADD CONSTRAINT [DF_Manufactures_CreateDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_AssetType_IsInternal]...';


GO
ALTER TABLE [dbo].[AssetType]
    ADD CONSTRAINT [DF_AssetType_IsInternal] DEFAULT ((0)) FOR [IsInternal];


GO
PRINT N'Creating [dbo].[DF_AssetType_IsActive]...';


GO
ALTER TABLE [dbo].[AssetType]
    ADD CONSTRAINT [DF_AssetType_IsActive] DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssestType_CreateDate]...';


GO
ALTER TABLE [dbo].[AssetType]
    ADD CONSTRAINT [DF_AssestType_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_EPGroupsDetail_IsActive]...';


GO
ALTER TABLE [dbo].[EPGroupsDetail]
    ADD CONSTRAINT [DF_EPGroupsDetail_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Table_1_AddedOn]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF_Table_1_AddedOn] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF__Tips__IsApproved__2101D846]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__IsApproved__2101D846] DEFAULT ((0)) FOR [IsApproved];


GO
PRINT N'Creating [dbo].[DF__Tips__ShowContri__21F5FC7F]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__ShowContri__21F5FC7F] DEFAULT ((0)) FOR [ShowContributorName];


GO
PRINT N'Creating [dbo].[DF__Tips__ShowContri__22EA20B8]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__ShowContri__22EA20B8] DEFAULT ((0)) FOR [ShowContributorOrg];


GO
PRINT N'Creating [dbo].[DF__Tips__ShowContri__23DE44F1]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__ShowContri__23DE44F1] DEFAULT ((0)) FOR [ShowContributorPosition];


GO
PRINT N'Creating [dbo].[DF__Tips__TipType__24D2692A]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__TipType__24D2692A] DEFAULT ((1)) FOR [TipType];


GO
PRINT N'Creating [dbo].[DF__Tips__IsActive__19EAC663]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__IsActive__19EAC663] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF__Tips__IsCurrent__1ADEEA9C]...';


GO
ALTER TABLE [dbo].[Tips]
    ADD CONSTRAINT [DF__Tips__IsCurrent__1ADEEA9C] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_Steps_IsRA]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_IsRA] DEFAULT ((0)) FOR [IsRA];


GO
PRINT N'Creating [dbo].[DF_Steps_RAScore]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_RAScore] DEFAULT ((0)) FOR [RAScore];


GO
PRINT N'Creating [dbo].[DF_Steps_IsActive]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Steps_IsCurrent]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_IsCurrent] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_Steps_StepType]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_StepType] DEFAULT ((1)) FOR [StepType];


GO
PRINT N'Creating [dbo].[DF_Steps_IsIlsmLink]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_Steps_IsIlsmLink] DEFAULT ((0)) FOR [IsIlsmLink];


GO
PRINT N'Creating [dbo].[DF_CheckPoints_CreatedDate]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [DF_CheckPoints_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_AffectedEPs_IsActive]...';


GO
ALTER TABLE [dbo].[AffectedEPs]
    ADD CONSTRAINT [DF_AffectedEPs_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AffectedEPs_CreatedDate]...';


GO
ALTER TABLE [dbo].[AffectedEPs]
    ADD CONSTRAINT [DF_AffectedEPs_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EPGroups_IsActive]...';


GO
ALTER TABLE [dbo].[EPGroups]
    ADD CONSTRAINT [DF_EPGroups_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetInspFrequency_IsActive]...';


GO
ALTER TABLE [dbo].[AssetInspFrequency]
    ADD CONSTRAINT [DF_AssetInspFrequency_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetInspFrequency_CreatedDate]...';


GO
ALTER TABLE [dbo].[AssetInspFrequency]
    ADD CONSTRAINT [DF_AssetInspFrequency_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_UserProfile_UserProfileId]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_UserProfileId] DEFAULT (newid()) FOR [UserProfileId];


GO
PRINT N'Creating [dbo].[DF_UserProfile_Salt]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_Salt] DEFAULT (newid()) FOR [Salt];


GO
PRINT N'Creating [dbo].[DF_UserProfile_IsActive]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_UserProfile_IsSystemUser]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_IsSystemUser] DEFAULT ((0)) FOR [IsSystemUser];


GO
PRINT N'Creating [dbo].[DF_UserProfile_IsInternalUser]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_IsInternalUser] DEFAULT ((1)) FOR [IsInternalUser];


GO
PRINT N'Creating [dbo].[DF_UserProfile_isPwdChange]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_isPwdChange] DEFAULT ((0)) FOR [IsPwdChange];


GO
PRINT N'Creating [dbo].[DF_UserProfile_CreatedBy]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_CreatedBy] DEFAULT ((0)) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_UserProfile_CreatedDate]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_UserProfile_IsCRxUser]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [DF_UserProfile_IsCRxUser] DEFAULT ((0)) FOR [IsCRxUser];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserProfile]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD DEFAULT 200 FOR [UserStatusCode];


GO
PRINT N'Creating [dbo].[DF_EpAssets_isActive]...';


GO
ALTER TABLE [dbo].[EpAssets]
    ADD CONSTRAINT [DF_EpAssets_isActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EpAssets_CreatedDate]...';


GO
ALTER TABLE [dbo].[EpAssets]
    ADD CONSTRAINT [DF_EpAssets_CreatedDate] DEFAULT (getutcdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_UserOrganization_IsActive]...';


GO
ALTER TABLE [dbo].[UserOrganization]
    ADD CONSTRAINT [DF_UserOrganization_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Assets_IsActive]...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_Assets_IsStepOnReport]...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_IsStepOnReport] DEFAULT ((0)) FOR [IsStepsOnReport];


GO
PRINT N'Creating [dbo].[DF_Assets_CreatedDate]...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_CreatedDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DF_Assets_IsRouteInsp]...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [DF_Assets_IsRouteInsp] DEFAULT ((0)) FOR [IsRouteInsp];


GO
PRINT N'Creating [dbo].[DF_DocumnetType_IsActive]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumnetType_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_DocumnetType_CreatedDate]...';


GO
ALTER TABLE [dbo].[DocumentType]
    ADD CONSTRAINT [DF_DocumnetType_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_MainGoal_IsActive]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [DF_MainGoal_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_MainGoal_IsCurrent]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [DF_MainGoal_IsCurrent] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_CheckLists_CreatedDate]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [DF_CheckLists_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EPDetails_IsDocRequired]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_IsDocRequired] DEFAULT ((0)) FOR [IsDocRequired];


GO
PRINT N'Creating [dbo].[DF_EPDetails_IsActive]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_EPDetails_Isdeleted]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_Isdeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_EPDetails_IsIlsmEP]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_IsIlsmEP] DEFAULT ((0)) FOR [IsIlsmEP];


GO
PRINT N'Creating [dbo].[DF_EPDetails_IsAssetsRequired]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_IsAssetsRequired] DEFAULT ((0)) FOR [IsAssetsRequired];


GO
PRINT N'Creating [dbo].[DF_EPDetails_IsFrequencyChange]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_IsFrequencyChange] DEFAULT ((0)) FOR [IsFrequencyChange];


GO
PRINT N'Creating [dbo].[DF_EPDetails_Priority]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_Priority] DEFAULT ((0)) FOR [Priority];


GO
PRINT N'Creating unnamed constraint on [dbo].[EPDetails]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD DEFAULT (getutcdate()) FOR [EffectiveDate];


GO
PRINT N'Creating [dbo].[DF_EPDetails_CreatedDate]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [DF_EPDetails_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[EPDetails]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating unnamed constraint on [dbo].[EPDetails]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD DEFAULT (NewId()) FOR [EpdetailGuid];


GO
PRINT N'Creating [dbo].[DF_IlsmStepsMapping_IsActive]...';


GO
ALTER TABLE [dbo].[IlsmStepsMapping]
    ADD CONSTRAINT [DF_IlsmStepsMapping_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_IlsmStepsMapping_CreatedDate]...';


GO
ALTER TABLE [dbo].[IlsmStepsMapping]
    ADD CONSTRAINT [DF_IlsmStepsMapping_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_EPVersions_IsCurrent]...';


GO
ALTER TABLE [dbo].[EPVersions]
    ADD CONSTRAINT [DF_EPVersions_IsCurrent] DEFAULT ((1)) FOR [IsCurrent];


GO
PRINT N'Creating [dbo].[DF_ICRASteps_IsActive]...';


GO
ALTER TABLE [dbo].[ICRASteps]
    ADD CONSTRAINT [DF_ICRASteps_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ICRASteps_CreatedDate]...';


GO
ALTER TABLE [dbo].[ICRASteps]
    ADD CONSTRAINT [DF_ICRASteps_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ICRARiskArea_IsApporved]...';


GO
ALTER TABLE [dbo].[ICRARiskArea]
    ADD CONSTRAINT [DF_ICRARiskArea_IsApporved] DEFAULT ((2)) FOR [ApprovalStatus];


GO
PRINT N'Creating [dbo].[DF_ICRARiskArea_IsActive]...';


GO
ALTER TABLE [dbo].[ICRARiskArea]
    ADD CONSTRAINT [DF_ICRARiskArea_IsActive] DEFAULT ((0)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ICRARiskArea_IsSendEmail]...';


GO
ALTER TABLE [dbo].[ICRARiskArea]
    ADD CONSTRAINT [DF_ICRARiskArea_IsSendEmail] DEFAULT ((0)) FOR [IsSendEmail];


GO
PRINT N'Creating [dbo].[DF_ICRARiskArea_CreatedDate]...';


GO
ALTER TABLE [dbo].[ICRARiskArea]
    ADD CONSTRAINT [DF_ICRARiskArea_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_StandardManuals_IsApplicable]...';


GO
ALTER TABLE [dbo].[StandardManuals]
    ADD CONSTRAINT [DF_StandardManuals_IsApplicable] DEFAULT ((1)) FOR [IsApplicable];


GO
PRINT N'Creating [dbo].[DF_ICRAObsReportCheckPoints_IsActive]...';


GO
ALTER TABLE [dbo].[ICRAObsReportCheckPoints]
    ADD CONSTRAINT [DF_ICRAObsReportCheckPoints_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ICRAObsReportCheckPoints_CreatedDate]...';


GO
ALTER TABLE [dbo].[ICRAObsReportCheckPoints]
    ADD CONSTRAINT [DF_ICRAObsReportCheckPoints_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_FireExtinguisherTypes_IsActive]...';


GO
ALTER TABLE [dbo].[FireExtinguisherTypes]
    ADD CONSTRAINT [DF_FireExtinguisherTypes_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_FireExtinguisherTypes_Sequence]...';


GO
ALTER TABLE [dbo].[FireExtinguisherTypes]
    ADD CONSTRAINT [DF_FireExtinguisherTypes_Sequence] DEFAULT ((0)) FOR [Sequence];


GO
PRINT N'Creating [dbo].[DF_ICRAMatixPrecautions_IsActive]...';


GO
ALTER TABLE [dbo].[ICRAMatixPrecautions]
    ADD CONSTRAINT [DF_ICRAMatixPrecautions_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetsSubCategory_IsActive]...';


GO
ALTER TABLE [dbo].[AssetsSubCategory]
    ADD CONSTRAINT [DF_AssetsSubCategory_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_AssetsSubCategory_CreatedDate]...';


GO
ALTER TABLE [dbo].[AssetsSubCategory]
    ADD CONSTRAINT [DF_AssetsSubCategory_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_Table_1_RoundId]...';


GO
ALTER TABLE [dbo].[FireDrillQuestionnaires]
    ADD CONSTRAINT [DF_Table_1_RoundId] DEFAULT ((0)) FOR [FireDrillCatId];


GO
PRINT N'Creating [dbo].[DF_FireDrillQuestionnaires_IsActive]...';


GO
ALTER TABLE [dbo].[FireDrillQuestionnaires]
    ADD CONSTRAINT [DF_FireDrillQuestionnaires_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_FireDrillQuestionnaires_CreatedBy]...';


GO
ALTER TABLE [dbo].[FireDrillQuestionnaires]
    ADD CONSTRAINT [DF_FireDrillQuestionnaires_CreatedBy] DEFAULT ((4)) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_FireDrillQuestionnaires_CreatedDate]...';


GO
ALTER TABLE [dbo].[FireDrillQuestionnaires]
    ADD CONSTRAINT [DF_FireDrillQuestionnaires_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_FiredrillCategory_IsActive]...';


GO
ALTER TABLE [dbo].[FiredrillCategory]
    ADD CONSTRAINT [DF_FiredrillCategory_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_FiredrillCategory_CreatedDate]...';


GO
ALTER TABLE [dbo].[FiredrillCategory]
    ADD CONSTRAINT [DF_FiredrillCategory_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[FiredrillCategory]...';


GO
ALTER TABLE [dbo].[FiredrillCategory]
    ADD DEFAULT 1 FOR [IsCommonCat];


GO
PRINT N'Creating unnamed constraint on [dbo].[FiredrillCategory]...';


GO
ALTER TABLE [dbo].[FiredrillCategory]
    ADD DEFAULT 1 FOR [Applicable];


GO
PRINT N'Creating [dbo].[DF_ICRA_ConstructionType_IsActive]...';


GO
ALTER TABLE [dbo].[ConstructionType]
    ADD CONSTRAINT [DF_ICRA_ConstructionType_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ICRA_ConstructionType_CreatedDate]...';


GO
ALTER TABLE [dbo].[ConstructionType]
    ADD CONSTRAINT [DF_ICRA_ConstructionType_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ConstructionRisk_IsActive]...';


GO
ALTER TABLE [dbo].[ConstructionRisk]
    ADD CONSTRAINT [DF_ConstructionRisk_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ConstructionRisk_CreatedDate]...';


GO
ALTER TABLE [dbo].[ConstructionRisk]
    ADD CONSTRAINT [DF_ConstructionRisk_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_News_IsReleaseNotes]...';


GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_IsReleaseNotes] DEFAULT ((0)) FOR [IsReleaseNotes];


GO
PRINT N'Creating [dbo].[DF_News_Published]...';


GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_Published] DEFAULT ((1)) FOR [Published];


GO
PRINT N'Creating [dbo].[DF_News_IsDeleted]...';


GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_News_CreatedOn]...';


GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];


GO
PRINT N'Creating [dbo].[DF_ConstructionClassActivity_CreatedDate]...';


GO
ALTER TABLE [dbo].[ConstructionClassActivity]
    ADD CONSTRAINT [DF_ConstructionClassActivity_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ConstructionClass_IsActive]...';


GO
ALTER TABLE [dbo].[ConstructionClass]
    ADD CONSTRAINT [DF_ConstructionClass_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ConstructionClass_CreatedDate]...';


GO
ALTER TABLE [dbo].[ConstructionClass]
    ADD CONSTRAINT [DF_ConstructionClass_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[CmsEpMapping]...';


GO
ALTER TABLE [dbo].[CmsEpMapping]
    ADD DEFAULT getutcdate() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[CmsEpMapping]...';


GO
ALTER TABLE [dbo].[CmsEpMapping]
    ADD DEFAULT 0 FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[CopStdesc]...';


GO
ALTER TABLE [dbo].[CopStdesc]
    ADD DEFAULT getutcdate() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[CopDetails]...';


GO
ALTER TABLE [dbo].[CopDetails]
    ADD DEFAULT getutcdate() FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ProjectType1_IsActive]...';


GO
ALTER TABLE [dbo].[ProjectType]
    ADD CONSTRAINT [DF_ProjectType1_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_ProjectType1_CreatedDate]...';


GO
ALTER TABLE [dbo].[ProjectType]
    ADD CONSTRAINT [DF_ProjectType1_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_SyncMongoMaster_IsMainTable]...';


GO
ALTER TABLE [dbo].[SyncMongoMaster]
    ADD CONSTRAINT [DF_SyncMongoMaster_IsMainTable] DEFAULT ((0)) FOR [IsMasterTable];


GO
PRINT N'Creating [dbo].[DF_SyncMongoMaster_IsApplicable]...';


GO
ALTER TABLE [dbo].[SyncMongoMaster]
    ADD CONSTRAINT [DF_SyncMongoMaster_IsApplicable] DEFAULT ((0)) FOR [IsApplicable];


GO
PRINT N'Creating [dbo].[DF_SyncMongoMaster_IsStructureOnly]...';


GO
ALTER TABLE [dbo].[SyncMongoMaster]
    ADD CONSTRAINT [DF_SyncMongoMaster_IsStructureOnly] DEFAULT ((0)) FOR [IsStructureOnly];


GO
PRINT N'Creating [dbo].[DF_SyncMongoMaster_IsMainDbTable]...';


GO
ALTER TABLE [dbo].[SyncMongoMaster]
    ADD CONSTRAINT [DF_SyncMongoMaster_IsMainDbTable] DEFAULT ((0)) FOR [IsMainDbTable];


GO
PRINT N'Creating [dbo].[DF_SyncMongoMaster_LastSyncDateTime]...';


GO
ALTER TABLE [dbo].[SyncMongoMaster]
    ADD CONSTRAINT [DF_SyncMongoMaster_LastSyncDateTime] DEFAULT (getdate()) FOR [LastSyncDateTime];


GO
PRINT N'Creating unnamed constraint on [dbo].[RoundsQuestionnaires]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD DEFAULT 1 FOR [IsCommonRoundQues];


GO
PRINT N'Creating [dbo].[DF_RoundsQuestionnaires_IsShared]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD CONSTRAINT [DF_RoundsQuestionnaires_IsShared] DEFAULT ((0)) FOR [IsShared];


GO
PRINT N'Creating [dbo].[DF_RoundsQuestionnaires_IsActive]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD CONSTRAINT [DF_RoundsQuestionnaires_IsActive] DEFAULT ((1)) FOR [IsActive];


GO
PRINT N'Creating [dbo].[DF_RoundsQuestionnaires_RiskType]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD CONSTRAINT [DF_RoundsQuestionnaires_RiskType] DEFAULT ('') FOR [RiskType];


GO
PRINT N'Creating [dbo].[DF_RoundItems_CreatedBy]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD CONSTRAINT [DF_RoundItems_CreatedBy] DEFAULT ((4)) FOR [CreatedBy];


GO
PRINT N'Creating [dbo].[DF_RoundItems_CreatedAt]...';


GO
ALTER TABLE [dbo].[RoundsQuestionnaires]
    ADD CONSTRAINT [DF_RoundItems_CreatedAt] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[RoundCategory]...';


GO
ALTER TABLE [dbo].[RoundCategory]
    ADD DEFAULT 1 FOR [IsCommonCat];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModuleMaster]...';


GO
ALTER TABLE [dbo].[ModuleMaster]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[ModuleMaster]...';


GO
ALTER TABLE [dbo].[ModuleMaster]
    ADD DEFAULT getutcdate() FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[VendorOrganizations]...';


GO
ALTER TABLE [dbo].[VendorOrganizations]
    ADD DEFAULT 1 FOR [IsRequested];


GO
PRINT N'Creating unnamed constraint on [dbo].[VendorOrganizations]...';


GO
ALTER TABLE [dbo].[VendorOrganizations]
    ADD DEFAULT 1 FOR [IsOrgVendor];


GO
PRINT N'Creating [dbo].[DF_VendorOrganizations_RequestId]...';


GO
ALTER TABLE [dbo].[VendorOrganizations]
    ADD CONSTRAINT [DF_VendorOrganizations_RequestId] DEFAULT (newid()) FOR [InvitationId];


GO
PRINT N'Creating [dbo].[DF_VendorOrganizations_RequestedDate]...';


GO
ALTER TABLE [dbo].[VendorOrganizations]
    ADD CONSTRAINT [DF_VendorOrganizations_RequestedDate] DEFAULT (getutcdate()) FOR [RequestedDate];


GO
PRINT N'Creating [dbo].[FK_RolesInGroups_Roles]...';


GO
ALTER TABLE [dbo].[RolesInGroups]
    ADD CONSTRAINT [FK_RolesInGroups_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FK_RolesInGroups_UserGroup]...';


GO
ALTER TABLE [dbo].[RolesInGroups]
    ADD CONSTRAINT [FK_RolesInGroups_UserGroup] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[UserGroup] ([GroupId]);


GO
PRINT N'Creating [dbo].[FK_EPFrequency_EPDetails]...';


GO
ALTER TABLE [dbo].[EPFrequency]
    ADD CONSTRAINT [FK_EPFrequency_EPDetails] FOREIGN KEY ([EpDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_InspStatus_InspResult]...';


GO
ALTER TABLE [dbo].[InspStatus]
    ADD CONSTRAINT [FK_InspStatus_InspResult] FOREIGN KEY ([InspResultId]) REFERENCES [dbo].[InspResult] ([InspResultId]);


GO
PRINT N'Creating [dbo].[FK_UserLogin_DeviceTypes]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [FK_UserLogin_DeviceTypes] FOREIGN KEY ([DeviceTypeId]) REFERENCES [dbo].[DeviceTypes] ([DeviceTypeId]);


GO
PRINT N'Creating [dbo].[FK_UserLogin_UserLogin]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [FK_UserLogin_UserLogin] FOREIGN KEY ([UserLoginId]) REFERENCES [dbo].[UserLogin] ([UserLoginId]);


GO
PRINT N'Creating [dbo].[FK_UserLogin_UserProfile]...';


GO
ALTER TABLE [dbo].[UserLogin]
    ADD CONSTRAINT [FK_UserLogin_UserProfile] FOREIGN KEY ([UserId]) REFERENCES [dbo].[UserProfile] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Organization_Organization]...';


GO
ALTER TABLE [dbo].[Organization]
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([Orgkey]) REFERENCES [dbo].[Organization] ([Orgkey]);


GO
PRINT N'Creating [dbo].[FK_EPDocuments_EPDetails]...';


GO
ALTER TABLE [dbo].[EPDocuments]
    ADD CONSTRAINT [FK_EPDocuments_EPDetails] FOREIGN KEY ([EPDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_EpBinder_Binders]...';


GO
ALTER TABLE [dbo].[EpBinder]
    ADD CONSTRAINT [FK_EpBinder_Binders] FOREIGN KEY ([BinderId]) REFERENCES [dbo].[Binders] ([BinderId]);


GO
PRINT N'Creating [dbo].[FK_EpBinder_EPDetails]...';


GO
ALTER TABLE [dbo].[EpBinder]
    ADD CONSTRAINT [FK_EpBinder_EPDetails] FOREIGN KEY ([EPDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_Attachments_IncomingMail]...';


GO
ALTER TABLE [dbo].[Attachments]
    ADD CONSTRAINT [FK_Attachments_IncomingMail] FOREIGN KEY ([DocumentRepoId]) REFERENCES [dbo].[IncomingMail] ([DocumentRepoId]);


GO
PRINT N'Creating [dbo].[FK_StandardDesc_Category]...';


GO
ALTER TABLE [dbo].[Standards]
    ADD CONSTRAINT [FK_StandardDesc_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([CategoryId]);


GO
PRINT N'Creating [dbo].[FK_Steps_MainGoal]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [FK_Steps_MainGoal] FOREIGN KEY ([MainGoalId]) REFERENCES [dbo].[MainGoal] ([MainGoalId]);


GO
PRINT N'Creating [dbo].[FK_Steps_UserProfile]...';


GO
ALTER TABLE [dbo].[Steps]
    ADD CONSTRAINT [FK_Steps_UserProfile] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[UserProfile] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_AffectedEPs_EPDetails]...';


GO
ALTER TABLE [dbo].[AffectedEPs]
    ADD CONSTRAINT [FK_AffectedEPs_EPDetails] FOREIGN KEY ([AffectedEPDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_AffectedEPs_Steps]...';


GO
ALTER TABLE [dbo].[AffectedEPs]
    ADD CONSTRAINT [FK_AffectedEPs_Steps] FOREIGN KEY ([StepsId]) REFERENCES [dbo].[Steps] ([StepsId]);


GO
PRINT N'Creating [dbo].[FK_UserProfile_Organization]...';


GO
ALTER TABLE [dbo].[UserProfile]
    ADD CONSTRAINT [FK_UserProfile_Organization] FOREIGN KEY ([Orgkey]) REFERENCES [dbo].[Organization] ([Orgkey]);


GO
PRINT N'Creating [dbo].[FK_EpAssets_Assets]...';


GO
ALTER TABLE [dbo].[EpAssets]
    ADD CONSTRAINT [FK_EpAssets_Assets] FOREIGN KEY ([AssetId]) REFERENCES [dbo].[Assets] ([AssetId]);


GO
PRINT N'Creating [dbo].[FK_EpAssets_EPDetails]...';


GO
ALTER TABLE [dbo].[EpAssets]
    ADD CONSTRAINT [FK_EpAssets_EPDetails] FOREIGN KEY ([EPDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_Assets_AssetType]...';


GO
ALTER TABLE [dbo].[Assets]
    ADD CONSTRAINT [FK_Assets_AssetType] FOREIGN KEY ([AssetTypeId]) REFERENCES [dbo].[AssetType] ([TypeId]);


GO
PRINT N'Creating [dbo].[FK_MainGoal_Assets]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [FK_MainGoal_Assets] FOREIGN KEY ([AssetId]) REFERENCES [dbo].[Assets] ([AssetId]);


GO
PRINT N'Creating [dbo].[FK_MainGoal_DocumentType]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [FK_MainGoal_DocumentType] FOREIGN KEY ([DocTypeId]) REFERENCES [dbo].[DocumentType] ([DocTypeId]);


GO
PRINT N'Creating [dbo].[FK_MainGoal_EPDetails]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [FK_MainGoal_EPDetails] FOREIGN KEY ([EPDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_MainGoal_FrequencyMaster]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [FK_MainGoal_FrequencyMaster] FOREIGN KEY ([FrequencyId]) REFERENCES [dbo].[FrequencyMaster] ([FrequencyId]);


GO
PRINT N'Creating [dbo].[FK_MainGoal_UserProfile]...';


GO
ALTER TABLE [dbo].[MainGoal]
    ADD CONSTRAINT [FK_MainGoal_UserProfile] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[UserProfile] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_EPDetails_StandardDesc]...';


GO
ALTER TABLE [dbo].[EPDetails]
    ADD CONSTRAINT [FK_EPDetails_StandardDesc] FOREIGN KEY ([StDescID]) REFERENCES [dbo].[Standards] ([StDescID]);


GO
PRINT N'Creating [dbo].[FK_StandardManuals_EPDetails]...';


GO
ALTER TABLE [dbo].[StandardManuals]
    ADD CONSTRAINT [FK_StandardManuals_EPDetails] FOREIGN KEY ([EpDetailId]) REFERENCES [dbo].[EPDetails] ([EPDetailId]);


GO
PRINT N'Creating [dbo].[FK_StandardManuals_HospitalType]...';


GO
ALTER TABLE [dbo].[StandardManuals]
    ADD CONSTRAINT [FK_StandardManuals_HospitalType] FOREIGN KEY ([HospitalTypeId]) REFERENCES [dbo].[HospitalType] ([HospitalTypeId]);


GO
PRINT N'Creating [dbo].[FK_StandardManuals_Standards]...';


GO
ALTER TABLE [dbo].[StandardManuals]
    ADD CONSTRAINT [FK_StandardManuals_Standards] FOREIGN KEY ([StDescID]) REFERENCES [dbo].[Standards] ([StDescID]);


GO
PRINT N'Creating [dbo].[FK_News_UserProfile]...';


GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [FK_News_UserProfile] FOREIGN KEY ([CreatedBy]) REFERENCES [dbo].[UserProfile] ([UserId]);


GO
PRINT N'Creating [dbo].[Trg_RolesinGroups]...';


GO

-- =============================================
-- Author:		MOHIT YADAV
-- Create date: 28 SEP 2020
-- Description:	TRIGGER FOR INSERTION INTO RolesinGroups TABLE AFTER INSER OPERATION ON Roles TABLE
-- =============================================
Create TRIGGER [dbo].[Trg_RolesinGroups]
   ON  [dbo].[Roles]
   AFTER  INSERT
AS 
BEGIN
	
	SET NOCOUNT ON;
	
    INSERT INTO dbo.RolesinGroups(
		 groupId
		,RoleId
		,Status
    )
    SELECT
	   ug.GrouPId
       ,i.RoleId
	   ,case When ug.GroupId=1 then 1 else 0 end as 'Status'
    FROM
        inserted i ,dbo.UserGroup ug
		where  ug.IsActive=1
		 
	End
GO
PRINT N'Creating [dbo].[Trg_Roles]...';


GO
-- =============================================
-- Author:		MOHIT YADAV
-- Create date: 24 SEP 2020
-- Description:	TRIGGER FOR INSERTION INTO ROLES TABLE AFTER INSER OPERATION ON MENU TABLE
-- =============================================
Create TRIGGER [dbo].[Trg_Roles]
   ON  dbo.Menus
   AFTER  INSERT
AS 
BEGIN
	
	SET NOCOUNT ON;
	IF EXISTS (SELECT 1 FROM  inserted i WHERE i.ParentId not in(0) )
	Begin
	Declare @ParentID_Menu int , @ParentId_Roles int ;
	select @ParentID_Menu= i.ParentId from inserted i;
	select @ParentId_Roles = RoleId from dbo.Roles  where DisplayText = (Select name From dbo.Menus where Id =isnull(@ParentID_Menu,0))
	End
	if EXISTS (SELECT 1 FROM  inserted i WHERE i.Type not in(2))
	BEGIN
    INSERT INTO dbo.Roles(
		 RoleName
		,Sequence
		,IsActive
		,DisplayText
		,ParentId
		,IsChild
		,CreatedBy
		,CreatedDate
		,IsUserRole
    )
    SELECT
        i.Alias,
        i.Seq,
		i.IsActive,
		i.Name,
		isnull(@ParentId_Roles,0),
		case when @ParentID_Menu is null then 0 else 1 end,
		i.CreatedBy,
		i.CreatedDate,
		0
    FROM
        inserted i
	END
END
GO
PRINT N'Creating [dbo].[InsertRoleInGroup]...';


GO

CREATE TRIGGER InsertRoleInGroup
   ON  UserGroup
   AFTER INSERT
AS 
BEGIN

declare @usergroupId int;

Select @usergroupId=GroupId from inserted i
INSERT INTO [dbo].[RolesInGroups]
           ([RoleId]
           ,[GroupId]
           ,[Status])
    Select RoleId,@usergroupId,0 from Roles

END
GO
PRINT N'Creating [dbo].[Trg_Epdetail]...';


GO
-- =============================================
-- Author:		MOHIT YADAV
-- Create date: 10 DEC 2020
-- Description:	TRIGGER FOR UPDATION INTO EPDetails TABLE AFTER UPDATE OPERATION ON eps CREATED BEFORE 15 DAYS  IN TABLE
-- =============================================
CREATE TRIGGER [dbo].[Trg_Epdetail]
   ON  [dbo].[EPDetails]
   AFTER  Update
AS 
BEGIN
	
	SET NOCOUNT ON;
	Declare @EPDetailId int
	select @EPDetailId=i.EPDetailId from inserted i;
	if EXISTS (select * from Dbo.EPDetails eps where eps.EPDetailId= @EPDetailId and eps.CreatedDate  <= DATEADD(day,-15, GETUTCDATE()) )
        UPDATE  dbo.EPDetails SET  LastUpdatedDate=GETUTCDATE() WHERE EPDetailId=@EPDetailId
   	 
	End
GO
PRINT N'Creating [dbo].[View_MasterEps]...';


GO
CREATE VIEW [dbo].[View_MasterEps]
	AS 
SELECT c.CategoryId,c.Name ,EP.StDescID,EP.EpdetailId,TJCStandard,EPNumber
FROM dbo.EPDetails EP 
inner join dbo.Standards S on S.stdescId=EP.stdescId
inner join dbo.Category c on C.CategoryId=S.CategoryId
GO
PRINT N'Creating [dbo].[view_cmsEPs]...';


GO
CREATE VIEW [dbo].[view_cmsEPs]
AS
SELECT        CopDetails.CopDetailsId, CopDetails.CopStdescId,CopDetails.RequirementName, CopDetails.CopText, CopDetails.EPTextID, CopStdesc.CopName, CopStdesc.CopTitle, 
                         CopStdesc.TagCode
FROM            CopDetails INNER JOIN
                         CopStdesc ON CopDetails.CopStdescId = CopStdesc.CopStdescId
GO
PRINT N'Creating [dbo].[ProperCase]...';


GO
create function [dbo].[ProperCase](@Text as varchar(8000))
returns varchar(8000)
as
begin
  declare @Reset bit;
  declare @Ret varchar(8000);
  declare @i int;
  declare @c char(1);

  if @Text is null
    return null;

  select @Reset = 1, @i = 1, @Ret = '';

  while (@i <= len(@Text))
    select @c = substring(@Text, @i, 1),
      @Ret = @Ret + case when @Reset = 1 then UPPER(@c) else LOWER(@c) end,
      @Reset = case when @c like '[a-zA-Z]' then 0 else 1 end,
      @i = @i + 1
  return @Ret
end
GO
PRINT N'Creating [dbo].[InitCap]...';


GO
CREATE FUNCTION [dbo].[InitCap] ( @InputString varchar(max) ) 
RETURNS VARCHAR(Max)
AS
BEGIN

DECLARE @Index          INT
DECLARE @Char           CHAR(1)
DECLARE @PrevChar       CHAR(1)
DECLARE @OutputString   VARCHAR(255)

SET @OutputString = LOWER(@InputString)
SET @Index = 1

WHILE @Index <= LEN(@InputString)
BEGIN
    SET @Char     = SUBSTRING(@InputString, @Index, 1)
    SET @PrevChar = CASE WHEN @Index = 1 THEN ' '
                         ELSE SUBSTRING(@InputString, @Index - 1, 1)
                    END

    IF @PrevChar IN (' ', ';', ':', '!', '?', ',', '.', '_', '-', '/', '&', '''', '(')
    BEGIN
        IF @PrevChar != '''' OR UPPER(@Char) != 'S'
            SET @OutputString = STUFF(@OutputString, @Index, 1, UPPER(@Char))
    END

    SET @Index = @Index + 1
END

RETURN @OutputString

END
GO
PRINT N'Creating [dbo].[fnFirstieInitials]...';


GO
CREATE FUNCTION [dbo].[fnFirstieInitials] ( @str NVARCHAR(4000) )
RETURNS NVARCHAR(2000)
AS
BEGIN
    DECLARE @retval NVARCHAR(2000);

    SET @str=RTRIM(LTRIM(@str));
    SET @retval=LEFT(@str,1);

    WHILE CHARINDEX(' ',@str,1)>0 BEGIN
        SET @str=LTRIM(RIGHT(@str,LEN(@str)-CHARINDEX(' ',@str,1)));
        SET @retval+=LEFT(@str,1);
    END

    RETURN @retval;
END
GO
PRINT N'Creating [dbo].[SplitString]...';


GO
-- =============================================
-- Author:  Anoop
-- ALTER date: 2016-11-04 05:40:16.700
-- Description: Pass comma separated (delimited) values as Parameter to Stored Procedure in SQL Server
-- =============================================
Create FUNCTION [dbo].[SplitString]
(    
      @Input NVARCHAR(MAX),
      @Character CHAR(1)
)
RETURNS @Output TABLE (
      Item NVARCHAR(MAX),
   Row# int
)
AS
BEGIN
      DECLARE @StartIndex INT, @EndIndex INT
      DECLARE @Sequence INT
      SET @StartIndex = 1

	  -- remove last comma
	  Select @Input= case when right(rtrim(@Input),1) = ',' then substring(rtrim(@Input),1,len(rtrim(@Input))-1) else @Input END 

   Set @Sequence=0;
      IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
      BEGIN
            SET @Input = @Input + @Character
      END
      WHILE CHARINDEX(@Character, @Input) > 0
      BEGIN
            SET @EndIndex = CHARINDEX(@Character, @Input)
            INSERT INTO @Output(Item,Row#)
            SELECT SUBSTRING(LTrim(@Input), @StartIndex, @EndIndex - 1),@Sequence
            SET @Sequence = @Sequence + 1
            SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
      END
      RETURN
END
GO
PRINT N'Creating [dbo].[Trg_EpRelation]...';


GO
CREATE TRIGGER [dbo].[Trg_EpRelation]
   ON  [dbo].[EpRelation]
   AFTER   Insert 
AS 
BEGIN
	
	SET NOCOUNT ON;
	Declare @EPDetailIds nvarchar(max)
	select @EPDetailIds=i.RelatedTo from inserted i;	
    UPDATE  dbo.EPDetails SET  IsRelation=1 WHERE EPDetailId in (Select distinct item from dbo.SplitString(@EPDetailIds,','))
   	 
	End
GO
PRINT N'Creating [dbo].[Trigger_ModuleMaster]...';


GO

CREATE TRIGGER Trigger_ModuleMaster
   ON  ModuleMaster
   AFTER UPDATE
AS 
BEGIN
   declare @moduleId int ;
   declare @oldMenuIds nvarchar(max);  
   declare @UserId int;
   SELECT @moduleId= INSERTED.ModuleId,@UserId= INSERTED.CreatedBy  FROM INSERTED
   IF UPDATE(MenuIds)
   BEGIn  
       declare @menuIds nvarchar(max);
       Select @menuIds=MenuIds from dbo.ModuleMaster Where ModuleId=@moduleId and MenuIds is not null
       delete from dbo.OrgServices Where ModuleId=@moduleId and MenuID is not null
       INSERT INTO dbo.OrgServices (MenuID,OrganizationKey,Status,Createdby,ModuleId)
       SELECT distinct Item,OrganizationKey,1,@UserId,@moduleId FROM dbo.SplitString(@menuIds, ','), dbo.OrgServices orgSer
        Where ModuleId=@moduleId and orgSer.Status=1  order by OrganizationKey,Item
 END
END
GO
PRINT N'Creating [dbo].[Get_EPGroupsDetail]...';


GO
CREATE proc [dbo].[Get_EPGroupsDetail]  
As  
Begin  
   select * from EPGroupsDetail
End
GO
PRINT N'Creating [dbo].[Get_EPGroupNameList]...';


GO
CREATE procedure [dbo].[Get_EPGroupNameList]  
As  
Begin  
   select * from EPGroups
End
GO
PRINT N'Creating [dbo].[Get_DocumentTypesMaster]...';


GO
CREATE procedure [dbo].[Get_DocumentTypesMaster]
As
Begin
Select * from [dbo].DocumentType  order by Name 
Select BinderId,BinderName from Binders Where IsActive=1
END
GO
PRINT N'Creating [dbo].[Get_Documents]...';


GO
CREATE Procedure [dbo].[Get_Documents] -- null,23132,null
@clientNo int=0,
@docRepoId int =0, 
@fileId int =0
As
Begin
if(@clientNo >0)
BEGIN
Select * from [dbo].IncomingMail IM
--inner join Attachments on Attachments.DocumentRepoId=IM.DocumentRepoId 
Where ParentDocumentRepoId=0 and IsDeleted=0 and IM.IsDeleted=0 and ClientNo=@clientNo 
and DocumentRepoId in (select DocumentRepoId from Attachments)
order by ReceivedDate desc
Select attch.* from [dbo].Attachments attch 
inner join [dbo].IncomingMail doc on doc.DocumentRepoId=attch.DocumentRepoId
Where doc.IsDeleted=0 and attch.IsDeleted =0
and ClientNo=@clientNo
----and (attch.Extension='pdf' or attch.Extension='doc' or attch.Extension='docx' or attch.Extension='xls') 
END
else if(@docRepoId >0)
BEGIN
Select * from [dbo].IncomingMail IM Where DocumentRepoId=@docRepoId
Select attch.* from [dbo].Attachments attch 
Where attch.DocumentRepoId=@docRepoId and attch.IsDeleted =0 
--and (attch.Extension='pdf' or attch.Extension='doc' or attch.Extension='docx' or attch.Extension='xls')
END
else if(@fileId >0)
BEGIN
Select attch.* from [dbo].Attachments attch
Where attch.Id=@fileId and attch.IsDeleted =0
--and (attch.Extension='pdf' or attch.Extension='doc' or attch.Extension='docx' or attch.Extension='xls')
END
End
GO
PRINT N'Creating [dbo].[Get_ConstructionType]...';


GO
CREATE proc [dbo].[Get_ConstructionType]
@constructiontypeid int =null
As
Begin
  select * from ConstructionType where ConstructionTypeId = isnull(@constructiontypeid,ConstructionTypeId)

  select * from ConstructionActivity where ConstructionTypeId = isnull(@constructiontypeid,ConstructionTypeId)
End
GO
PRINT N'Creating [dbo].[Get_ConstructionClass]...';


GO
CREATE proc [dbo].[Get_ConstructionClass]
@ConstructionClassId int =null
As
Begin
  select * from ConstructionClass where ConstructionClassId = isnull(@ConstructionClassId,ConstructionClassId)

  select * from ConstructionClassActivity where ConstClassId = isnull(@ConstructionClassId,ConstClassId)
End
GO
PRINT N'Creating [dbo].[Get_ChildOrganization]...';


GO
CREATE procedure [dbo].[Get_ChildOrganization] --'eb2c8600-cdfe-427f-86a5-73df567f432c'

@ParentOrgKey uniqueidentifier

As

Begin

Select * from [dbo].Organization Where ParentOrgKey=@ParentOrgKey and IsActive=1

end
GO
PRINT N'Creating [dbo].[Get_BuildVersions]...';


GO
CREATE proc [dbo].[Get_BuildVersions]
As
BEgin
Select * from [dbo].BuildVersion order by ReleaseDate,Iscurrent Desc
END
GO
PRINT N'Creating [dbo].[Get_All_Tips]...';


GO
-- =============================================  
-- Author:  PK  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE [dbo].[Get_All_Tips]   
 -- Add the parameters for the stored procedure here  
 @clientNo int = null  
AS  
BEGIN  
   
 SELECT * from Tips left join Menus on Menus.Alias=Tips.RouteUrl --Where IsActive=1 --and IsApproved=1-- where (ClientNo=isnull(@clientNo,ClientNo) OR ClientNo is null) and (IsCurrent=1 or IsApproved=2);  
END
GO
PRINT N'Creating [dbo].[FlagRecoveryCode]...';


GO
CREATE proc [dbo].[FlagRecoveryCode]
@RecoveryToken uniqueidentifier
As
BEgin
UPDATE [dbo].PasswordResetRequests SET RecoveredOn=GETUTCDATE() WHERE RecoveryMethod='E' AND RecoveryToken=@RecoveryToken AND Status='Y';
END
GO
PRINT N'Creating [dbo].[Delete_News]...';


GO
create Procedure [dbo].[Delete_News] 
(
@Id int
)
As
Begin
 Update News set IsDeleted=1 where Id= @Id 
end
GO
PRINT N'Creating [dbo].[Delete_DocumentTypeMaster]...';


GO
create Procedure [dbo].[Delete_DocumentTypeMaster]
(
 @DocTypeId int
)
As
Begin
 Update DocumentType set IsActive=0 where DocTypeId= @DocTypeId 
end
GO
PRINT N'Creating [dbo].[Check_IsExistingUser]...';


GO
CREATE Procedure [dbo].[Check_IsExistingUser] --'anoop@hcfcompliance.com'
@UserName nvarchar(150)
As
Begin
   
if exists( SELECT 1 FROM [dbo].UserProfile WHERE UserName=@UserName or Email=@UserName)
begin
   SELECT top 1 CAST(IsActive as varchar(10)) IsActive FROM [dbo].UserProfile WHERE UserName=@UserName or Email=@UserName 
END
else
Begin
   Select -1
end  
  
ENd
GO
PRINT N'Creating [dbo].[ChangerecoverPassword]...';


GO
CReate PROC [dbo].[ChangerecoverPassword]
(
@userName nvarchar(500),
@Password nvarchar(max),
@RecoveryCode nvarchar(100)= null,
@Salt uniqueidentifier
)
as
BEGIN
  update [dbo].UserProfile set Password = @Password , Salt = @Salt where UserName =@userName
END
GO
PRINT N'Creating [dbo].[AuthenticateUser]...';


GO
--[dbo].[AuthenticateUser] 'admin@hcf.com','dCRZekwToLDJP5npttwr+14sdvMh62ZypNQRJ/P7TlU=','335647076',3 ,'2.7.6.2'  
CREATE PROCEDURE [dbo].[AuthenticateUser] --'admin@hcf.com','dCRZekwToLDJP5npttwr+14sdvMh62ZypNQRJ/P7TlU=','335647076',3 ,'2.7.6.2'  
@userName nvarchar(50),    
@password nvarchar(200), 
@deviceToken nvarchar(200) = '0',  
@deviceType int = 3,
@version nvarchar(15) =null,
@ipAddress  nvarchar(25) =null
AS    
BEGIN   

declare @userId int;
declare @userProfileID uniqueidentifier;
declare @OrgKey uniqueidentifier; 
declare @RefereshToken uniqueidentifier;
declare @dbName nvarchar(40); 
declare @sqlQuery nvarchar(max);
set @RefereshToken=NEWID(); 


IF EXISTS (Select UserId from [UserProfile] WHERE UserName=@userName and Password=@password)  
BEGIN 
 Select @userId=UserId,@userProfileId=UserProfileId,@OrgKey=Orgkey from [dbo].[UserProfile]  WHERE UserName=@userName and Password=@password
  
 update UserLogin set IsLogOn=0,IsCurrent=0 Where UserId=@UserId and DeviceTypeId=@deviceType and DeviceId=@deviceToken

 INSERT INTO [dbo].[UserLogin]
  ([UserId] ,[DeviceId] ,[DeviceTypeId],[IsLogOn] ,[LogOnDate] ,UserProfileId,BuildVersion,RefereshToken) 
 VALUES  
  (@userId ,@deviceToken,@deviceType,1,getutcdate() ,@userProfileId,@version,@RefereshToken)  
  
 if(@OrgKey is not null)  
 BEGIN 
            Select @dbName=DbName from Organization WHERE Orgkey=@OrgKey   
            set @sqlQuery= @dbName+'.dbo.AuthenticateOrgUser '+convert(nvarchar(40), @userId)+' ,'''+convert(nvarchar(40), @RefereshToken)+'''' ;
            EXECUTE sp_executesql @sqlQuery 
 END    
  
END
END
GO
PRINT N'Creating [dbo].[AssetType_CRUD]...';


GO
CREATE PROCEDURE [dbo].[AssetType_CRUD]
(
       @Name nvarchar(50) 
       ,@CreatedBy int
	   ,@TypeId int = null
	   ,@IsActive bit = null
	   ,@AssetTypeCode nvarchar(10)
	   ,@newId int output
)
As
BEGIN
   SET NOCOUNT ON; 
      BEGIN
	  IF(@TypeId > 0)
	   BEGIN
		   UPDATE [dbo].[AssetType]  SET [Name] = @Name, [IsActive] = @IsActive,AssetTypeCode=@AssetTypeCode
		   WHERE AssetTypeCode=@AssetTypeCode;
		   select @newId =(select TypeId from AssetType where AssetTypeCode = @AssetTypeCode)
	  END
	  ELSE
	  BEGIN
		 IF EXISTS (SELECT 1 FROM [dbo].[AssetType] AST WHERE AST.AssetTypeCode = @AssetTypeCode)
			 BEGIN
				Select @newId = -1
			 END
		 ELSE
			 BEGIN
			    INSERT INTO [dbo].[AssetType]([Name],[IsActive],[CreateDate],[CreatedBy],AssetTypeCode)
				VALUES (@Name,@IsActive,getdate(),@CreatedBy,@AssetTypeCode)
			    SELECT @newId = Scope_Identity()
				RETURN @newID
			END
	  END
	 
	  RETURN @newID
      END
  END
GO
PRINT N'Creating [dbo].[Insert_AssignEPs]...';


GO
CREATE procedure [dbo].[Insert_AssignEPs]
@epdetailId int= null,
@epgroupId int =null,
@status bit,
@createdby int =null
--@newId int output
As
Begin 
IF EXISTS (SELECT 1 FROM  [EPGroupsDetail] WHERE EPDetailId=@epdetailId and EPGroupId=@epgroupId )
	BEGIN
		UPDATE EPGroupsDetail
		SET [IsActive] = @status
		WHERE EPDetailId=@epdetailId and EPGroupId=@epgroupId
   	    return @epgroupId
	END
	ELSE
	BEGIN
		 INSERT INTO [dbo].[EPGroupsDetail]
				   ([EPGroupId]
				   ,[EPDetailId]
				   ,[IsActive])
	     VALUES
				   (@epgroupId,
				  @epdetailId,
				   @status)
			 --   select @newId = Scope_Identity()
				--return @newId
	 END
END
GO
PRINT N'Creating [dbo].[HCFGet_Organization]...';


GO
CREATE Proc [dbo].[HCFGet_Organization] 
As
Begin
  select * from [dbo].Organization
end
GO
PRINT N'Creating [dbo].[Hcf_UserOrganization]...';


GO
CREATE Procedure [dbo].[Hcf_UserOrganization] --'adminhcf.com'
@userName nvarchar(20)
As
Begin
Select * from Organization Where Orgkey in (
Select distinct Orgkey from UserProfile Where UserName=@userName and IsActive=1
) and IsActive=1
END
GO
PRINT N'Creating [dbo].[GetEmailAddressFromRecoveryCode]...';


GO
CREATE proc [dbo].[GetEmailAddressFromRecoveryCode]
@RecoveryToken  uniqueidentifier
As BEgin

SELECT EmailAddress FROM [dbo].PasswordResetRequests WHERE RecoveryMethod='E' AND RecoveryToken=@RecoveryToken AND Status='Y'
END
GO
PRINT N'Creating [dbo].[Get_WoCountByDbName]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_WoCountByDbName]  --'HCF_Holy','2019-03-19'
	@DbName varchar(max),
	@date varchar(max)=null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	declare @query varchar(max);
	declare @whereConditon varchar(max);

	set @whereConditon=' where DATEDIFF(DAY,CreatedDate,ISNULL( CONVERT(datetime,'''+@date+''') ,CreatedDate))=0 or DATEDIFF(DAY,UpdatedDate,ISNULL( CONVERT(datetime,'''+@date+''') ,UpdatedDate))=0';

	if @whereConditon is not null
	begin
	  set @query='select count(*) from '+@DbName+'.dbo.WorkOrder '+@whereConditon;
	end
	else
	begin
	 set @query='select count(*) from '+@DbName+'.dbo.WorkOrder';
	end
	

	-- select @query

	Exec (@query);


END
GO
PRINT N'Creating [dbo].[Get_UserOrgs]...';


GO
CREATE procedure [dbo].[Get_UserOrgs] --'admin@hcf.com'
@userName nvarchar(200)
As
BEGIn
Select Org.* from [dbo].UserProfile 
inner join [dbo].Organization Org on ORg.Orgkey=UserProfile.Orgkey
Where UserName=@userName and UserProfile.IsActive=1
and ORg.IsActive=1
END
GO
PRINT N'Creating [dbo].[Get_UserOrganizations]...';


GO
CREATE proc [dbo].[Get_UserOrganizations] --19205
@userId int
As
Begin
declare @userprofileId uniqueidentifier;

Select @userprofileId =UserProfileId from UserProfile Where UserId=@userId

Select UserProfileId,UP.IsActive,UP.Orgkey,org.ClientNo from UserProfile UP
inner join Organization org on org.Orgkey=UP.Orgkey
Where UP.UserId=@userId and UP.Orgkey is not null and UP.IsActive=1 and org.Orgkey in (
select UserOrgId from UserOrganization where IsActive = 1 and UserProfileId = @userprofileId
)
union 
Select UserProfileId,UO.IsActive,UserOrgId,org.ClientNo from UserOrganization  UO
inner join Organization org on org.Orgkey=UO.UserOrgId
Where UserProfileId=@userprofileId and UO.IsActive=1

end
GO
PRINT N'Creating [dbo].[Get_UserLogins]...';


GO
CREATE Proc [dbo].[Get_UserLogins]

@userProfileId uniqueIdentifier = null

As

BEgin

Select * from [dbo].UserLogin Where UserProfileId=@userProfileId order by LogOnDate desc

END
GO
PRINT N'Creating [dbo].[Get_User]...';


GO
CREATE procedure [dbo].[Get_User]
As
BEGIn
select * from UserProfile
END
GO
PRINT N'Creating [dbo].[Get_Tips]...';


GO
-- =============================================
-- Author:		PK
-- Create date: 13-05-2019
-- Description:	Get Tips By Client Number
-- =============================================
CREATE PROCEDURE [dbo].[Get_Tips] -- 0,''
	-- Add the parameters for the stored procedure here
	@clientNo int=0,
	@routeUrl nvarchar(255)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT * from Tips where ((ClientNo = @clientNo and RouteUrl=@routeUrl) or ClientNo is null) and IsApproved=1 and IsCurrent=1 and IsActive=1
	and TipType  in (1,2)
END
GO
PRINT N'Creating [dbo].[Get_SaltFromEmailAddress]...';


GO
CREATE Procedure [dbo].[Get_SaltFromEmailAddress] --'testuser@jkf.com'
@userName nvarchar(50)
As
Begin
SELECT Salt,UserId FROM UserProfile WHERE UserName=@userName
ENd
GO
PRINT N'Creating [dbo].[Get_PopEmails]...';


GO
CREATE Procedure [dbo].[Get_PopEmails]  
As  
Begin  
Select IE.EmailId,IE.Password,IE.PopServer,IE.IsActive,IE.ClientNo,ORG.DbName,IE.Port,IE.UseSSL from InboxEmails IE  
left join Organization ORG on IE.ClientNo = ORG.ClientNo  
where IE.IsActive =1  
End
GO
PRINT N'Creating [dbo].[Get_Organizations]...';


GO
CREATE Proc [dbo].[Get_Organizations] --'0D320358-9DC0-4302-AC04-7E39FB65B8BD'
@Orgkey uniqueidentifier =null,
@ClientNo int = null
As
Begin
Select * from Organization  Where Orgkey=ISNULL(@Orgkey,Orgkey) or ParentOrgKey=ISNULL(@Orgkey,ParentOrgKey) or ClientNo = ISNULL(@ClientNo,ClientNo) 

end
GO
PRINT N'Creating [dbo].[Get_NewsOnMarquee]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Get_NewsOnMarquee]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select 
	STUFF((
	SELECT ' ' + Short + ' | '
	FROM News
	/*
	Where Condition put here
	*/
	FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') as Short
END
GO
PRINT N'Creating [dbo].[Get_News]...';


GO
CREATE Procedure [dbo].[Get_News]
As
Begin
Select  News.[Id]
      ,News.[Title]
      ,News.[Short]
      ,News.[IsReleaseNotes]
      ,News.[Description]
      ,News.[Published]
      ,News.[IsDeleted]
      ,News.[StartDate]
      ,News.[EndDate]
      ,News.[CreatedBy]
      ,[CreatedOn],UP.UserName,UP.FirstName,UP.LastName,UP.UserId,UP.Email from News
      Inner join UserProfile  up on up.UserId=News.CreatedBy where News.IsDeleted=0 --and News.Published =1
ENd
GO
PRINT N'Creating [dbo].[Get_MasterOrganization]...';


GO
CREATE procedure [dbo].[Get_MasterOrganization]

As

Begin

Select * From Organization 

Select * from InboxEmails Where IsActive=1

End
GO
PRINT N'Creating [dbo].[Get_Manufacture]...';


GO
CREATE proc [dbo].[Get_Manufacture]
As
BEgin

Select Manufactures.*,UP.FirstName,UP.LastName,UP.Email from Manufactures 
inner join UserProfile UP on UP.UserId=Manufactures.CreatedBy 
order by ManufactureName

END
GO
PRINT N'Creating [dbo].[Get_LoginToken]...';


GO
CREATE procedure [dbo].[Get_LoginToken] --'D8C60C24-D2A0-4611-8C77-E2A9340E491A' 

@loginToken uniqueidentifier

As

Begin

      SET NOCOUNT ON;

      DECLARE @Exists INT

	  declare @userId int;

	  SELECT @userId=UserId FROM UserLogin WHERE RefereshToken=@loginToken
	  set @Exists=0;
	   IF EXISTS(SELECT UserId FROM UserProfile  WHERE UserId=@userId and IsActive=1)
	   Begin

			 IF EXISTS(SELECT UserLoginId FROM UserLogin  WHERE RefereshToken=@loginToken and IsLogOn=1 and IsCurrent=1)
				 BEGIN
						SET @Exists = 1
				 END
				 ELSE
				 BEGIN
                         SET @Exists = 0
                 END
	   end 

	   else

			begin
						SET @Exists = 0
			end
        select  @Exists;
	   end
GO
PRINT N'Creating [dbo].[Get_ICRASteps]...';


GO
CREATE proc [dbo].[Get_ICRASteps]
@icrastepId int =null
As
Begin
  select * from ICRASteps where ICRAStepId = isnull(@icrastepId,ICRAStepId)  
End
GO
PRINT N'Creating [dbo].[Get_ICRAObsReportCheckPoints]...';


GO
Create procedure [dbo].[Get_ICRAObsReportCheckPoints]
As
BEgin
Select * from ICRAObsReportCheckPoints
END
GO
PRINT N'Creating [dbo].[Get_ICRAMatixPrecautions]...';


GO
CREATE proc [dbo].[Get_ICRAMatixPrecautions]
As
Begin
  select ICM.ConstructionClassId,ICM.ConstructionTypeId,ICM.ConstructionRiskId,ICM.IsActive,TypeName,RiskName,ClassName 
  from ICRAMatixPrecautions ICM inner join ConstructionClass CC on ICM.ConstructionClassId = CC.ConstructionClassId
  inner join ConstructionType CT on ICM.ConstructionTypeId = CT.ConstructionTypeId
  inner join ConstructionRisk CR on ICM.ConstructionRiskId = CR.ConstructionRiskId
  where ICM.IsActive =1 and CR.IsActive =1
End
GO
PRINT N'Creating [dbo].[Get_FrequencyMaster]...';


GO
-- =============================================
-- Author:		<PRADEEP>
-- Create date: <Create Date,,>
-- Description:	<UPDATE FOR SHOWING ONLY CHECKED>
-- =============================================
CREATE PROCEDURE [dbo].[Get_FrequencyMaster]
AS
BEGIN
	Select * from [dbo].FrequencyMaster order by [Days] ,DisplayName desc 
END
GO
PRINT N'Creating [dbo].[IsValidRecoveryCode]...';


GO
CREATE proc [dbo].[IsValidRecoveryCode]
@RecoveryToken uniqueidentifier
As
BEgin


SELECT TOP 1 1 FROM [dbo].PasswordResetRequests 
WHERE RecoveryMethod='E' AND 
RecoveryToken=@RecoveryToken 
AND Status='Y' and RequestedOn < DATEADD(HOUR,24,RequestedOn);
END
GO
PRINT N'Creating [dbo].[Insert_Update_Tip]...';


GO
-- =============================================
-- Author:		<PK>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Insert_Update_Tip]
	-- Add the parameters for the stored procedure here
	@tipId int=0,
	@title nvarchar(150),
	@description nvarchar(max),
	@source nvarchar(50)=null,
	@routeUrl nvarchar(255)=null,
	@contributorName nvarchar(150)=null,
	@contributorOrg nvarchar(150)=null,
	@contributorPosition nvarchar(150)=null,
	@routename nvarchar(255) = null,
	@showContributorName bit,
	@showContributorOrg bit,
	@showContributorPosition bit,
	@isApproved int,
	@type int,
	@createdBy int=4,
	@clientNo int,
	@isActive bit,
	@updatedBy int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	IF EXISTS (select 1 from Tips where TipId = @tipId)
	BEGIN
	   declare @createdDate datetime;
	   declare @isApprovedPrevious int;
	   declare @isSystemUser int;
	   select @createdDate=CreatedDate,@isApprovedPrevious=IsApproved from Tips where TipId = @tipId;
	   select @isSystemUser=count(*) from UserProfile where IsSystemUser=1 and UserProfile.UserId=@updatedBy;
		  --IF @isApprovedPrevious=1 and @isSystemUser=0
		  --BEGIN
				---- update Tips set IsCurrent=0 where TipId = @tipId;
			 -- Insert Into Tips(ParentTipId,Title,Description,Source,RouteUrl,CreatedBy,ContributorName,ContributorOrg,ContributorPosition,ShowContributorName,ShowContributorOrg,ShowContributorPosition,IsApproved,TipType,IsActive,UpdatedBy,UpdatedDate,CreatedDate,IsCurrent,RouteName) 
			 -- values(@tipId,@title,@description,@source,@routeUrl,@createdBy,@contributorName,@contributorOrg,@contributorPosition,@showContributorName,@showContributorOrg,@showContributorPosition,@isApproved,@type,@isActive,@updatedBy,GETUTCDATE(),@createdDate,0,@routename);
		  --END
		  --ELSE
		  BEGIN
			  Update Tips set
			  Title=@title,
			  Description=@description,
			  Source=@source,
			  RouteUrl=@routeUrl,
			  CreatedBy=@createdBy,
			  --ClientNo=NULL,
			  ContributorName=@contributorName,
			  ContributorOrg=@contributorOrg,
			  ContributorPosition=@contributorPosition,
			  ShowContributorName=@showContributorName,
			  ShowContributorOrg=@showContributorOrg,
			  ShowContributorPosition=@showContributorPosition,
			  IsApproved=@isApproved,
			  TipType=@type,
			  IsActive=@isActive,
			  UpdatedBy=@updatedBy,
			  RouteName=@routename,
			  UpdatedDate=GETUTCDATE()
			  Where TipId=@tipId;
		  END
	END
	ELSE
	BEGIN
	  Insert Into Tips(Title,Description,Source,RouteUrl,CreatedBy,ContributorName,ContributorOrg,ContributorPosition,ShowContributorName,ShowContributorOrg,ShowContributorPosition,IsApproved,TipType,IsActive,UpdatedBy,UpdatedDate,IsCurrent,RouteName) 
	  values(@title,@description,@source,@routeUrl,@createdBy,@contributorName,@contributorOrg,@contributorPosition,@showContributorName,@showContributorOrg,@showContributorPosition,@isApproved,@type,@isActive,@updatedBy,GETUTCDATE(),1,@routename);
	END
	
		--update Tips set IsApproved = 1 where TipType in (3,4) and [Description] like '%<%>%'
END
GO
PRINT N'Creating [dbo].[Insert_Tip]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Insert_Tip] 
	-- Add the parameters for the stored procedure here
	@tipId int=0,
	@title nvarchar(150),
	@description nvarchar(max),
	@source nvarchar(50),
	@routeUrl nvarchar(255)=null,
	@contributorName nvarchar(150)=null,
	@contributorOrg nvarchar(150)=null,
	@contributorPosition nvarchar(150)=null,
	@showContributorName bit,
	@showContributorOrg bit,
	@showContributorPosition bit,
	@isApproved bit,
	@type int,
	@createdBy int=4,
	@clientNo int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF EXISTS (select 1 from Tips where TipId = @tipId)
	BEGIN
	  Update Tips set
	  Title=@title,
	  Description=@description,
	  Source=@source,
	  RouteUrl=@routeUrl,
	  CreatedBy=@createdBy,
	  ClientNo=@clientNo,
	  ContributorName=@contributorName,
	  ContributorOrg=@contributorOrg,
	  ContributorPosition=@contributorPosition,
	  ShowContributorName=@showContributorName,
	  ShowContributorOrg=@showContributorOrg,
	  ShowContributorPosition=@showContributorPosition,
	  IsApproved=@isApproved,
	  TipType=@type
	  Where TipId=@tipId;
	END
	ELSE
	BEGIN
	  Insert Into Tips(Title,Description,Source,RouteUrl,CreatedBy,ClientNo,ContributorName,ContributorOrg,ContributorPosition,ShowContributorName,ShowContributorOrg,ShowContributorPosition,IsApproved,TipType) 
	  values(@title,@description,@source,@routeUrl,@createdBy,@clientNo,@contributorName,@contributorOrg,@contributorPosition,@showContributorName,@showContributorOrg,@showContributorPosition,@isApproved,@type);
	END

END
GO
PRINT N'Creating [dbo].[Insert_PasswordResetQueue]...';


GO
CREATE procedure [dbo].[Insert_PasswordResetQueue] --'anp1987@gmail.com','E','anp1987@gmail.com','c4ad0de2-f4e4-454f-bc86-3cccc65356a6'
@EmailAddress nvarchar(50),
@RecoveryMethod nvarchar(5),
@RecoveryAddress  nvarchar(50),
@RecoveryToken nvarchar(50)
As
Begin
IF NOT EXISTS(
	SELECT TOP 1 * from [dbo].PasswordResetRequests WHERE Status='Y' AND EmailAddress=@EmailAddress AND RecoveryMethod=@RecoveryMethod) 
BEGIN 
	INSERT INTO [dbo].PasswordResetRequests(RequestId,EmailAddress, RecoveryMethod, RecoveryAddress, RecoveryToken) 
	SELECT newId(),@EmailAddress, @RecoveryMethod, @RecoveryAddress, @RecoveryToken; 
	SELECT @RecoveryToken;
END 
ELSE 
BEGIN 
	SELECT RecoveryToken FROM [dbo].PasswordResetRequests
	WHERE Status='Y' AND EmailAddress=@EmailAddress AND RecoveryMethod=@RecoveryMethod; 
END
END
GO
PRINT N'Creating [dbo].[Insert_News]...';


GO
CREATE Procedure [dbo].[Insert_News]
(
            @Title nvarchar(250)
           ,@StartDate datetime
           --,@Short nvarchar(150)
           ,@EndDate datetime
           ,@Description nvarchar(MAX)
		   ,@CreatedBy int
		   ,@Published bit 
		   ,@IsReleaseNotes bit
		   ,@newId int output
)
As
Begin
	   IF EXISTS (SELECT 1 FROM [News] WHERE Title =@Title And IsDeleted = 0 And Published = 1 )
		 BEGIN
	        select @newId=0;
            return @newId
         END
		 ELSE
	     BEGIN
		INSERT INTO [dbo].[News]
           ([Title]           
           ,[Description]
           ,[Published]
           ,[IsDeleted]
           ,[StartDate]
           ,[EndDate]
           ,[CreatedBy]
		   ,[IsReleaseNotes]
           ,[CreatedOn])
     VALUES
           (@Title          
           ,@Description
           ,@Published
           ,0
           ,@StartDate
           ,@EndDate
           ,@CreatedBy
		   ,@IsReleaseNotes
           ,GETDATE())
		    select @newId = Scope_Identity()
			 return @newID
         END
end
GO
PRINT N'Creating [dbo].[Insert_Manufacture]...';


GO
CREATE Procedure [dbo].[Insert_Manufacture]
(
            @ManufactureName nvarchar(250)          
		   ,@CreatedBy int=4
		   ,@IsActive bit 
		   ,@ManufactureId int =0 
		   ,@newId int output

)

As

Begin

	   IF EXISTS (SELECT 1 FROM Manufactures WHERE ManufactureName =@ManufactureName and IsActive = @IsActive )
			 BEGIN
				select @newId=0;
				return @newId
			 END
		 ELSe if (@ManufactureId > 0)
			 BEGIN
			   update [Manufactures] set ManufactureName =@ManufactureName, IsActive = @IsActive 
			   where ManufactureId = @ManufactureId
			   select @newId = @ManufactureId
			   return @newId
			 END
		 ELSE
			 BEGIN
				INSERT INTO [dbo].[Manufactures]([ManufactureName],[CreatedBy],[IsActive])
				VALUES(@ManufactureName,@CreatedBy,@IsActive)
				select @newId = Scope_Identity()
				return @newID
			 END
end
GO
PRINT N'Creating [dbo].[Insert_Mail]...';


GO
CREATE Procedure [dbo].[Insert_Mail] (
           @MessageId nvarchar(250)    
           ,@Subject nvarchar(50)
           ,@Sender nvarchar(50)
           ,@Cc nvarchar(max) =null
           ,@Bcc nvarchar(max) =null
           ,@Details nvarchar(150)
           ,@ReceivedDate datetime
		   ,@to nvarchar(450) =null
		   ,@ParentDocumentRepoId int=0
		   ,@IsReplied bit  =false
		   ,@EmailId nvarchar(50) =null
		   ,@MailFilePath nvarchar(max)=null
		   ,@ClientNo int
		   ,@newId int output         
)
As
Begin
 IF EXISTS (SELECT 1 FROM IncomingMail WHERE [MessageId] =@MessageId and ClientNo = @ClientNo )
 		 BEGIN
	      select @newId=0;
	    return @newId
         END
		 ELSE
	     BEGIN
           INSERT INTO [dbo].[IncomingMail]
           ([MessageId]         
           ,[Subject]
           ,[Sender]
           ,[Cc]
           ,[Bcc]
           ,[Details]
           ,[ReceivedDate]
           ,[CreatedDate]
		   ,[To]
		   ,ParentDocumentRepoId
		   ,IsReplied
		   ,EmailId
		   ,MailFilePath,ClientNo)
     VALUES
           (@MessageId      
           ,@Subject
           ,@Sender
           ,@Cc
           ,@Bcc
           ,@Details
           ,@ReceivedDate
           ,getdate(),@to,@ParentDocumentRepoId,@IsReplied,@EmailId,@MailFilePath,@ClientNo)
		   set @newId = Scope_Identity() 
	       return @newId
END
END
GO
PRINT N'Creating [dbo].[Insert_InboxEmails]...';


GO
CREATE Procedure [dbo].[Insert_InboxEmails]
            @EmailId nvarchar(50)
           ,@Password nvarchar(50)
           ,@PopServer nvarchar(50)
           ,@IsActive bit
           ,@ClientNo nvarchar(MAX)
		   ,@Port int
		   ,@UseSSL bit
		   ,@newId int output
As

BEGIn

  IF EXISTS (SELECT 1 FROM InboxEmails WHERE EmailId=@EmailId and ClientNo=@ClientNo)
    BEGIN	   
	       UPDATE [dbo].[InboxEmails]	
		   SET
       [Password] = @Password
      ,[PopServer] = @PopServer
      ,[IsActive] = @IsActive      
      ,[Port] = @Port
      ,[UseSSL] = @UseSSL
     WHERE EmailId=@EmailId and ClientNo=@ClientNo

		 select @newId =Id FROM InboxEmails WHERE EmailId=@EmailId and ClientNo=@ClientNo
		return @newID

    END
	ELSE
	BEGIN

INSERT INTO [dbo].[InboxEmails]
           ([EmailId],[Password],[PopServer],[IsActive],[ClientNo],Port,UseSSL)
     VALUES
           (@EmailId,@Password,@PopServer,@IsActive,@ClientNo,@Port,@UseSSL)
		    select @newId = Scope_Identity()
			return @newID
END
END
GO
PRINT N'Creating [dbo].[Insert_ICRASteps]...';


GO
CREATE PROCEDURE [dbo].[Insert_ICRASteps] --4
@ICRAStepId int = null,
@Alias nvarchar(50),
@Steps nvarchar(MAX),
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
   IF EXISTS (SELECT 1 FROM ICRASteps WHERE  Steps=@Steps and Alias = @Alias and IsActive =@IsActive)
	  BEGIN
	        select @newId=0;
            return @newId
      END
   ELSE if(@ICRAStepId > 0)
	 BEGIN
	   update ICRASteps set Steps=@Steps , Alias = @Alias, IsActive = @IsActive where ICRAStepId = @ICRAStepId
	    select @newId = @ICRAStepId
        return @newID
	 END
   ELSE
	  BEGIN
	      INSERT INTO [dbo].[ICRASteps]([Alias],[Steps],[IsActive],CreatedBy)VALUES
          (@Alias,@Steps,@IsActive,@CreatedBy)
	      select @newId = Scope_Identity()
          return @newID
      END
END
GO
PRINT N'Creating [dbo].[Insert_ICRAReportCheckPoint]...';


GO
CREATE proc [dbo].[Insert_ICRAReportCheckPoint]
@ICRAReportPointId int = null,
@CheckPoints nvarchar(200),
@Description nvarchar(max) =null,
@IsActive bit,
@CreatedBy int,
@newId int output
As
Begin
SET NOCOUNT ON;   
    if(@ICRAReportPointId > 0)
	BEGIN
	  update ICRAObsReportCheckPoints set CheckPoints = @CheckPoints,Description =@Description,IsActive =@IsActive
	  where ICRAReportPointId = @ICRAReportPointId
	  select @newId = @ICRAReportPointId
      return @newID
	END
	ELSE 
      IF EXISTS (SELECT 1 FROM ICRAObsReportCheckPoints WHERE CheckPoints=@CheckPoints)
		 BEGIN
	        select @newId=0;
            return @newId
         END
	   ELSE 
	     BEGIN
			INSERT INTO [dbo].[ICRAObsReportCheckPoints]
				   ([CheckPoints]
				   ,[Description]
				   ,[IsActive]
				   ,[CreatedBy]
				   ,[CreatedDate])
			 VALUES
				   (@CheckPoints
				   ,@Description
				   ,@IsActive
				   ,@CreatedBy
				   ,GETUTCDATE())
			  select @newId = Scope_Identity()
			   return @newID
       END
END
GO
PRINT N'Creating [dbo].[Insert_ICRAMatixPrecautions]...';


GO
CREATE PROCEDURE [dbo].[Insert_ICRAMatixPrecautions] --4
@ConstructionRiskId int = null,
@ConstructionTypeId int = null,
@ClassIdss nvarchar(150) = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON; 
update ICRAMatixPrecautions set IsActive =0 Where ConstructionRiskId=@ConstructionRiskId  and ConstructionTypeId = @ConstructionTypeId
 	  BEGIN
	      INSERT INTO [dbo].[ICRAMatixPrecautions]([ConstructionClassId],[ConstructionRiskId],[ConstructionTypeId],[IsActive])
		  SELECT Item,@ConstructionRiskId,@ConstructionTypeId,1 FROM dbo.SplitString(@ClassIdss, ',')
	      select @newId = Scope_Identity()
          return @newID
      END
END
GO
PRINT N'Creating [dbo].[Insert_FrequencyMaster]...';


GO
-- =============================================
-- Author:		<Author: Pradeep Pal>
-- Create date: <Create: 30-04-2020>
-- Description:	<Description: creating a report>
-- =============================================
CREATE PROCEDURE [dbo].[Insert_FrequencyMaster]
	@FrequencyId int
	,@GracePeriod int = null
	,@DisplayName nvarchar(250) = null
	,@Type nvarchar(5) = null
	,@Value int = null
	,@Days int = null
	,@Version nvarchar(50) = null
	,@IsActive bit =null
	,@CreatedBy int = null 
	,@CreateDate datetime = null
	,@newId int output
AS
BEGIN
	IF EXISTS (SELECT 1 FROM FrequencyMaster WHERE [FrequencyId] =@FrequencyId)
		BEGIN
		update FrequencyMaster set 
		GracePeriod = ISNULL(@GracePeriod,GracePeriod) ,DisplayName = ISNULL(@DisplayName,DisplayName) ,Type = ISNULL(@Type,Type) ,Value = ISNULL(@Value,Value) ,Days = ISNULL(@Days,Days) ,IsActive = ISNULL(@IsActive,IsActive)  where FrequencyId = @FrequencyId
	    select @newId=@FrequencyId;
        return @newId
        END
		ELSE
	    BEGIN			
        INSERT INTO FrequencyMaster
        (GracePeriod
        ,DisplayName
        ,Type
        ,Value
		,Days
		,Version
		,IsActive
		,CreatedBy
		,CreateDate)
    VALUES
        (@GracePeriod
		,@DisplayName
		,@Type
		,@Value
		,@Days
		,@Version
        ,@IsActive
        ,@CreatedBy
        ,GETUTCDATE()
)
		select @newId = Scope_Identity()
        return @newID

   
END
END
GO
PRINT N'Creating [dbo].[Insert_EPVersions]...';


GO
CREATE proc [dbo].[Insert_EPVersions]
@EPdetailId int,
@tableName nvarchar(500),
@ModifiedTime datetime,
@CreatedBy int
As
Begin
DECLARE @EPVersionId uniqueidentifier = newId();
DECLARE @EPDescriptionId nvarchar(50);
DECLARE @ScoreId int;
DECLARE @FrequencyId int;
DECLARE @AssetId int;
DECLARE @DocTypeId int;
DECLARE @BinderId int;
--DECLARE @HospitalTypeId int;
--select @HospitalTypeId = HospitalTypeId from Organization
select @EPDescriptionId = EPDescriptionId from [dbo].EPDescriptions where EPDetailId = @EPdetailId 
--and HospitalTypeId = @HospitalTypeId
select @ScoreId = ScoreId from .[dbo].EPDetails where EPDetailId = @EPdetailId and IsActive =1
select @AssetId = AssetId from .[dbo].EpAssets where EPDetailId =@EPdetailId and IsActive =1
select @FrequencyId = TjcFrequencyId from .[dbo].EPFrequency where EpDetailId = @EPdetailId and IsActive =1
select @DocTypeId = DocTypeId from .[dbo].EPDocuments where EPDetailId = @EPdetailId AND IsActive = 1
select @BinderId = BinderId from .[dbo].EpBinder where EPDetailId = @EPdetailId ANd IsActive = 1

if not exists(select 1 from [dbo].EPVersions where IsCurrent =1)
   update .[dbo].EPVersions set IsCurrent = 0 where EPDetailId = @EPdetailId
	BEGIN
	INSERT INTO [dbo].[EPVersions]([EPVersionId],[EPDetailId],[EPDescriptionId],[ScoreId],[FrequencyId],[AssetId]
			   ,[DocTypeId],[BinderId],[ModifiedType],[CreatedBy],[CreatedDate])
		 VALUES
			   (@EPVersionId,@EPdetailId,@EPDescriptionId,@ScoreId,@FrequencyId,@AssetId,@DocTypeId,@BinderId,
				@tableName,@CreatedBy,@ModifiedTime)
	END
END
GO
PRINT N'Creating [dbo].[Insert_EPGroupsName]...';


GO
CREATE procedure [dbo].[Insert_EPGroupsName]
@EPGroupId int = null,
@EPGroupName nvarchar(max) = null,
@IsActive bit = null
--@newId int output
as 
begin
if(@EPGroupId > 0)
begin
update EPGroups set EPGroupName = @EPGroupName, IsActive = @IsActive where EPGroupId = @EPGroupId
end
else
begin
insert into EPGroups(EPGroupName,IsActive) values (@EPGroupName,@IsActive)
--select @newId = Scope_Identity()
--return @newID
end
end
GO
PRINT N'Creating [dbo].[Insert_DocumentTypeMaster]...';


GO
Create Procedure [dbo].[Insert_DocumentTypeMaster]
 @DocTypeId int = null
,@Name nvarchar(250) = null
,@Path nvarchar(250) = null
,@IsActive bit =null
,@CreatedBy int = NULL
,@DocCategoryID int = null
,@newId int output
As
Begin
IF EXISTS (SELECT 1 FROM DocumentType WHERE [DocTypeId] =@DocTypeId)
		BEGIN
		update DocumentType set Path = @Path where DocTypeId = @DocTypeId
	    select @newId=@DocTypeId;
        return @newId
        END
		ELSE
	    BEGIN			
        INSERT INTO DocumentType
        ([Name]
        ,[Path]
        ,[IsActive]
        ,[CreatedBy]
        ,[CreatedDate]
		,[DocCategoryID])
    VALUES
        (@Name
        ,@Path
        ,@IsActive
        ,@CreatedBy
        ,GETUTCDATE()
		,@DocCategoryID
)
		select @newId = Scope_Identity()
        return @newID
END
END
GO
PRINT N'Creating [dbo].[Insert_ConstructionType]...';


GO
CREATE PROCEDURE [dbo].[Insert_ConstructionType] --4
@ConstructionTypeId int = null,
@TypeName nvarchar(100),
@Description nvarchar(max) = null,
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
   IF EXISTS (SELECT 1 FROM ConstructionType WHERE TypeName=@TypeName and IsActive =@IsActive)
	  BEGIN
	        select @newId=0;
            return @newId
      END
   ELSE if(@ConstructionTypeId > 0)
	 BEGIN
	   update ConstructionType set TypeName=@TypeName , IsActive = @IsActive ,[Description] =@Description where ConstructionTypeId = @ConstructionTypeId
	    select @newId = @ConstructionTypeId
        return @newID
	 END
   ELSE
	  BEGIN
	      INSERT INTO [dbo].[ConstructionType]([TypeName],[IsActive],CreatedBy,[Description])VALUES
          (@TypeName,@IsActive,@CreatedBy,@Description)
	      select @newId = Scope_Identity()
          return @newID
      END
END
GO
PRINT N'Creating [dbo].[Insert_ConstructionRisk]...';


GO
CREATE PROCEDURE [dbo].[Insert_ConstructionRisk] --4
@ConstructionRiskId int = null,
@RiskName nvarchar(50),
@GroupName nvarchar(50),
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
   IF EXISTS (SELECT 1 FROM ConstructionRisk WHERE RiskName=@RiskName and IsActive =@IsActive)
	  BEGIN
	        select @newId=0;
            return @newId
      END
   ELSE if(@ConstructionRiskId > 0)
	 BEGIN
	   update ConstructionRisk set RiskName=@RiskName ,GroupName =@GroupName, IsActive = @IsActive where ConstructionRiskId = @ConstructionRiskId
	    select @newId = @ConstructionRiskId
        return @newID
	 END
   ELSE
	  BEGIN
	      INSERT INTO [dbo].[ConstructionRisk]([RiskName],[GroupName],[IsActive],CreatedBy)VALUES
          (@RiskName,@GroupName,@IsActive,@CreatedBy)
	      select @newId = Scope_Identity()
          return @newID
      END
END
GO
PRINT N'Creating [dbo].[Insert_ConstructionClassActivity]...';


GO
CREATE PROCEDURE [dbo].[Insert_ConstructionClassActivity] --4
@ConstClassActivityId int = null,
@ConstClassCatId int = null,
@ConstClassId int,
@Activity nvarchar(MAX),
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
  IF EXISTS (SELECT 1 FROM ConstructionClassActivity WHERE Activity=@Activity and ConstClassCatId = @ConstClassCatId and IsActive = @IsActive and ConstClassId = @ConstClassId)
     BEGIN
	        select @newId=0;
            return @newId
     END
  ELSE if(@ConstClassActivityId > 0)
	 BEGIN
	   update ConstructionClassActivity set Activity = @Activity , IsActive = @IsActive where ConstClassActivityId = @ConstClassActivityId
	     select @newId =@ConstClassActivityId
         return @newID
	 END
  ELSE
	 BEGIN
	   INSERT INTO [dbo].[ConstructionClassActivity]([ConstClassCatId],[ConstClassId],[Activity],[IsActive],CreatedBy)VALUES
           (@ConstClassCatId,@ConstClassId,@Activity,@IsActive,@CreatedBy)
	        select @newId = Scope_Identity()
            return @newID
	 END
END
GO
PRINT N'Creating [dbo].[Insert_ConstructionClass]...';


GO
CREATE PROCEDURE [dbo].[Insert_ConstructionClass] --4
@ConstructionClassId int = null,
@ClassName nvarchar(100),
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
   IF EXISTS (SELECT 1 FROM ConstructionClass WHERE ClassName=@ClassName and IsActive =@IsActive)
	  BEGIN
	        select @newId=0;
            return @newId
      END
   ELSE if(@ConstructionClassId > 0)
	 BEGIN
	   update ConstructionClass set ClassName=@ClassName , IsActive = @IsActive where ConstructionClassId = @ConstructionClassId
	    select @newId = @ConstructionClassId
        return @newID
	 END
   ELSE
	  BEGIN
	      INSERT INTO [dbo].[ConstructionClass]([ClassName],[IsActive],CreatedBy)VALUES
          (@ClassName,@IsActive,@CreatedBy)
	      select @newId = Scope_Identity()
          return @newID
      END
END
GO
PRINT N'Creating [dbo].[Insert_ConstructionActivity]...';


GO
CREATE PROCEDURE [dbo].[Insert_ConstructionActivity] --4
@ConstActivityId int = null,
@ConstructionTypeId int,
@Activity nvarchar(MAX),
@IsActive bit,
@CreatedBy int = null,
@newId int output
AS
BEGIN
SET NOCOUNT ON;   
  IF EXISTS (SELECT 1 FROM ConstructionActivity WHERE Activity=@Activity and IsActive = @IsActive)
     BEGIN
	        select @newId=0;
            return @newId
     END
  ELSE if(@ConstActivityId > 0)
	 BEGIN
	   update ConstructionActivity set Activity = @Activity , IsActive = @IsActive where ConstActivityId = @ConstActivityId
	     select @newId =@ConstActivityId
         return @newID
	 END
  ELSE
	 BEGIN
	   INSERT INTO [dbo].[ConstructionActivity]([ConstructionTypeId],[Activity],[IsActive],CreatedBy)VALUES
           (@ConstructionTypeId,@Activity,@IsActive,@CreatedBy)
	        select @newId = Scope_Identity()
            return @newID
	 END
END
GO
PRINT N'Creating [dbo].[Insert_ClientUser]...';


GO
CREATE proc [dbo].[Insert_ClientUser]
@userId int,
@clientNo int,
@isActive bit,
@usergroupIds nvarchar(100)
As
BEGIn

declare @UserProfileId uniqueidentifier;
declare @UserOrgId uniqueidentifier;
declare @dbName nvarchar(100)
declare @sqlQuery nvarchar(max)


Select @UserProfileId=UserProfileId from UserProfile Where UserId=@userId
Select @UserOrgId=Orgkey,@dbName=DbName from Organization Where ClientNo=@clientNo
update UserOrganization set IsActive=0 Where  UserProfileId=@UserProfileId and UserOrgId=@UserOrgId 

if(@isActive=1)
begin
INSERT INTO [dbo].[UserOrganization]
           ([UserOrgId]
           ,[UserProfileId]
           ,[IsActive])
Select  @UserOrgId,@UserProfileId ,@isActive 

set @sqlQuery= @dbName+'.dbo.Insert_MainUser '+convert(nvarchar(40), @userId)+' ,'''+convert(nvarchar(40), @usergroupIds)+'''' ;
EXECUTE sp_executesql @sqlQuery 

END

END
GO
PRINT N'Creating [dbo].[Insert_Attachments]...';


GO
CREATE Procedure [dbo].[Insert_Attachments]
(
 @MessageId nvarchar(250) =null
,@FileName nvarchar(MAx)
,@FilePath nvarchar(MAX)
,@DocumentRepoId int 
)
As
Begin
INSERT INTO [dbo].[Attachments]
           (DocumentRepoId
           ,[FileName]
           ,[FilePath]
           ,[CreatedBy]
           ,[CreatedDate]
		   ,Extension)
     VALUES
           (
		   @DocumentRepoId
           ,@FileName
           ,@FilePath
           ,4
           ,getdate()
		   ,reverse(left(reverse(@FileName),charindex('.',reverse(@FileName))-1)))
END
GO
PRINT N'Creating [dbo].[Get_ProjectType]...';


GO
CREATE Procedure [dbo].[Get_ProjectType]
As
Begin
Select * from ProjectType where IsActive=1
ENd
GO
PRINT N'Creating [dbo].[CheckICRAPCRAMenuExist]...';


GO
CREATE PROCEDURE [dbo].[CheckICRAPCRAMenuExist]
		@ClientId nvarchar(max),
		@MenuName nvarchar(max)
AS
BEGIN
	    select Count(*) as IsExist from  OrgServices as os inner join Menus as M on os.MenuID=M.Id
  where OrganizationKey=@ClientId and (M.Name=@MenuName ) and IsActive=1 and os.Status=1


END
GO
PRINT N'Creating [dbo].[Get_AllClientUsers]...';


GO
CREATE proc Get_AllClientUsers
As
begin
Select *,1 as 'IsLoginEnable' from UserProfile Where IsActive=1
END
GO
PRINT N'Creating [dbo].[Update_UserLoginIP]...';


GO
CREATE proc [dbo].[Update_UserLoginIP]

@ip nvarchar(200) =null,

@city nvarchar(200) =null,

@country_name nvarchar(200) =null,

@organisation nvarchar(MAX) =null,
@OsName nvarchar(MAX) =null,
@UserLoginId int ,
@BrowserName nvarchar(MAX) =null

As

BEgin

UPDATE [dbo].[UserLogin]

   SET 

      [ip] = @ip
      ,[city] = @city
      ,[country_name] = @country_name
      ,[organisation] =@organisation
	  ,OsName=@OsName
	  ,BrowserName=@BrowserName

 WHERE UserLoginId=@UserLoginId



 END
GO
PRINT N'Creating [dbo].[Update_Password]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Modified By & date: Avinash Varsheny & 04-11-2016
-- Description:	to get the User Information bu UserId
-- =============================================
CREATE PROCEDURE [dbo].[Update_Password] ---1176,'5HaUgwKoguAxK4/uAYxYADqn+pLsRJwMqiyasU8VppKpI9tmBClSCO53LkGv4F/ONEWXDugyKB3I+glCJDUeaA=='
@UserId int,
@Password nvarchar(MAX)
AS
BEGIN
SET NOCOUNT ON;
   declare @dbName nvarchar(40);
   declare @OrgKey uniqueidentifier;
   select @OrgKey=Orgkey from  [UserProfile] WHERE UserId =@UserId
   Select @dbName=DbName from  Organization WHERE Orgkey=@OrgKey
   if(@OrgKey is not null)
     begin
	 declare @sqlQuery nvarchar(max);
	 SET @sqlQuery  ='Update '+@dbName+'.[dbo].[UserProfile] Set [Password]='''+ @Password +''' Where UserId = '+CAST(@UserId as nvarchar(20))+ CHAR(13) +
	                 'INSERT INTO ' +@dbName+ '.[dbo].[UserProfileHistory](UserId,[Password],ModifiedBy)VALUES('+CAST(@UserId as nvarchar(20))+','''+@Password+''','+CAST(@UserId as nvarchar(20))+')'+ CHAR(13) +
	                 'Update '+@dbName+'.[dbo].[UserLogin] Set IsLogin = 0, LogoutDate = '''+ CAST(GETUTCDATE() as nvarchar(30)) +''' where UserId = '+CAST(@UserId as nvarchar(20))
	   --EXECUTE sp_executesql @sqlQuery
	     print @sqlQuery

	 END
    ELse
     BEGIN
       Update UserProfile Set [Password]=@Password Where UserId=@UserId
	   update UserLogin set IsLogOn = 0 , LogOffDate = GETUTCDATE() where UserId = @UserId
	 END
END
GO
PRINT N'Creating [dbo].[Update_News]...';


GO
-- =============================================
-- Author:		Mukund
-- Create date: 03/04/2020
-- Description:	to update the news records
-- =============================================
CREATE Procedure [dbo].[Update_News]
(
		    @Id int
           ,@Title nvarchar(250)
		   ,@Short varchar(100) = null
		   ,@Description nvarchar(MAX)
		   ,@Published bit
           ,@StartDate datetime
		   ,@EndDate datetime
		   ,@IsReleaseNotes bit
		   ,@CreatedBy int
		   ,@newId int output
)
As
Begin
	   IF EXISTS (SELECT 1 FROM [dbo].[News] WHERE Id = @Id )
		 BEGIN
			IF EXISTS (SELECT 1 FROM [dbo].[News] WHERE Title = @Title AND Id != @Id And IsDeleted = 0)
			BEGIN
				SELECT @newId = 0
			END
			ELSE
			BEGIN
				Update [dbo].[News]
				set Title = @Title
				,Short = ISNULL(@Short,Short)
				,StartDate = @StartDate 
				,EndDate = @EndDate 
				,Description = ISNULL(@Description, Description)
				,CreatedBy = ISNULL(@CreatedBy, CreatedBy)
				,Published = ISNULL(@Published, Published)
				,IsReleaseNotes = ISNULL(@IsReleaseNotes, IsReleaseNotes)
				where Id = @Id
				Select @newId = @Id
		   END
         END
		 RETURN @newId
END
GO
PRINT N'Creating [dbo].[Update_LogOutUser]...';


GO
CREATE Procedure [dbo].[Update_LogOutUser]
@userId int =0,
@RefereshToken uniqueidentifier=null,
@IsAllSession bit = 0,
@LastLoginURL varchar(150) = ''
As
Begin
if(@IsAllSession =1)
BEGIN
   update [dbo].UserLogin set IsLogOn=0 ,LogOffDate =getutcdate() Where UserId = @userId and IsLogOn =1  
END
ELSe
BEGIN
update [dbo].UserLogin set IsLogOn=0 ,LogOffDate =getutcdate() Where RefereshToken=@RefereshToken
ENd
End
GO
PRINT N'Creating [dbo].[Update_DocumentTypeMaster]...';


GO
Create Procedure [dbo].[Update_DocumentTypeMaster]
 @DocTypeId int,
 @Name nvarchar(250),
 @Path nvarchar(250),
 @IsActive bit,
 @CreatedBy int = NULL,
  @DocCategoryID int = null
As
Begin
update DocumentType set Name = @Name, Path =@Path, IsActive = @IsActive,DocCategoryID = @DocCategoryID
where DocTypeId = @DocTypeId
END
GO
PRINT N'Creating [dbo].[Update_Attachment]...';


GO
CREATE Procedure [dbo].[Update_Attachment]
(
@ids nvarchar(100),
@docId int,
@type int 
)
As
Begin
if(@type =1) -- Reject
Begin
update [dbo].Attachments Set IsRejected=1 Where Id in (SELECT Item FROM dbo.SplitString(@ids, ','))

Insert Into [dbo].Attachments (DocumentRepoId,FileName,FilePath,Extension,IsRejected,IsUsed,CreatedBy)
Select @docId,FileName,FilePath,Extension,IsRejected,0,CreatedBy From [dbo].Attachments Where Id in (SELECT Item FROM dbo.SplitString(@ids, ','))
END
Else -- Used Case
Begin
update [dbo].Attachments Set IsUsed=1 Where id in (SELECT Item FROM dbo.SplitString(@ids, ','))
END
END
GO
PRINT N'Creating [dbo].[Update_ApprovalOfTips]...';


GO
-- =============================================
-- Author:		PK
-- Create date: 29 MAY 2019
-- Description:	Change Approval Status
-- =============================================
CREATE PROCEDURE [dbo].[Update_ApprovalOfTips]
	-- Add the parameters for the stored procedure here
	@ApproveStatus int,
	@tipId int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	declare @parentTipId int;
	select @parentTipId=ParentTipId from Tips where TipId=@tipId;

	IF(@parentTipId is not null and @parentTipId>0 and @ApproveStatus=1)
	BEGIN
	   Update Tips set IsCurrent=0 where TipId=@parentTipId;
	END

	Update Tips set IsApproved=@ApproveStatus,IsCurrent=1 where TipId=@tipId;
END
GO
PRINT N'Creating [dbo].[Updade_EPsAssignList]...';


GO
CREATE procedure [dbo].[Updade_EPsAssignList]
@EPGroupId int = null,
@EPDetailId int = null
as
begin 
delete from dbo.EPGroupsDetail where EPGroupId = @EPGroupId and EPDetailId = @EPDetailId
end
GO
PRINT N'Creating [dbo].[sp_helptext2]...';


GO
CREATE PROCEDURE [dbo].[sp_helptext2] (@ProcName NVARCHAR(256))
AS
BEGIN
  DECLARE @PROC_TABLE TABLE (X1  NVARCHAR(MAX))

  DECLARE @Proc NVARCHAR(MAX)
  DECLARE @Procedure NVARCHAR(MAX)
  DECLARE @ProcLines TABLE (PLID INT IDENTITY(1,1), Line NVARCHAR(MAX))

  SELECT @Procedure = 'SELECT DEFINITION FROM '+db_name()+'.SYS.SQL_MODULES WHERE OBJECT_ID = OBJECT_ID('''+@ProcName+''')'

  insert into @PROC_TABLE (X1)
        exec  (@Procedure)

  SELECT @Proc=X1 from @PROC_TABLE

  WHILE CHARINDEX(CHAR(13)+CHAR(10),@Proc) > 0
  BEGIN
        INSERT @ProcLines
        SELECT LEFT(@Proc,CHARINDEX(CHAR(13)+CHAR(10),@Proc)-1)
        SELECT @Proc = SUBSTRING(@Proc,CHARINDEX(CHAR(13)+CHAR(10),@Proc)+2,LEN(@Proc))
  END
 --* inserts last line
 insert @ProcLines 
 select @Proc ;

 --edited here. (where Line<>'')
 SELECT Line FROM @ProcLines where Line<>'' ORDER BY PLID
END
GO
PRINT N'Creating [dbo].[Rm_Update_ICRARiskArea]...';


GO
CREATE PROCEDURE [dbo].[Rm_Update_ICRARiskArea]	
	
	@Name varchar(255),
	@ApprovalStatus int = null,
	@IsActive bit,	
	@CreatedBy int,
	@IsSendEmail bit = 0,
	@RiskAreaId int
	
AS
BEGIN 
UPDATE [dbo].[ICRARiskArea]
   SET [Name] = @Name
      ,ApprovalStatus = @ApprovalStatus
      ,[IsActive] = @IsActive    
	  ,[IsSendEmail] = @IsSendEmail
 WHERE  RiskAreaId=@RiskAreaId
	
END
GO
PRINT N'Creating [dbo].[Rm_Insert_ICRARiskArea]...';


GO
CREATE PROCEDURE [dbo].[Rm_Insert_ICRARiskArea]	
	
	@Name varchar(255),
	@ApprovalStatus int = null,
	@IsActive bit,	
	@CreatedBy int,
	@IsSendEmail bit = 0,
	@newId int output
AS
BEGIN 
IF EXISTS (SELECT 1 FROM ICRARiskArea WHERE Name =@Name)
		 BEGIN
	        select @newId=0;
            return @newId
         END
		 ELSE
	     BEGIN
			INSERT INTO [dbo].[ICRARiskArea]
           ([Name]
           ,[ApprovalStatus]
           ,[IsActive]
		   ,[IsSendEmail]
           ,[CreatedBy]
           ,[CreatedDate])
     VALUES
           (@Name
           ,@ApprovalStatus
           ,@IsActive
		   ,@IsSendEmail
           ,@CreatedBy
           ,getutcdate())
    select @newId = Scope_Identity()
	return @newID;
	END
	
END
GO
PRINT N'Creating [dbo].[Main_MasterOrganization]...';


GO
CREATE Proc [dbo].[Main_MasterOrganization]  --4,0
@userId int ,
@hostingEnvironment int = null
As
Begin
IF EXISTS (Select * from [dbo].UserProfile Where UserId=@userId and IsActive=1 )
BEGIN
	if exists(select 1 from [dbo].Organization where DbName ='HCF_TestHospital')
		BEGIN
		DECLARE @TestOrgKey uniqueidentifier;
        select @TestOrgKey = Orgkey from dbo.Organization where DbName = 'HCF_TestHospital' 
	      Select * from [dbo].Organization ORG Where IsActive=1
		  and Orgkey in (
			 Select UOT.UserOrgId from [dbo].UserOrganization UOT inner join [dbo].UserProfile UT
			 on UT.UserProfileId=UOT.UserProfileId    
			 Where ut.UserId=@userId and UOT.IsActive=1 
		  ) 		  
		  AND (@hostingEnvironment =1 ANd ORG.Orgkey not in (@TestOrgKey) OR 
		       @hostingEnvironment =2 and Orgkey in (@TestOrgKey))
		END
	ELSE
		BEGIN
		  Select * from [dbo].Organization Where IsActive=1
		  and Orgkey in (
			 Select UOT.UserOrgId from [dbo].UserOrganization UOT inner join [dbo].UserProfile UT
			 on UT.UserProfileId=UOT.UserProfileId    
			 Where ut.UserId=@userId and UOT.IsActive=1 
		  ) 
		  --union all 
		  --Select * from  [dbo].Organization Where Orgkey in (select Orgkey from UserProfile where UserId = @userId)
		END
	END
END
GO
PRINT N'Creating [dbo].[GetCommonFireDrillCategory]...';


GO
CREATE Proc [dbo].[GetCommonFireDrillCategory] -- 14
As
Begin
Select * from dbo.FiredrillCategory order by CategoryName
END
GO
PRINT N'Creating [dbo].[Insert_FiredrillCategory]...';


GO
Create Procedure [dbo].[Insert_FiredrillCategory]         
            @FiredrilCatId int ,   
			@CategoryName nvarchar(max) ,
			@Description nvarchar(max) = null,
			@IsActive bit ,
		    @CreatedBy int = null,
			@Applicable nvarchar(max),
			@newId int output
As
Begin
if(@FiredrilCatId >0)
begin
UPDATE [dbo].[FiredrillCategory]
   SET [IsActive] = @IsActive,
		[Description] = @Description,
		[CategoryName] = @CategoryName,
		[Applicable] = @Applicable
 WHERE FiredrillCatId=@FiredrilCatId
 select  @newId = @FiredrilCatId
			
end
else
BEGIN
INSERT INTO [dbo].[FiredrillCategory]
           ([CategoryName]
		   ,[Description]
           ,[IsActive]
           ,[CreatedBy]		   
           ,[CreatedDate]
		   ,IsCommonCat
		   ,Applicable
		   )
     VALUES
           (@CategoryName
		   ,@Description		 
           ,@IsActive
           ,@CreatedBy		 
           ,GETUTCDATE()
		   ,1
		   ,@Applicable)
		    select  @newId = @@IDENTITY
			return @newId
END
return @newId
End
GO
PRINT N'Creating [dbo].[Check_UserVendorExist]...';


GO
Create Procedure [dbo].[Check_UserVendorExist] --'admin@hcf.com',0
(
@vendorId int 
)
As
Begin
SELECT CASE WHEN EXISTS (
    select 1 from dbo.UserProfile where VendorId = @vendorId
)
THEN CAST(1 AS BIT)
ELSE CAST(0 AS BIT) END 
end
GO
PRINT N'Creating [dbo].[Get_IsVendorExist]...';


GO
CREATE Proc [dbo].[Get_IsVendorExist] 
@Orgkey varchar(50) =null,
@Email varchar(50) =null
As
Begin
select DbName from dbo.Vendors VR
inner join dbo.Organization ORG on VR.ClientNo = ORG.ClientNo
where VR.RegistrationNo = @Orgkey
end
GO
PRINT N'Creating [dbo].[Get_VendorbyOrgid]...';


GO
Create Proc [dbo].[Get_VendorbyOrgid] --'0D320358-9DC0-4302-AC04-7E39FB65B8BD'
@Orgkey varchar(50) =null
As
Begin
select * from dbo.Vendors VR
inner join dbo.Organization ORG on VR.ClientNo = ORG.ClientNo
where VR.RegistrationNo = @Orgkey
end
GO
PRINT N'Creating [dbo].[Insert_RoundCategory]...';


GO
CREATE Procedure [dbo].[Insert_RoundCategory]         
            @RoundCatId int ,   
			@CategoryName nvarchar(max) ,
		    @CreatedBy int = null,
			@IsActive bit ,
			@Applicable nvarchar(max) = null
		   ,@newId int output
As
Begin
if(@RoundCatId >0)
begin
UPDATE [dbo].[RoundCategory]
   SET [IsActive] = @IsActive,
   [CategoryName] = @CategoryName
      ,Applicable = @Applicable   
 WHERE RoundCatId=@RoundCatId
 select  @newId = @RoundCatId
			
end
else
BEGIN
INSERT INTO [dbo].[RoundCategory]
           ([CategoryName]
           ,[IsActive]
           ,[CreatedBy]		   
           ,[CreatedDate]
		   ,Applicable)
     VALUES
           (@CategoryName		 
           ,@IsActive
           ,@CreatedBy		 
           ,GETUTCDATE()
		   ,@Applicable)
		    select  @newId = @@IDENTITY
			return @newId
END
return @newId
End
GO
PRINT N'Creating [dbo].[GetCommonRoundCategory]...';


GO
CREATE Proc [dbo].[GetCommonRoundCategory] -- 14
As
Begin
Select * from dbo.RoundCategory order by CategoryName
select * from dbo.RoundsQuestionnaires where RoundCatId in (select RoundCatId from  dbo.RoundCategory where IsActive = 1 )
END
GO
PRINT N'Creating [dbo].[Insert_FireDrillQuestionnaires]...';


GO
CREATE Procedure [dbo].[Insert_FireDrillQuestionnaires]
            @FireDrillQuesId int
           ,@FireDrillCatId int        
           ,@Questionnaries nvarchar(max)     
		   ,@IsActive bit   
		   ,@CreatedBy int  
		   ,@Applicable nvarchar(max) = null   
		   ,@newId int output
As
Begin
INSERT INTO [dbo].[FireDrillQuestionnaires]
           (
		    [FireDrillCatId]
		   ,[Questionnaries]
           ,[IsActive]
           ,[CreatedBy]		  
           ,[CreatedDate]
		   ,[Applicable],[IsCommQues])
     VALUES
           (
		    @FireDrillCatId
           ,@Questionnaries
           ,@IsActive
           ,@CreatedBy
		   ,GETUTCDATE()
		   ,@Applicable,1)
		    select  @newId = @@IDENTITY
			return @newId
End
GO
PRINT N'Creating [dbo].[Update_FiredrillQuestionnaries]...';


GO
CREATE Procedure [dbo].[Update_FiredrillQuestionnaries]
            @FireDrillQuesId int
           ,@FireDrillCatId int        
           ,@Questionnaries nvarchar(max)     
		   ,@IsActive bit   
		   ,@CreatedBy int   
		   ,@Applicable nvarchar(max) = null
		  
As
Begin
           update dbo.FireDrillQuestionnaires set FireDrillCatId = @FireDrillCatId, 
		   Questionnaries = @Questionnaries ,IsActive = @IsActive, CreatedBy = @CreatedBy,
		   Applicable = @Applicable
		    where FireDrillQuesId = @FireDrillQuesId
End
GO
PRINT N'Creating [dbo].[Get_FiredrillQuestionnaries]...';


GO
CREATE Proc [dbo].[Get_FiredrillQuestionnaries]  
As
BEgin
select * from [dbo].[FiredrillCategory] where IsActive = 1
select * from [dbo].[FireDrillQuestionnaires]
End
GO
PRINT N'Creating [dbo].[Insert_RoundsQuestionnaires]...';


GO
CREATE Procedure [dbo].[Insert_RoundsQuestionnaires]   --- add round common ques.
            @RouQuesId int 
		   ,@RoundStep nvarchar(max)
		   ,@RiskStepCode nvarchar(5)
		   ,@RiskType int  =null    
           ,@CreatedBy int
		   ,@RoundCatId int    
		   ,@IsShared bit		   
		   ,@IsActive bit       
		   ,@Applicable nvarchar(max) = NULL
           ,@shortdescription nvarchar(50) = null
		   ,@newId int output
As
Begin
if(@RouQuesId >0)
begin
UPDATE [dbo].[RoundsQuestionnaires]
   SET [IsActive] = @IsActive  ,
   [RoundStep] = @RoundStep,
   [RiskStepCode] = @RiskStepCode,
   [RiskType] = @RiskType,
   [Applicable] = @Applicable,
    [ShortDescription] = @shortdescription
 WHERE RouQuesId=@RouQuesId
 select  @newId = @RouQuesId
			
end
else
BEGIN
INSERT INTO [dbo].[RoundsQuestionnaires]
           (RoundCatId
		   ,[RoundStep]
		   ,[RiskStepCode]
		   ,[RiskType]
           ,[IsActive]
           ,[CreatedBy]
		   ,[IsShared]
           ,[CreatedDate]
		   ,[Applicable],[IsCommonRoundQues],[ShortDescription])
     VALUES
           (@RoundCatId
		   ,@RoundStep
		   ,@RiskStepCode
		   ,@RiskType
           ,1
           ,@CreatedBy
		   ,@IsShared
           ,GETUTCDATE()
		   ,@Applicable,1,@shortdescription)
		    select  @newId = @@IDENTITY
			return @newId
END
return @newId
End
GO
PRINT N'Creating [dbo].[Get_RoundCommonQuestionaries]...';


GO
CREATE Proc [dbo].[Get_RoundCommonQuestionaries] -- 14
As
Begin
Select * from RoundCategory order by CategoryName
Select * from RoundsQuestionnaires order by RoundStep 
END
GO
PRINT N'Creating [dbo].[Get_ModuleMaster]...';


GO
CREATE PROCEDURE [dbo].[Get_ModuleMaster] --111347
 -- Add the parameters for the stored procedure here  
 @Clientno int = null  
AS  
BEGIN     
	Select ModuleMaster.*, OrgServices.TrialStartDate,OrgServices.TrialEndDate,
	case when OrgServices.Status is null then Convert(bit,0) 
	when OrgServices.ServiceMode = 2 then Convert(bit,1) 
	when OrgServices.ServiceMode = 3 then Convert(bit,0) 
	when OrgServices.ServiceMode = 0 then Convert(bit,0)
	when OrgServices.ServiceMode = 5 then Convert(bit,1)
	else Convert(bit,OrgServices.Status) end as 'OrgModuleStatus',
	case when OrgServices.ServiceMode is null then -3 else OrgServices.ServiceMode end as 'OrgServiceMode'
	from ModuleMaster left join 
	OrgServices
	on ModuleMaster.ModuleId=OrgServices.ModuleId and OrganizationKey=@Clientno and MenuID is null
    select * from Menus
END
GO
PRINT N'Creating [dbo].[Get_VendorOrgInvitation]...';


GO
CREATE Proc [dbo].[Get_VendorOrgInvitation]
   @invitationId uniqueidentifier
As
BEgin
SELECT VO.*,o.Name as 'OrganizationName', o.DbName,o.Orgkey,v.Name as 'VendorsName',v.VendorId as 'VendorId',v.Email  FROM dbo.VendorOrganizations VO
inner join dbo.Organization o on VO.OrgKey=o.Orgkey
inner join Vendors v on v.VendorId=vo.VendorId
WHERE 
InvitationId=@invitationId
 and v.IsActive =1 and o.IsActive=1 

END
GO
PRINT N'Creating [dbo].[Standards].[TJCDescription].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'The Joint Commission Description', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'Standards', @level2type = N'COLUMN', @level2name = N'TJCDescription';


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3681ee08-4ad4-4edb-a498-b208731c4497')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3681ee08-4ad4-4edb-a498-b208731c4497')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f4ec5f47-b108-447c-8d84-9e389f5b622a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f4ec5f47-b108-447c-8d84-9e389f5b622a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab4b2164-289b-4cc0-9589-1a7ced51bdc6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab4b2164-289b-4cc0-9589-1a7ced51bdc6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f1748194-78ad-47b4-9404-5c2517ea4197')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f1748194-78ad-47b4-9404-5c2517ea4197')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fea86210-6193-4068-a530-f1b7cb9e7985')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fea86210-6193-4068-a530-f1b7cb9e7985')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1a34987d-7f06-4a9c-90aa-2cad33f88a79')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1a34987d-7f06-4a9c-90aa-2cad33f88a79')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
